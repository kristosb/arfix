{"version":3,"sources":["Components/Viewer/babylonjs/Airplane.js","Components/Viewer/babylonjs/VehiclesData.js","Components/Viewer/babylonjs/GuiHudControls.js","Components/Viewer/babylonjs/HudControls.js","Components/Viewer/babylonjs/Hud.js","Components/Viewer/babylonjs/Clock.js","Components/Viewer/babylonjs/SkySimulator.js","Components/Viewer/babylonjs/OceanSimulator.js","Components/Viewer/babylonjs/sahdowManager.js","Components/Viewer/babylonjs/CannonUtils.js","Components/Viewer/babylonjs/Vehicle.js","Components/Viewer/babylonjs/BattleShip.js","Components/Viewer/babylonjs/SceneManager.js","Components/Viewer/babylonjs/babylonEntryPoint.js","Components/Viewer/Viewer.js","App.js","reportWebVitals.js","index.js"],"names":["vmult","v","q","target","BABYLON","x","y","z","qx","qy","qz","qw","w","ix","iy","iz","iw","applyLocalForce","localForce","localPoint","body","CANNON","AirplaneCannon","scene","chassis","controls","this","console","error","_lift","_roll","_rollLimit","_yaw","_yawLimit","_pitch","_pitchLimit","_velocity","_currentSpeed","_enginePower","_enginePowerLimit","enginePowerPrev","speedModifier","collision","rudder","rotor","leftAileron","rightAileron","leftElevator","rightElevator","_relativeBody","_isTouchingGround","addAnimations","animationGroup","play","speedRatio","controlsInitialize","registerForces","log","val","velocity","Inverse","quaternion","toEulerAngles","mesh","touching","rotation","Math","PI","animWheel","ANIMATIONTYPE_FLOAT","ANIMATIONLOOPMODE_CYCLE","wheelKeys","push","frame","value","setKeys","animations","addTargetedAnimation","rotorSpin","rudderZeroRotation","leftAileronZeroRotation","rightAileronZeroRotation","leftElevatorZeroRotation","rightElevatorZeroRotation","copyFrom","rotationQuaternion","position","set","rot","rotate","Up","Left","lift","abs","enginePower","dir","pitchForce","YawForce","aileronControl","roll","rudderControl","yaw","elevatorControl","pitch","that","onBeforeRenderObservable","add","applyRollForce","applyPitchYawForce","applyDragForce","applyLiftForce","applyThrustForce","propellerSpeedUpdate","resetControls","AirplaneWW2","meshAll","eulerRotation","translate","WORLD","scaling","multiplyByFloats","massOffset","settings","suspensionStiffness","suspensionDamping","suspensionCompression","suspensionRestLength","rollInfluence","rearWheelSettings","wheelsMesh","forEach","m","removeChild","radius","wheels","pos","isFront","params","addInPlace","size","color","name","box","CreateBox","width","depth","height","myMaterial","diffuseColor","specularColor","emissiveColor","material","makebox","subtractInPlace","toQuaternion","isVisible","visualMeshes","vm","addChild","receiveShadows","freeze","Object","values","chassisBody","createBody","powerWheelsIndex","steeringWheelsIndex","brakeWheelsIndex","chassisMesh","dispose","world","getPhysicsEngine","getPhysicsPlugin","initRotation","addBody","registerBeforeRender","oldRoot","newRoot","meshes","impostorType","coliderMeshesBox","cm","entity","impostor","options","reparent","checkCollisions","parent","physicsImpostor","createPhysicsImpostor","mass","friction","restitution","chassisShape","offset","mat","addShape","angularDamping","_scene","_chassisMesh","_wheelsMesh","_powerWheelsIndex","_steeringWheelsIndex","_brakeWheelsIndex","s","indices","prototype","getAbsoluteSize","__size","Zero","bounds","getBoundingInfo","minimum","maximum","hudControl","bm","_x","_y","lineWidth","globalLineWidth","_fontSize","localLineWidth","hudSimpleText","fontSize","txt","font","textAlign","fillText","range","start","end","inc","Array","fill","map","_","idx","limitCompass","limitPitchLadder","rangeClip","rangeArray","limit","compass","tickSpace","_range","middle","tilt","tickHeight","scale","floor","angle","rangeScale","tiltFloor","tiltRemd","tiltRemdHalf","scaleVals","beginPath","space","spaceHalf","toString","moveTo","lineTo","closePath","stroke","pitchLader","middleOffset","save","sign","setLineDash","restore","hudPanel","canvas","now","then","interval","angles","speed","altitude","power","style","window","drawCanvas","document","createElement","ctx","getContext","fillStyle","strokeStyle","hudElements","HUD2D","texture","emissiveTexture","disableLighting","diffuseTexture","hasAlpha","backFaceCulling","hudMesh","CreatePlane","draw","clearRect","text","update","linkWithMesh","linkWithCamera","cam","lockToCamera","lockedTarget","setRotation","eulerAngles","setSpeed","toFixed","setAltitude","a","setPower","p","time","Clock","autoStart","startTime","oldTime","elapsedTime","running","getElapsedTime","getDelta","diff","newTime","performance","Date","skySim","sunLight","ambientLight","followCam","skyboxMaterial","SkyMaterial","distance","turbidity","inclination","alpha","alphaMode","luminance","skybox","cloudMaterial","cloudTexture","twoSidedLighting","faceUV","cloudBoxSizeMult","cloudOptions","wrap","cloudBox","calcRaylight","rayligh","convertRange","rayleigh","setLightDirection","dirNorm","useSunPosition","sunPosition","normalize","direction","copyFromFloats","intensity","move","cameraOffset","r1","r2","transitionSunInclination","makeClouds","area","spriteManagerClouds","i","clouds","random","round","invertU","invertV","getSkyMesh","camWaterMask","maskProjectionCam","gmat","createMaskMaterial","ocean","checkDepthMapCreated","_currentRefreshId","ProceduralHeightMap","setTimeout","getMesh","setPosition","wsize","sdfRes","getSize","sdfTexture","generateDistanceField","flowHeight","distortionFlow","water","CreateGround","subdivisions","CustomMaterial","bumpTexture","_texture","baseWidth","wrapU","wrapV","setVector2","setTexture","refreshRate","level","vScale","uScale","specularPower","waterColorTexture","generateShallowWaterGradient","res","occlusionTexture","iter1","uid","iter","ShadersStore","setFloat","depfthField","clipDepth","deepColor","shallowColor","clip","setColor3","wspeed","onGeneratedObservable","_time","waveNoiseTexture","cameraOrth","setTarget","cameraZoom","mode","ORTHOGRAPHIC_CAMERA","orthoTop","orthoBottom","orthoLeft","orthoRight","minZ","maxZ","depthMap","enableDepthRenderer","getDepthMap","_refreshRate","groundMat","shadowlight","groundshadowGenerator","light","camera","csmShadowGenerator","forceBackFacesOnly","filteringQuality","QUALITY_MEDIUM","lambda","shadowMaxZ","cascadeBlendPercentage","depthClamp","splitFrustum","cascadingShadowGenerator","updateOnce","addMesh","getShadowMap","renderList","CannonUtils","cannonVector","babylonVector","cannonQuat","babylonQuat","Vehicle","carData","vehicle","wheelMeshes","powerWheels","steeringwheels","breakWheels","carDataBody","carDataWheelBodies","wheelBodies","createVehicle","directionLocal","frictionSlip","dampingRelaxation","dampingCompression","maxSuspensionForce","axleLocal","chassisConnectionPointLocal","maxSuspensionTravel","customSlidingRotationalSpeed","useCustomSlidingRotationalSpeed","indexUpAxis","indexRightAxis","indexForwardAxis","wheel","index","copy","babylon2cannonVec3","addWheel","addToWorld","wheelInfos","length","updateWheelTransform","t","worldTransform","cannon2babylonVec3","cannon2babylonQuat","force","applyEngineForce","setSteeringValue","setBrake","BattleShip","visualMesh","initPosition","vehicleMesh","GridMaterial","BoxImpostor","physicsBody","angularVelocity","entityManager","YUKA","maxSpeed","path","loop","current","active","followPathBehavior","steering","onPathBehavior","_waypoints","CreateLines","points","updatable","Teal","altOffset","delta","vy","meshVelocity","setLinearVelocity","yukaRotation","rotC","rotated","conjugate","mult","toEuler","DIR","vehicleParts","bluePrint","suspension","avionics","hud","clock","setAbsolutePosition","left","right","brake","unbrake","ToDegrees","engine","preserveDrawingBuffer","stencil","loadingUIText","loadingUIBackgroundColor","sceneLoaded","gravityVector","physicsPlugin","undefined","enablePhysics","physicsEnabled","buildGravity","followCamera","heightOffset","cameraAcceleration","maxCameraSpeed","inertia","attachControl","activeCamera","followCameraCreate","lights","setEnabled","ambientlight","diffuse","groundColor","buildLight","worldSize","nimitzCarrier","sky","SkySim","groundShadow","ShadowManager","inputMap","key","type","keyState","assetsManager","meshWorldTask","addMeshTask","process","meshAirplaneTask","meshCarrierTask","onSuccess","task","loadedMeshes","ground","setParent","freezeWorldMatrix","doNotSyncBoundingInfo","aircraft","keyAction","onKeyFunc","keyActionTrig","onKeyDownFunc","onKeyUpFunc","onKeyHoldFunc","Suspension","Airplane","HudPanel","nimitzMesh","Battleship","onFinish","actionManager","registerAction","OnKeyDownTrigger","evt","sourceEvent","OnKeyUpTrigger","registerActions","OceanSim","load","onWindowResize","resize","onMouseMove","animate","runRenderLoop","ready","steer","debugLayer","show","pause","render","Viewer","container","appendChild","createCanvas","offsetWidth","offsetHeight","sceneManager","SceneManager","resizeCanvas","onresize","threeEntryPoint","threeRootElement","className","ref","element","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.42d895c8.chunk.js","sourcesContent":["//import * as BABYLON from \"@babylonjs/core\";\nimport * as BABYLON from 'babylonjs';\nimport * as CANNON from 'cannon';\n\n// Use physics viewer to display impostors\nlet getChildRotation = function(child){ //return the rotation of a child of a parent object by using a temporary World Matrix\n    var scale = new BABYLON.Vector3(0, 0, 0);\n    var rotation = new BABYLON.Quaternion();\n    var translation = new BABYLON.Vector3(0,0,0);\n\n    var tempWorldMatrix = child.getWorldMatrix();\n    tempWorldMatrix.decompose(scale, rotation, translation);\n    return rotation;\n}\n\nvar vmult = function(v,q){\n    var target =  new BABYLON.Vector3();\n \n    var x = v.x,\n        y = v.y,\n        z = v.z;\n \n    var qx = q.x,\n        qy = q.y,\n        qz = q.z,\n        qw = q.w;\n \n    // q*v\n    var ix =  qw * x + qy * z - qz * y,\n    iy =  qw * y + qz * x - qx * z,\n    iz =  qw * z + qx * y - qy * x,\n    iw = -qx * x - qy * y - qz * z;\n \n    target.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    target.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    target.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n \n    return target;\n};\nvar vectorToWorldFrame = function(localVector, quaternion){\n    var result = new BABYLON.Vector3();\n    result = vmult(localVector, quaternion);\n    return result;\n};\nvar pointToWorldFrame = function(localPoint,quaternion, position){\n    var result = new BABYLON.Vector3();\n    result = vmult(localPoint,quaternion);\n    result = result.add(position); //temp fix for v5 update\n    return result;\n};\n\n/*var applyLocalForce = function(localForce, localPoint, mesh){\n    var worldForce = new BABYLON.Vector3();\n    var worldPoint = new BABYLON.Vector3();\n \n    // Transform the force vector to world space\n    worldForce = vectorToWorldFrame(localForce, mesh.rotationQuaternion);\n    worldPoint = pointToWorldFrame(localPoint, mesh.rotationQuaternion, mesh.getAbsolutePosition());\n    mesh.physicsImpostor.applyForce(worldForce, worldPoint);\n};*/\nvar applyLocalForce = function(localForce, localPoint, body){\n\n    body.applyLocalForce(new CANNON.Vec3(localForce.x, localForce.y, localForce.z),\n                         new CANNON.Vec3(localPoint.x, localPoint.y, localPoint.z));\n\n};\n/*var applyLocalForce = function(localForce, localPoint, body){\n    var worldForce = new BABYLON.Vector3();\n    var worldPoint = new BABYLON.Vector3();\n \n    // Transform the force vector to world space\n    worldForce = vectorToWorldFrame(localForce, new BABYLON.Quaternion(body.quaternion.x, body.quaternion.y, body.quaternion.z,body.quaternion.w ));\n    worldPoint = pointToWorldFrame(localPoint, new BABYLON.Quaternion(body.quaternion.x, body.quaternion.y, body.quaternion.z,body.quaternion.w ),\n         new CANNON.Vec3(body.position.x,body.position.y,body.position.z));\n    body.applyForce(\n        new CANNON.Vec3( worldForce.x,worldForce.y,worldForce.z), \n        new CANNON.Vec3( worldPoint.x, worldPoint.y, worldPoint.z));\n};*/\nclass Airplane {\n    /**    \n     * Projects a point to a plane along a ray starting from the camera origin and directed towards the point. \n     * @param {BABYLON.Scene} scene      \n     * @param {BABYLON.Mesh} chassis\n     *  @param {{ rotor: BABYLON.Mesh,rudder: BABYLON.Mesh,leftAileron: BABYLON.Mesh,rightAileron: BABYLON.Mesh,leftElevator: BABYLON.Mesh,rightElevator: BABYLON.Mesh} }controls\n     *  \n     */\n    constructor(scene, chassis, controls){\n        this.scene = scene;\n        if(!chassis) console.error(\"chassis mesh error\");\n        if(!controls) console.error(\"controls data error\");\n        //this.animationGroup = null;\n        this._lift = 50;\n        this._roll = 0;\n        this._rollLimit = 2;\n        this._yaw = 0;\n        this._yawLimit = 2;\n        this._pitch = 0;\n        this._pitchLimit = 2;\n        this._velocity = 0;     // 3 axis\n        this._currentSpeed = 0; // 1 axis\n        this._enginePower = 0;\n        this._enginePowerLimit = 1;//1\n        this.enginePowerPrev = 0\n        this.speedModifier = 0.03;\n        this.collision = chassis;\n        this.rudder = controls.rudder;\n        this.rotor = controls.rotor;\n        this.leftAileron = controls.leftAileron;\n        this.rightAileron = controls.rightAileron;\n        this.leftElevator = controls.leftElevator;\n        this.rightElevator = controls.rightElevator;\n        this._relativeBody = null;\n        this._isTouchingGround = false;\n        this.addAnimations();\n        this.animationGroup.play(false);\n        this.animationGroup.speedRatio = 1;\n        this.controlsInitialize();\n        this.registerForces();\n    }\n\n    set lift(val){\n        this._lift = val;\n    }\n    get lift(){\n        return this._lift;\n    }\n    set roll(val){\n        if (val > this._rollLimit) val = this._rollLimit;\n        if (val < -this._rollLimit ) val = -this._rollLimit;\n        this._roll = val;\n    }\n    get roll(){\n        return this._roll;\n    }\n    set yaw(val){\n        if (val > this._yawLimit) val = this._yawLimit;\n        if (val < -this._yawLimit ) val = -this._yawLimit;\n        this._yaw = val;\n    }\n    get yaw(){\n        return this._yaw;\n    }\n    set pitch(val){\n        if (val > this._pitchLimit) val = this._pitchLimit;\n        if (val < -this._pitchLimit ) val = -this._pitchLimit;\n        this._pitch = val;\n    }\n    get pitch(){\n        return this._pitch;\n    }\n    set enginePower(val){\n        if (val > this._enginePowerLimit) val = this._enginePowerLimit;\n        if (val < 0 ) val = 0;\n        this._enginePower = val;\n    }\n    get enginePower(){\n        return this._enginePower;\n    }\n    get velocity(){ \n        var velocity = vmult(\n            this.collision.physicsImpostor.getLinearVelocity(),\n            BABYLON.Quaternion.Inverse(this.collision.rotationQuaternion));\n        return velocity;\n    }\n    get currentSpeed(){\n\t\t//const velocity = body.quaternion.inverse().vmult(body.velocity);\n\t\t//const currentSpeed = velocity.z;\n        return 0;\n    }\n    get rotation(){\n        return this.collision.rotationQuaternion.toEulerAngles();\n    }\n    set relativeBody(mesh){\n        this._relativeBody = mesh;\n    }\n    get relativeBody(){\n        return this._relativeBody;\n    }\n    set isTouchingGround(touching){\n        this._isTouchingGround= touching;\n    }\n    get isTouchingGround(){\n        return this._isTouchingGround;\n    }\n\n    rotorSpin(rotor){\n        rotor.rotation = new BABYLON.Vector3(0,  0, Math.PI/2,);\n        //rotor.rotation = new BABYLON.Vector3(0, Math.PI/2, 0);\n        const animWheel = new BABYLON.Animation(\"wheelAnimation\", \"rotation.z\", 15, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE);\n        this.animationGroup = new BABYLON.AnimationGroup(\"airplane\");\n        const wheelKeys = []; \n        var enginePower = 1;\n        //At the animation key 0, the value of rotation.y is 0\n        wheelKeys.push({\n            frame: 0,\n            value: 0\n        });\n        //At the animation key 30, (after 1 sec since animation fps = 30) the value of rotation.y is 2PI for a complete rotation\n        wheelKeys.push({\n            frame: 15,\n            value: enginePower*(-2 * Math.PI)\n        });\n        //set the keys\n        animWheel.setKeys(wheelKeys);    \n        //Link this animation to a wheel\n        rotor.animations = [];\n        rotor.animations.push(animWheel);\n        this.animationGroup.addTargetedAnimation(animWheel,rotor );\n      }\n    addAnimations(){\n        this.rotorSpin(this.rotor);\n    }\n    controlsInitialize(){\n        this.rudderZeroRotation = new BABYLON.Quaternion();\n        this.leftAileronZeroRotation = new BABYLON.Quaternion();\n        this.rightAileronZeroRotation = new BABYLON.Quaternion();\n        this.leftElevatorZeroRotation = new BABYLON.Quaternion();\n        this.rightElevatorZeroRotation = new BABYLON.Quaternion();\n\n        this.rudderZeroRotation.copyFrom(this.rudder.rotationQuaternion);\n        this.leftAileronZeroRotation.copyFrom(this.leftAileron.rotationQuaternion);\n        this.rightAileronZeroRotation.copyFrom(this.rightAileron.rotationQuaternion);\n        this.leftElevatorZeroRotation.copyFrom(this.leftElevator.rotationQuaternion);\n        this.rightElevatorZeroRotation.copyFrom(this.rightElevator.rotationQuaternion);\n        \n    }\n    meshRootPosition(x,y,z){       \n        this.collision.setAbsolutePosition(x,y,z); \n    }\n    rudderControl(rot){\n        this.rudder.rotationQuaternion.copyFrom(this.rudderZeroRotation);\n        this.rudder.rotate(BABYLON.Vector3.Up(), rot);\n    }\n\n    aileronControl(rot){\n        this.leftAileron.rotationQuaternion.copyFrom(this.leftAileronZeroRotation);\n        this.leftAileron.rotate(BABYLON.Vector3.Left(), rot);\n        this.rightAileron.rotationQuaternion.copyFrom(this.rightAileronZeroRotation);\n        this.rightAileron.rotate(BABYLON.Vector3.Left(), -rot);\n    }\n    elevatorControl(rot){\n        this.leftElevator.rotationQuaternion.copyFrom(this.leftElevatorZeroRotation);\n        this.leftElevator.rotate(BABYLON.Vector3.Left(), rot);\n        this.rightElevator.rotationQuaternion.copyFrom(this.rightElevatorZeroRotation);\n        this.rightElevator.rotate(BABYLON.Vector3.Left(), rot);\n    }\n    applyLiftForce(){\n        let lift = this.velocity.z * Math.abs(this.velocity.z) * 1.5;\n        applyLocalForce(new BABYLON.Vector3(0,lift, 0), new BABYLON.Vector3(0, 0, 0), this.collision);\n    }\n    applyDragForce(){\n        var velocity = this.velocity;\n        applyLocalForce(new BABYLON.Vector3(\n            velocity.x * Math.abs(velocity.x) * -20,    //20\n            velocity.y * Math.abs(velocity.y) * -100,   //-100\n            velocity.z * Math.abs(velocity.z) * -1      //-1\n            ), new BABYLON.Vector3(0, 0, -0.02), this.collision); //-0.02\n    }\n    applyThrustForce(){\n        applyLocalForce(new BABYLON.Vector3( 0, 0, 3000 * this.speedModifier * this.enginePower), new BABYLON.Vector3(0, 0, 1), this.collision);\n    }\n    applyRollForce(dir){\n        if (dir) {\n            applyLocalForce(new BABYLON.Vector3(0, dir*5 * -this.velocity.z, 0), new BABYLON.Vector3(1, 0, 0), this.collision);\n            applyLocalForce(new BABYLON.Vector3(0, dir*5 * this.velocity.z, 0), new BABYLON.Vector3(-1, 0, 0), this.collision);\n        }\n    }\n    applyYawForce(dir){\n        if (dir) applyLocalForce(new BABYLON.Vector3( dir*5 * this.velocity.z, 0 , 0), new BABYLON.Vector3(0, 0, -1), this.collision);\n    }\n    applyPitchForce(dir){\n        if (dir) applyLocalForce(new BABYLON.Vector3( 0, 5*dir*this.velocity.z , 0), new BABYLON.Vector3(0, 0, -1), this.collision);       \n    }\n    applyPitchYawForce(pitchForce, YawForce){\n        if (pitchForce || YawForce) applyLocalForce(new BABYLON.Vector3( YawForce*5 * this.velocity.z, 5*pitchForce*this.velocity.z , 0), new BABYLON.Vector3(0, 0, -1), this.collision); \n    }\n    propellerSpeedUpdate(){\n        if (this.enginePowerPrev !== this.enginePower){\n            if(this.enginePower) this.animationGroup.play(true); else this.animationGroup.play(false);\n            this.animationGroup.speedRatio = this.enginePower*4;\n        }\n        this.enginePowerPrev = this.enginePower;\n    }\n    resetControls(){\n        this.aileronControl(this.roll*Math.PI/8);\n        this.rudderControl(-this.yaw*Math.PI/8);\n        this.elevatorControl(-this.pitch*Math.PI/8);\n        this.pitch = 0;\n        this.yaw = 0;\n        this.roll = 0;\n    }\n    applyRelativeBodyForce(){\n        var frameTime = Date.now();\n        var prevFrameTime = frameTime;\n        var delta = frameTime - prevFrameTime;\n        var force = new BABYLON.Vector3(0,0,0);\n        if(this.relativeBody && this.isTouchingGround){\n            //console.log(\"relative force\");\n            /*frameTime = Date.now();\n            delta = frameTime - prevFrameTime;\n    \n            var relativeVelocity = this.relativeBody.getPhysicsImpostor().getLinearVelocity();\n            //var ms = this.relativeBody.getPhysicsImpostor().mass;\n            const coeff = 1*this.relativeBody.getPhysicsImpostor().mass/delta;\n            force = force.copyFrom(relativeVelocity);\n            force = force.multiplyByFloats(coeff,coeff,coeff);\n\n            var worldPoint = new BABYLON.Vector3();\n            worldPoint = pointToWorldFrame(new BABYLON.Vector3(0,0,0), this.collision.rotationQuaternion, this.collision.getAbsolutePosition());\n            this.collision.physicsImpostor.applyForce(force, worldPoint);*/\n        }\n    }\n    registerForces(){\n        var that = this;\n        //this.scene.registerBeforeRender(function () {\n        this.scene.onBeforeRenderObservable.add(() => {\n            that.applyRollForce(that.roll);\n            //that.applyYawForce(that.yaw);\n            //that.applyPitchForce(that.pitch);\n            that.applyPitchYawForce(that.pitch, that.yaw);\n            that.applyDragForce();\n            that.applyLiftForce(); \n            that.applyThrustForce();\n            that.propellerSpeedUpdate();\n            //that.applyRelativeBodyForce();\n            that.resetControls();\n        });\n    }\n\n    \n}\n/////////// CANON ///////////\nexport default class AirplaneCannon {\n    /**    \n     * Projects a point to a plane along a ray starting from the camera origin and directed towards the point. \n     * @param {BABYLON.Scene} scene      \n     * @param {BABYLON.Mesh} chassis\n     *  @param {{ rotor: BABYLON.Mesh,rudder: BABYLON.Mesh,leftAileron: BABYLON.Mesh,rightAileron: BABYLON.Mesh,leftElevator: BABYLON.Mesh,rightElevator: BABYLON.Mesh} }controls\n     *  \n     */\n    constructor(scene, chassis, controls){\n        this.scene = scene;\n        if(!chassis) console.error(\"chassis mesh error\");\n        if(!controls) console.error(\"controls data error\");\n        //this.animationGroup = null;\n        this._lift = 50;\n        this._roll = 0;\n        this._rollLimit = 2;\n        this._yaw = 0;\n        this._yawLimit = 2;\n        this._pitch = 0;\n        this._pitchLimit = 2;\n        this._velocity = 0;     // 3 axis\n        this._currentSpeed = 0; // 1 axis\n        this._enginePower = 0;\n        this._enginePowerLimit = 1;//1\n        this.enginePowerPrev = 0\n        this.speedModifier = 0.03;\n        this.collision = chassis;\n        this.rudder = controls.rudder;\n        this.rotor = controls.rotor;\n        this.leftAileron = controls.leftAileron;\n        this.rightAileron = controls.rightAileron;\n        this.leftElevator = controls.leftElevator;\n        this.rightElevator = controls.rightElevator;\n        this._relativeBody = null;\n        this._isTouchingGround = false;\n        this.addAnimations();\n        this.animationGroup.play(false);\n        this.animationGroup.speedRatio = 1;\n        this.controlsInitialize();\n        this.registerForces();\n        console.log(\"cb=\", this.collision);\n    }\n\n    set lift(val){\n        this._lift = val;\n    }\n    get lift(){\n        return this._lift;\n    }\n    set roll(val){\n        if (val > this._rollLimit) val = this._rollLimit;\n        if (val < -this._rollLimit ) val = -this._rollLimit;\n        this._roll = val;\n    }\n    get roll(){\n        return this._roll;\n    }\n    set yaw(val){\n        if (val > this._yawLimit) val = this._yawLimit;\n        if (val < -this._yawLimit ) val = -this._yawLimit;\n        this._yaw = val;\n    }\n    get yaw(){\n        return this._yaw;\n    }\n    set pitch(val){\n        if (val > this._pitchLimit) val = this._pitchLimit;\n        if (val < -this._pitchLimit ) val = -this._pitchLimit;\n        this._pitch = val;\n    }\n    get pitch(){\n        return this._pitch;\n    }\n    set enginePower(val){\n        if (val > this._enginePowerLimit) val = this._enginePowerLimit;\n        if (val < 0 ) val = 0;\n        this._enginePower = val;\n    }\n    get enginePower(){\n        return this._enginePower;\n    }\n    get velocity(){ \n        var velocity = vmult(\n            //this.collision.physicsImpostor.getLinearVelocity(),\n            new BABYLON.Vector3(this.collision.velocity.x,\n                                this.collision.velocity.y,\n                                this.collision.velocity.z),\n            BABYLON.Quaternion.Inverse(new BABYLON.Quaternion(  this.collision.quaternion.x,\n                this.collision.quaternion.y,\n                this.collision.quaternion.z,\n                this.collision.quaternion.w,\n                )));\n        return velocity;\n    }\n    get currentSpeed(){\n\t\t//const velocity = body.quaternion.inverse().vmult(body.velocity);\n\t\t//const currentSpeed = velocity.z;\n        return 0;\n    }\n    get rotation(){\n        return new BABYLON.Quaternion(  this.collision.quaternion.x,\n                                        this.collision.quaternion.y,\n                                        this.collision.quaternion.z,\n                                        this.collision.quaternion.w,\n                                        ).toEulerAngles();\n    }\n    set relativeBody(mesh){\n        this._relativeBody = mesh;\n    }\n    get relativeBody(){\n        return this._relativeBody;\n    }\n    set isTouchingGround(touching){\n        this._isTouchingGround= touching;\n    }\n    get isTouchingGround(){\n        return this._isTouchingGround;\n    }\n\n    rotorSpin(rotor){\n        rotor.rotation = new BABYLON.Vector3(0,  0, Math.PI/2,);\n        //rotor.rotation = new BABYLON.Vector3(0, Math.PI/2, 0);\n        const animWheel = new BABYLON.Animation(\"wheelAnimation\", \"rotation.z\", 15, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE);\n        this.animationGroup = new BABYLON.AnimationGroup(\"airplane\");\n        const wheelKeys = []; \n        var enginePower = 1;\n        //At the animation key 0, the value of rotation.y is 0\n        wheelKeys.push({\n            frame: 0,\n            value: 0\n        });\n        //At the animation key 30, (after 1 sec since animation fps = 30) the value of rotation.y is 2PI for a complete rotation\n        wheelKeys.push({\n            frame: 15,\n            value: enginePower*(-2 * Math.PI)\n        });\n        //set the keys\n        animWheel.setKeys(wheelKeys);    \n        //Link this animation to a wheel\n        rotor.animations = [];\n        rotor.animations.push(animWheel);\n        this.animationGroup.addTargetedAnimation(animWheel,rotor );\n      }\n    addAnimations(){\n        this.rotorSpin(this.rotor);\n    }\n    controlsInitialize(){\n        this.rudderZeroRotation = new BABYLON.Quaternion();\n        this.leftAileronZeroRotation = new BABYLON.Quaternion();\n        this.rightAileronZeroRotation = new BABYLON.Quaternion();\n        this.leftElevatorZeroRotation = new BABYLON.Quaternion();\n        this.rightElevatorZeroRotation = new BABYLON.Quaternion();\n\n        this.rudderZeroRotation.copyFrom(this.rudder.rotationQuaternion);\n        this.leftAileronZeroRotation.copyFrom(this.leftAileron.rotationQuaternion);\n        this.rightAileronZeroRotation.copyFrom(this.rightAileron.rotationQuaternion);\n        this.leftElevatorZeroRotation.copyFrom(this.leftElevator.rotationQuaternion);\n        this.rightElevatorZeroRotation.copyFrom(this.rightElevator.rotationQuaternion);\n        \n    }\n    meshRootPosition(x,y,z){       \n        this.collision.position.set(x,y,z); \n    }\n    rudderControl(rot){\n        this.rudder.rotationQuaternion.copyFrom(this.rudderZeroRotation);\n        this.rudder.rotate(BABYLON.Vector3.Up(), rot);\n    }\n\n    aileronControl(rot){\n        this.leftAileron.rotationQuaternion.copyFrom(this.leftAileronZeroRotation);\n        this.leftAileron.rotate(BABYLON.Vector3.Left(), rot);\n        this.rightAileron.rotationQuaternion.copyFrom(this.rightAileronZeroRotation);\n        this.rightAileron.rotate(BABYLON.Vector3.Left(), -rot);\n    }\n    elevatorControl(rot){\n        this.leftElevator.rotationQuaternion.copyFrom(this.leftElevatorZeroRotation);\n        this.leftElevator.rotate(BABYLON.Vector3.Left(), rot);\n        this.rightElevator.rotationQuaternion.copyFrom(this.rightElevatorZeroRotation);\n        this.rightElevator.rotate(BABYLON.Vector3.Left(), rot);\n    }\n    applyLiftForce(){\n        let lift = this.velocity.z * Math.abs(this.velocity.z) * 1.5;\n        applyLocalForce(new BABYLON.Vector3(0,lift, 0), new BABYLON.Vector3(0, 0, 0), this.collision);\n    }\n    applyDragForce(){\n        var velocity = this.velocity;\n        applyLocalForce(new BABYLON.Vector3(\n            velocity.x * Math.abs(velocity.x) * -20,    //20\n            velocity.y * Math.abs(velocity.y) * -100,   //-100\n            velocity.z * Math.abs(velocity.z) * -1      //-1\n            ), new BABYLON.Vector3(0, 0, -0.02), this.collision); //-0.02\n    }\n    applyThrustForce(){\n        applyLocalForce(new BABYLON.Vector3( 0, 0, 3000 * this.speedModifier * this.enginePower), new BABYLON.Vector3(0, 0, 1), this.collision);\n    }\n    applyRollForce(dir){\n        if (dir) {\n            applyLocalForce(new BABYLON.Vector3(0, dir*5 * -this.velocity.z, 0), new BABYLON.Vector3(1, 0, 0), this.collision);\n            applyLocalForce(new BABYLON.Vector3(0, dir*5 * this.velocity.z, 0), new BABYLON.Vector3(-1, 0, 0), this.collision);\n        }\n    }\n    applyYawForce(dir){\n        if (dir) applyLocalForce(new BABYLON.Vector3( dir*5 * this.velocity.z, 0 , 0), new BABYLON.Vector3(0, 0, -1), this.collision);\n    }\n    applyPitchForce(dir){\n        if (dir) applyLocalForce(new BABYLON.Vector3( 0, 5*dir*this.velocity.z , 0), new BABYLON.Vector3(0, 0, -1), this.collision);       \n    }\n    applyPitchYawForce(pitchForce, YawForce){\n        if (pitchForce || YawForce) applyLocalForce(new BABYLON.Vector3( YawForce*5 * this.velocity.z, 5*pitchForce*this.velocity.z , 0), new BABYLON.Vector3(0, 0, -1), this.collision); \n    }\n    propellerSpeedUpdate(){\n        if (this.enginePowerPrev !== this.enginePower){\n            if(this.enginePower) this.animationGroup.play(true); else this.animationGroup.play(false);\n            this.animationGroup.speedRatio = this.enginePower*4;\n        }\n        this.enginePowerPrev = this.enginePower;\n    }\n    resetControls(){\n        this.aileronControl(this.roll*Math.PI/8);\n        this.rudderControl(-this.yaw*Math.PI/8);\n        this.elevatorControl(-this.pitch*Math.PI/8);\n        this.pitch = 0;\n        this.yaw = 0;\n        this.roll = 0;\n    }\n    registerForces(){\n        var that = this;\n        //this.scene.registerBeforeRender(function () {\n        this.scene.onBeforeRenderObservable.add(() => {\n            that.applyRollForce(that.roll);\n            that.applyPitchYawForce(that.pitch, that.yaw);\n            that.applyDragForce();\n            that.applyLiftForce(); \n            that.applyThrustForce();\n            that.propellerSpeedUpdate();\n            that.resetControls();\n        });\n    }\n\n    \n}\n","import * as BABYLON from 'babylonjs';\n//import * as Ammo from 'ammojs';\nimport * as CANNON from 'cannon';\nimport { Vector3 } from 'yuka';\n//import * as CANNON from 'cannon';\nclass VehicleData {\n    constructor(scene){\n        this._scene = scene;\n        this._chassisMesh = null;\n        this._wheelsMesh = [];\n        this._powerWheelsIndex = [];\n        this._steeringWheelsIndex = [];\n        this._brakeWheelsIndex = [];    \n    }\n    get scene(){\n        return this._scene;\n    }\n    set scene(s){\n        this._scene = s;\n    }\n    get chassisMesh(){\n        return this._chassisMesh;\n    }\n    set chassisMesh(mesh){\n        this._chassisMesh = mesh;\n    }\n    get wheelsMesh(){\n        return this._wheelsMesh;\n    }\n    set wheelsMesh(mesh){\n        this._wheelsMesh = mesh;\n    }\n    get powerWheelsIndex(){\n        return this._powerWheelsIndex;\n    }\n    set powerWheelsIndex(indices){\n        this._powerWheelsIndex = indices;\n    }\n    get steeringWheelsIndex(){\n        return this._steeringWheelsIndex;\n    }\n    set steeringWheelsIndex(indices){\n        this._steeringWheelsIndex = indices;\n    }\n    get brakeWheelsIndex(){\n        return this._brakeWheelsIndex;\n    }\n    set brakeWheelsIndex(indices){\n        this._brakeWheelsIndex = indices;\n    }\n}\n\nfunction makebox(scene, size, position, rotation, color = new BABYLON.Color3(0.5, 0.6, 0.87), name= \"box\"){\n    var box =  BABYLON.MeshBuilder.CreateBox(name, {width:size.x,depth:size.y,height:size.z}, scene);\n    box.rotationQuaternion = rotation;\n    box.position = position;\n    var myMaterial = new BABYLON.StandardMaterial(\"vehicleMassBox\", scene);\n    myMaterial.diffuseColor = new BABYLON.Color3(1, 0, 1);\n    myMaterial.specularColor = color;\n    myMaterial.emissiveColor = color;\n    box.material = myMaterial;\n    return box;\n} \n\nfunction createWheelMesh(scene, diameter, width, position){\n    //Wheel Material \n    var wheelMaterial = new BABYLON.StandardMaterial(\"wheelMaterial\", scene);\n    var wheelTexture = new BABYLON.Texture(\"http://i.imgur.com/ZUWbT6L.png\", scene);\n    wheelMaterial.diffuseTexture = wheelTexture;\n\n    //Set color for wheel tread as black\n    var faceColors = [];\n    faceColors[1] = new BABYLON.Color3(0, 0, 0);\n\n    //set texture for flat face of wheel \n    var faceUV = [];\n    faceUV[0] = new BABYLON.Vector4(0, 0, 1, 1);\n    faceUV[2] = new BABYLON.Vector4(0, 0, 1, 1);\n\n    //create wheel front inside and apply material\n    var wheelMesh = BABYLON.MeshBuilder.CreateCylinder(\"wheelMesh\", {\n        diameter: diameter,\n        height: width,\n        tessellation: 24,\n        faceColors: faceColors,\n        faceUV: faceUV\n    }, scene);\n    wheelMesh.material = wheelMaterial;\n\n    wheelMesh.rotateAround(\n        new BABYLON.Vector3(0,0,0),\n        new BABYLON.Vector3(0,0,1),\n        -Math.PI/2\n        );\n    wheelMesh.bakeCurrentTransformIntoVertices();\n    wheelMesh.position.addInPlace(position);\n    return wheelMesh;\n}\n\n\nexport class AirplaneWW2 extends VehicleData{\n    /**    \n     * Airplane mesh data and physics body\n     * @param {BABYLON.Scene} scene      \n     * @param {[BABYLON.Mesh]} meshAll\n     * @param {[BABYLON.Vector3]} position\n     * @param {[BABYLON.Vector3]} eulerRotation\n     */\n     constructor(scene, meshAll, position, eulerRotation){\n        super(scene);\n        if(!meshAll) console.error(\"airplane modlel mesh error\");\n        var scale = 1;\n        meshAll[0].translate(new BABYLON.Vector3.Up(),0.15,BABYLON.Space.WORLD);\n        meshAll[0].scaling= meshAll[0].scaling.multiplyByFloats(scale,scale,scale);// = new Vector3(1,1,1);\n        const massOffset = new BABYLON.Vector3(0, 0.2, 0.65).multiplyByFloats(scale,scale,scale);\n        const mass = 50;\n        const isColiderVisible = false;\n        var settings = {\n            suspensionStiffness: 47,//27\n            suspensionDamping: 0.3,//03\n            suspensionCompression: 4.4,//4.4\n            suspensionRestLength: 0.3,//0.3\n            rollInfluence: 0.01, //0.01\n        }\n        var rearWheelSettings = { ...settings };\n        rearWheelSettings.suspensionRestLength = 0.27;\n        this.wheelsMesh = [\n            meshAll[18], meshAll[19], meshAll[20]\n        ];  \n        this.wheelsMesh.forEach(m=>meshAll[0].removeChild(m));\n        meshAll[0].translate(new BABYLON.Vector3.Up(),0.75,BABYLON.Space.WORLD);\n\n        const radius = 0.225/2;//0.225/2;\n        // (widht, heigth, length) of a car\n        this.wheels =\n            [\n                {pos: this.wheelsMesh[0].position, radius: radius, isFront: true, params: settings},\n                {pos: this.wheelsMesh[1].position, radius: radius, isFront: true, params: settings},\n                {pos: this.wheelsMesh[2].position, radius: radius/2, isFront: false, params: rearWheelSettings},\n            ];\n        this.wheels.forEach(x=>x.pos.addInPlace(massOffset));\n\n        const bodySize = new BABYLON.Vector3(2, 2, 0.6).multiplyByFloats(scale,scale,scale);//0.3\n\n        //chassis offset only visual because of the root mass offset\n        //chassis is the volume that represents weight, its used for vehicle physisc but not collisions\n        var chassis = makebox(scene, bodySize, new BABYLON.Vector3(0, 1, 0).subtractInPlace(massOffset), new BABYLON.Vector3(0,0,0).toQuaternion(),new BABYLON.Color3(.1, .1, .1), \"chassis\");\n        chassis.isVisible = false;       \n        // body visuals\n        meshAll[0].removeChild(meshAll[11]);\n        this.visualMeshes = [meshAll[11]];//[rootVisualMesh];\n        //add all meshes to chassis\n        this.visualMeshes.forEach(vm=>{chassis.addChild(vm)});\n        this.visualMeshes[0].receiveShadows = true;\n        //optimization\n        this.visualMeshes[0].material.freeze();\n\n        this.controls = {   rotor: meshAll[17],\n                            rudder: meshAll[16],\n                            leftAileron: meshAll[12],\n                            rightAileron: meshAll[13],\n                            leftElevator: meshAll[15],\n                            rightElevator: meshAll[14]\n                        };   \n        Object.values( this.controls).forEach(m=>{\n            meshAll[0].removeChild(m);\n            chassis.addChild(m);\n        } );  \n        \n        /*this.collidersCreate(meshAll[0],chassis,\n                            [meshAll[1],meshAll[2], meshAll[3], meshAll[4], meshAll[5]],\n                            BABYLON.PhysicsImpostor.BoxImpostor,\n                            isColiderVisible);*/\n        /*this.collidersCreate(meshAll[0],chassis,\n                            [meshAll[6], meshAll[7], meshAll[8], meshAll[9], meshAll[10]],\n                            BABYLON.PhysicsImpostor.CapsuleImpostor,\n                            isColiderVisible);*/\n       // createPhysicsImpostor(this.scene, chassis, BABYLON.PhysicsImpostor.NoImpostor, { mass: mass, friction: 1,restitution:0.1}, true);\n        //console.log(\"body\", chassis.physicsImpostor.physicsBody);\n        //chassis.physicsImpostor.physicsBody.angularDamping = 0.6;//cannon\n        //chassis.physicsImpostor.physicsBody.setDamping(0.01, 0.6);\n        this.chassisBody = this.createBody(mass, new BABYLON.Vector3(1,0.3,1),new BABYLON.Vector3(0,0.1,-0.2));\n        this.powerWheelsIndex = [0,1];\n        this.steeringWheelsIndex = [2];\n        this.brakeWheelsIndex = [0,1,2];\n        this.chassisMesh = chassis;\n        meshAll[0].dispose();       //not needed anymore since we had do assign a new mesh root for raycast vehicle\n        var world = this.scene.getPhysicsEngine().getPhysicsPlugin().world;\n        this.chassisBody.position = new CANNON.Vec3(position.x, position.y, position.z);\n        var initRotation = eulerRotation.toQuaternion();\n        this.chassisBody.quaternion = new CANNON.Quaternion(initRotation.x,initRotation.y,initRotation.z,initRotation.w);\n        world.addBody(this.chassisBody);\n        \n        //console.log(world);\n        var that = this;\n        this.scene.registerBeforeRender(function () {\n            that.chassisMesh.position.copyFrom( new BABYLON.Vector3( that.chassisBody.position.x,\n                                                                     that.chassisBody.position.y,\n                                                                     that.chassisBody.position.z,\n                                                ));\n            //that.chassisMesh.rotation = new BABYLON.Quaternion(\n            that.chassisMesh.rotationQuaternion = new BABYLON.Quaternion(\n                that.chassisBody.quaternion.x,\n                that.chassisBody.quaternion.y,\n                that.chassisBody.quaternion.z,\n                that.chassisBody.quaternion.w\n            );\n        });\n    }\n    collidersCreate(oldRoot, newRoot, meshes, impostorType, isVisible){\n        var coliderMeshesBox = meshes;\n        coliderMeshesBox.forEach(m=>oldRoot.removeChild(m));\n        coliderMeshesBox.forEach(cm=>{\n            newRoot.addChild(cm);\n            cm.isVisible = isVisible;\n        });\n        coliderMeshesBox.forEach(cm=>{createPhysicsImpostor(this.scene, cm, impostorType, { mass: 0, friction: 1,restitution: 0.1}, true)});    //    restitution:0.1   \n    }\n    createBody(mass = 50, size, offset){\n        var chassisShape;\n        var mat = new CANNON.Material('Mat');\n\t\tmat.friction = 0.8;\n        chassisShape = new CANNON.Box(new CANNON.Vec3(size.x, size.y, size.z));\n        var chassisBody = new CANNON.Body({ mass: mass });\n        chassisBody.material = mat;\n        chassisBody.addShape(chassisShape, new CANNON.Vec3(offset.x, offset.y, offset.z));\n        chassisBody.angularDamping = 0.8;\n        return chassisBody;\n    }\n\n}\n\n\n\n\nfunction createPhysicsImpostor(scene, entity, impostor, options, reparent) {\n    if (entity == null) return;\n    entity.checkCollisions = false;\n    const parent = entity.parent;\n    if (reparent === true) entity.parent = null;\n    entity.physicsImpostor = new BABYLON.PhysicsImpostor(entity, impostor, options, scene);\n    //console.log(entity.physicsImpostor.physicsBody);\n    if (reparent === true) entity.parent = parent;\n};\n\nBABYLON.Mesh.prototype.getAbsoluteSize = function() {\n    if(!this.__size){\n        this.__size = BABYLON.Vector3.Zero();\n    }\n    let scaling = this.scaling;\n    //console.log(scaling);\n    let bounds = this.getBoundingInfo();\n    this.__size.x = Math.abs(bounds.minimum.x - bounds.maximum.x)*scaling.x;\n    this.__size.z = Math.abs(bounds.minimum.y - bounds.maximum.y)*scaling.y;\n    this.__size.y = Math.abs(bounds.minimum.z - bounds.maximum.z)*scaling.z;\n\n    return this.__size;\n};","import * as BABYLON from 'babylonjs';\nimport * as GUI from 'babylonjs-gui';\n\nclass hudControl {\n    constructor( x, y){\n       this._x = x;\n       this._y = y;\n    }\n   set x(x){\n       this._x = x;\n   }\n   get x(){\n       return this._x;\n   }\n   set y(y){\n       this._y = y;\n   }\n   get y(){\n       return this._y;\n   }\n    draw(){\n\n    }\n}\n\nexport class crosshair extends hudControl{\n    constructor( width, height) {\n        super(width / 2,height / 2);\n        this.width = width;\n        this.height = height;\n        this.lines = [new GUI.Line(),new GUI.Line()];\n        this.lines.forEach(line=>{\n            line.lineWidth = 2;\n            line.color = \"green\";\n        });\n\n    }\n\n    draw(){\n        // remove aliasing\n        this.x = Math.floor(this.x) + 0.5;\n        this.y = Math.floor(this.y) + 0.5;\n\n        this.lines[0].x1 = this.x;\n        this.lines[0].y1 = this.y - 10;\n        this.lines[0].x2 = this.x;\n        this.lines[0].y2 = this.y + 10;\n\n        this.lines[1].x1 = this.x - 10;\n        this.lines[1].y1 = this.y;\n        this.lines[1].x2 = this.x + 10;\n        this.lines[1].y2 = this.y;\n\n    }\n  }\n\n  export class hudSimpleText extends hudControl{\n    constructor( x, y, fontSize =12) {\n        super(x,y);\n        this.txt = \"hello...\"\n        this.fontSize = fontSize;\n        this.element = new GUI.TextBlock();\n        this.element.top = x;\n        this.element.left = y;\n        this.element.color = \"green\";\n        this.element.fontSize = fontSize;\n        this.element.height = \"30px\";\n    }\n    set text(txt){\n        this.element.text = txt;\n    }\n    draw(){\n\n    }\n  }\n//////////\nfunction range(start, end, inc) {\n    //console.log(start,end);\n    return Array(end/inc - (start/inc) + 1).fill().map((_, idx) => start+ idx*inc);\n  }\n  function limitCompass(x){\n    if(x<0) x = x+ 360;\n    if(x>359) x = x -360;\n    return x;\n  }\n  function limitPitchLadder(x){\n    if(x<-90) x = -180-x;\n    if(x>90) x = 180-x ;\n    return x;\n  }\n  function rangeClip(rangeArray,limit){\n    return rangeArray.map(x=>limit(x));\n  }\n  /*function rangeClip360(rangeArray){\n    return rangeArray.map(x=>limit(x));\n  }*/\nexport class compass extends hudControl{\n    constructor( width, height, tickSpace =40, rangeC = 4) {   \n        super(width/2- 40*(4/2),height / 7);\n        this.tickSpace = tickSpace;\n        this._range = rangeC;\n        //this.middle =  this.tickSpace*(this._range/2);\n        this.middle = width/2;\n        this.width = width;\n        this.height = height;\n        this.tilt = 0;\n        this.tickHeight = 15;\n        \n        this.scale = 10;\n        //this.scaleVals = range(10/this.scale,50/this.scale,this.scale);\n        //console.log(this.scaleVals);\n        this.x = Math.floor(this.x) + 0.5;\n        this.y = Math.floor(this.y) + 0.5;\n        const fontSize = 12;\n        this.elements = [];//new GUI.Line()\n        this.elements.push(new GUI.TextBlock());\n        this.elements[this.elements.length-1].color = \"green\";\n        this.elements[this.elements.length-1].fontSize = fontSize;\n        this.elements[this.elements.length-1].height = \"10px\";\n        this.elements[this.elements.length-1].width = \"20px\";\n        this.elements[this.elements.length-1].horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\n        this.elements[this.elements.length-1].verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_TOP;\n        this.elements.push(new GUI.Line());\n        this.elements[this.elements.length-1].lineWidth = 2;\n        this.elements[this.elements.length-1].color = \"green\";\n\n        this.scaleVals = range(\n            Math.floor(this.tilt/this.scale)*this.scale-Math.floor(this.scale*this._range/2),\n            Math.floor(this.tilt/this.scale)*this.scale+ Math.floor(this.scale*this._range/2),\n            this.scale);\n        this.scaleVals = rangeClip(this.scaleVals,limitCompass);\n        this.scaleVals.forEach((x,i)=>{\n            this.elements.push(new GUI.TextBlock());\n            this.elements[this.elements.length-1].color = \"green\";\n            this.elements[this.elements.length-1].fontSize = fontSize;\n            this.elements[this.elements.length-1].height = \"10px\";\n            this.elements[this.elements.length-1].width = \"20px\";\n            this.elements[this.elements.length-1].horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\n            this.elements[this.elements.length-1].verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_TOP;\n            this.elements.push(new GUI.Line());\n            this.elements[this.elements.length-1].lineWidth = 2;\n            this.elements[this.elements.length-1].color = \"green\";\n            this.elements.push(new GUI.Line());\n            this.elements[this.elements.length-1].lineWidth = 2;\n            this.elements[this.elements.length-1].color = \"green\";\n        });  \n        //console.log(this.elements.length);\n    }\n    set angle(angle){\n        this.tilt = angle;\n    }\n    set range(range){\n        this._range = range;\n    }\n    set rangeScale(rangeScale){\n        this.scale = rangeScale;\n    }\n    draw(){\n        var tiltFloor = Math.floor(this.tilt);\n        var tiltRemd = Math.floor(this.tilt * 10/this.scale) % 10;\n        var tiltRemdHalf = Math.floor((this.tilt/this.scale+0.5) * 10) % 10;\n        this.scaleVals = range(\n            Math.floor(this.tilt/this.scale)*this.scale-Math.floor(this.scale*this._range/2),\n            Math.floor(this.tilt/this.scale)*this.scale+ Math.floor(this.scale*this._range/2),\n            this.scale);\n        this.scaleVals = rangeClip(this.scaleVals,limitCompass);\n        this.tilt = tiltFloor + tiltRemd/10;\n\n        var elemIdx = 2;\n        var space = this.x-tiltRemd*this.tickSpace/10;\n        var spaceHalf = this.x-tiltRemdHalf*this.tickSpace/10;\n        this.scaleVals.forEach((val,idx)=>{\n            this.elements[elemIdx].left = space-5;\n            this.elements[elemIdx].top = this.y-this.tickHeight-10;\n            this.elements[elemIdx].text = val.toString();\n            elemIdx = elemIdx +1;\n            this.elements[elemIdx].x1 = space;\n            this.elements[elemIdx].y1 = this.y;\n            this.elements[elemIdx].x2 = space;\n            this.elements[elemIdx].y2 = this.y-this.tickHeight;\n            elemIdx = elemIdx +1;\n            this.elements[elemIdx].x1 = spaceHalf;\n            this.elements[elemIdx].y1 = this.y;\n            this.elements[elemIdx].x2 = spaceHalf;\n            this.elements[elemIdx].y2 = this.y-this.tickHeight/2;\n            elemIdx = elemIdx +1;\n            space += this.tickSpace;\n            spaceHalf += this.tickSpace;\n        });\n        this.elements[0].left = this.middle;\n        this.elements[0].top = this.y+15;\n        this.elements[0].text = tiltFloor.toString();\n        this.elements[1].x1 = this.middle;\n        this.elements[1].y1 = this.y+15;\n        this.elements[1].x2 = this.middle;\n        this.elements[1].y2 = this.y+15 -this.tickHeight;\n        //console.log(\"location\",this.middle + 4, this.y+15);\n    }\n}\n\nexport class pitchLader extends hudControl {\n    constructor(width, height){\n        super(0,0);\n        this.width = width;\n        this.height = height;\n        const containerWidth = 200;\n        const containerHeight = 200;\n        this.middle = containerWidth/2;//width/2;\n        this.tilt = 0;\n        this.rot = 0;\n        this.tickHeight = 100;\n        this.tickSpace = 40;\n        this.scale = 10;\n        this._range = 4;\n        this.middleOffset = containerHeight-(containerHeight -this.tickSpace*this._range)/2;//this.tickSpace*this._range;//height -(height - this.tickSpace*this._range )/2;\n        const fontSize = 12;\n        this.elements = [];\n        this.scaleVals = range(\n            Math.floor(this.tilt/this.scale)*this.scale - Math.floor(this.scale*this._range/2),\n            Math.floor(this.tilt/this.scale)*this.scale + Math.floor(this.scale*this._range/2),\n            this.scale);\n        this.scaleVals = rangeClip(this.scaleVals, limitPitchLadder);\n        this.scaleVals.forEach((x,i)=>{\n            this.elements.push(new GUI.TextBlock());\n            this.elements[this.elements.length-1].color = \"green\";\n            this.elements[this.elements.length-1].fontSize = fontSize;\n            this.elements[this.elements.length-1].height = \"10px\";\n            this.elements[this.elements.length-1].width = \"20px\";\n            this.elements[this.elements.length-1].horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\n            this.elements[this.elements.length-1].verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_TOP;\n            this.elements.push(new GUI.Line());\n            this.elements[this.elements.length-1].lineWidth = 2;\n            this.elements[this.elements.length-1].color = \"green\";\n            this.elements.push(new GUI.Line());\n            this.elements[this.elements.length-1].lineWidth = 2;\n            this.elements[this.elements.length-1].color = \"green\";\n            this.elements.push(new GUI.Line());\n            this.elements[this.elements.length-1].lineWidth = 2;\n            this.elements[this.elements.length-1].color = \"green\";\n            this.elements.push(new GUI.Line());\n            this.elements[this.elements.length-1].lineWidth = 2;\n            this.elements[this.elements.length-1].color = \"green\";\n        }); \n        this.root = new GUI.Rectangle();\n        this.root.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_TOP;\n        this.root.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\n        this.root.widthInPixels = containerWidth;\n        this.root.heightInPixels = containerHeight;\n        this.root.left = width/2 - containerWidth/2;\n        this.root.top = (height -(height - containerHeight )/2) -containerHeight;\n        this.root.thickness = 1; \n        //this.root.addControl(line);\n        this.elements.forEach(el=>this.root.addControl(el));\n    }\n    set angle(angle){\n        this.tilt = angle;\n    }\n    set rotation(rotation){\n        this.rot = rotation;\n    }\n    set range(range){\n        this._range = range;\n    }\n    set rangeScale(rangeScale){\n        this.scale = rangeScale;\n    }\n    draw(){\n        var tiltFloor = Math.floor(this.tilt);\n        var tiltRemd = Math.floor(this.tilt * 10/this.scale) % 10;\n        this.scaleVals = range(\n            Math.floor(this.tilt/this.scale)*this.scale - Math.floor(this.scale*this._range/2),\n            Math.floor(this.tilt/this.scale)*this.scale + Math.floor(this.scale*this._range/2),\n            this.scale);\n        this.scaleVals = rangeClip(this.scaleVals, limitPitchLadder);\n        this.tilt = tiltFloor + tiltRemd/10;      \n        var space = 0;\n        if (tiltRemd >=0) \n            space = this.middleOffset +tiltRemd*this.tickSpace/10;\n        else \n            space = this.middleOffset + (10*this.tickSpace/10 +tiltRemd*this.tickSpace/10);\n        var elemIdx = 0;\n        this.scaleVals.forEach((val,idx)=>{\n            var sign = 1;\n            if (val<0) {\n                //this.bm.setLineDash([3, 2]);\n                this.elements[elemIdx+1].dash = [5, 10];\n                this.elements[elemIdx+2].dash = [5, 10];\n                this.elements[elemIdx+3].dash = [5, 10];\n                this.elements[elemIdx+4].dash = [5, 10];\n                sign = -1;\n            }else{\n                this.elements[elemIdx+1].dash = [];\n                this.elements[elemIdx+2].dash = [];\n                this.elements[elemIdx+3].dash = [];\n                this.elements[elemIdx+4].dash = [];\n            }\n            this.elements[elemIdx].left = this.middle - this.tickHeight/2 -25;\n            this.elements[elemIdx].top = space+8*sign;\n            this.elements[elemIdx].text = val.toString();\n            elemIdx = elemIdx +1;\n            this.elements[elemIdx].x1 = this.middle - this.tickHeight/2;\n            this.elements[elemIdx].y1 = space;\n            this.elements[elemIdx].x2 = this.middle - this.tickHeight*0.3;\n            this.elements[elemIdx].y2 = space;\n            elemIdx = elemIdx +1;\n            this.elements[elemIdx].x1 = this.middle + this.tickHeight*0.3;\n            this.elements[elemIdx].y1 = space;\n            this.elements[elemIdx].x2 = this.middle + this.tickHeight/2;\n            this.elements[elemIdx].y2 = space;\n            elemIdx = elemIdx +1;\n            this.elements[elemIdx].x1 = this.middle - this.tickHeight/2;\n            this.elements[elemIdx].y1 = space;\n            this.elements[elemIdx].x2 = this.middle - this.tickHeight/2;\n            this.elements[elemIdx].y2 = space+10*sign;\n            elemIdx = elemIdx +1;\n            this.elements[elemIdx].x1 = this.middle + this.tickHeight/2;\n            this.elements[elemIdx].y1 = space;\n            this.elements[elemIdx].x2 = this.middle + this.tickHeight/2;\n            this.elements[elemIdx].y2 = space+10*sign;\n            elemIdx = elemIdx +1;\n            space -= this.tickSpace;\n        });\n        this.root.rotation = (Math.PI / 180) * this.rot;\n       /* this.bm.save();\n        this.bm.translate(this.width/2, this.height/2);\n        this.bm.rotate((Math.PI / 180) * this.rot); // rotate\n        this.bm.translate(-this.width/2, -this.height/2);\n\n        var tiltFloor = Math.floor(this.tilt);\n        var tiltRemd = Math.floor(this.tilt * 10/this.scale) % 10;\n        this.scaleVals = range(\n            Math.floor(this.tilt/this.scale)*this.scale - Math.floor(this.scale*this._range/2),\n            Math.floor(this.tilt/this.scale)*this.scale + Math.floor(this.scale*this._range/2),\n            this.scale);\n        this.scaleVals = rangeClip(this.scaleVals, limitPitchLadder);\n        this.tilt = tiltFloor + tiltRemd/10;\n        \n        var space = 0;\n        if (tiltRemd >=0) \n            space = this.middleOffset +tiltRemd*this.tickSpace/10;\n        else \n            space = this.middleOffset + (10*this.tickSpace/10 +tiltRemd*this.tickSpace/10);\n\n        super.changeLocalLineWidth();\n\n        this.scaleVals.forEach((val,idx)=>{\n            this.bm.beginPath();\n            this.bm.font = `bold ${12}px Arial`;\n            this.bm.textAlign = 'start';\n            var sign = 1;\n            if (val<0) {\n                this.bm.setLineDash([3, 2]);\n                sign = -1;\n            }\n            if (val != 0){\n                this.bm.moveTo(this.middle - this.tickHeight/2, space);\n                this.bm.lineTo(this.middle - this.tickHeight*0.3, space); \n                this.bm.moveTo(this.middle + this.tickHeight*0.3, space);\n                this.bm.lineTo(this.middle + this.tickHeight/2, space); \n                this.bm.moveTo(this.middle - this.tickHeight/2, space);\n                this.bm.lineTo(this.middle - this.tickHeight/2, space+10*sign); \n                this.bm.moveTo(this.middle + this.tickHeight/2, space);\n                this.bm.lineTo(this.middle + this.tickHeight/2, space+10*sign); \n                this.bm.fillText(val.toString(), this.middle - this.tickHeight/2 -25, space+8*sign);\n            }else{\n                this.bm.moveTo(this.middle - this.tickHeight*0.8, space);\n                this.bm.lineTo(this.middle - this.tickHeight*0.3, space); \n                this.bm.moveTo(this.middle + this.tickHeight*0.3, space);\n                this.bm.lineTo(this.middle + this.tickHeight*0.8, space); \n            }\n            space -= this.tickSpace;\n            this.bm.closePath();\n            this.bm.stroke();\n            this.bm.setLineDash([]);\n        });\n        \n        super.resetGlobalLineWidth(); \n        this.bm.restore();*/\n    }\n}"," class hudControl {\n     constructor(bm, x, y){\n        this.bm = bm;\n        this._x = x;\n        this._y = y;\n        this.lineWidth = this.bm.lineWidth;\n        this.globalLineWidth = this.bm.lineWidth;\n        this._fontSize = 12;\n     }\n     set lineWidth(lineWidth){\n        this.localLineWidth = lineWidth;\n    }\n    get lineWidth(){\n        return this.localLineWidth;\n    }\n    set x(x){\n        this._x = x;\n    }\n    get x(){\n        return this._x;\n    }\n    set y(y){\n        this._y = y;\n    }\n    get y(){\n        return this._y;\n    }\n    set fontSize(size){\n        this._fontSize = size;\n    }\n    get fontSize(){\n        return this._fontSize;\n    }\n    changeLocalLineWidth(){\n        this.globalLineWidth = this.bm.lineWidth;\n        this.bm.lineWidth = this.localLineWidth;\n    }\n    resetGlobalLineWidth(){\n        this.bm.lineWidth = this.globalLineWidth;\n    }\n     draw(){\n\n     }\n }\n\n\nexport class hudSimpleText extends hudControl{\n    constructor(bm, x, y, fontSize) {\n        super(bm,x,y);\n        this.txt = \"hello...\"\n        this.fontSize = fontSize;\n    }\n    set text(txt){\n        this.txt = txt;\n    }\n    draw(){\n        this.bm.font = `bold ${this.fontSize}px Arial`;\n        this.bm.textAlign = 'start';\n        this.bm.fillText(this.txt, this.x, this.y);\n    }\n  }\n\n  function wrapText(context, text, x, y, maxWidth, lineHeight) {\n    var words = text.split(' ');\n    var line = '';\n\n    for(var n = 0; n < words.length; n++) {\n      var testLine = line + words[n] + ' ';\n      var metrics = context.measureText(testLine);\n      var testWidth = metrics.width;\n      if (testWidth > maxWidth && n > 0) {\n        context.fillText(line, x, y);\n        line = words[n] + ' ';\n        y += lineHeight;\n      }\n      else {\n        line = testLine;\n      }\n    }\n    context.fillText(line, x, y);\n  }\n\n  export class hudWrappedText extends hudControl{\n    constructor(bm, x, y, fontSize) {\n        super(bm,x,y);\n        this.txt = \"hello...\"\n        this.fontSize = fontSize;\n    }\n    set text(txt){\n        this.txt = txt;\n    }\n    draw(){\n        this.bm.font = `bold ${this.fontSize}px Arial`;\n        wrapText(this.bm, this.txt, this.x, this.y, 100, this.fontSize+2);\n    }\n  }\n\n\n\n  \nexport class hudBorder extends hudControl{\n    constructor(bm, width, height) {\n        super(bm,0,0);\n        this.width = width;\n        this.height = height;\n    }  \n    draw(){\n        super.changeLocalLineWidth();\n        this.bm.strokeRect(0,0,this.width, this.height);\n        super.resetGlobalLineWidth();\n    }\n\n  }\n \nexport class crosshair extends hudControl{\n    constructor(bm, width, height) {\n        super(bm,width / 2,height / 2);\n        this.width = width;\n        this.height = height;\n        \n    }\n\n    draw(){\n        // remove aliasing\n        this.x = Math.floor(this.x) + 0.5;\n        this.y = Math.floor(this.y) + 0.5;\n        super.changeLocalLineWidth();\n        this.bm.strokeWidth = 2;\n        this.bm.beginPath();\n        this.bm.moveTo(this.x, this.y - 10);\n        this.bm.lineTo(this.x, this.y + 10);\n        this.bm.moveTo(this.x - 10,  this.y);\n        this.bm.lineTo(this.x + 10,  this.y);\n        this.bm.closePath();\n        this.bm.stroke();\n        super.resetGlobalLineWidth();\n        //console.log(\"crosshair\", this.x, this.y);\n    }\n  }\n\n  export class horizon extends hudControl{\n    constructor(bm, width, height) {\n        super(bm,width / 2,height / 2);\n        this.width = width;\n        this.height = height;\n        this.tilt = 0;\n    }\n    set angle(angle){\n        this.tilt = angle;\n    }\n    draw(){\n        // remove aliasing\n        this.x = Math.floor(this.x) + 0.5;\n        this.y = Math.floor(this.y) + 0.5;\n        this.bm.save();\n        //this.bm.clearRect(0,0,this.width,this.height);\n        this.bm.translate(this.width/2, this.height/2)\n        this.bm.rotate((Math.PI / 180) * this.tilt); // rotate\n        this.bm.translate(-this.width/2, -this.height/2)\n        super.changeLocalLineWidth();\n        this.bm.strokeWidth = 1;\n        this.bm.beginPath();\n        this.bm.moveTo(this.x-20, this.y);\n        this.bm.lineTo(this.x-10, this.y);\n        this.bm.moveTo(this.x-10, this.y);\n        this.bm.lineTo(this.x, this.y -10 );\n        this.bm.moveTo(this.x, this.y -10 );\n        this.bm.lineTo(this.x+10, this.y);\n        this.bm.moveTo(this.x+10,  this.y);\n        this.bm.lineTo(this.x+20,  this.y);\n        this.bm.closePath();\n        this.bm.stroke();\n        super.resetGlobalLineWidth();\n        \n        this.bm.restore();\n    }\n  }\n\n  function range(start, end, inc) {\n    //console.log(start,end);\n    return Array(end/inc - (start/inc) + 1).fill().map((_, idx) => start+ idx*inc);\n  }\n  function limitCompass(x){\n    if(x<0) x = x+ 360;\n    if(x>359) x = x -360;\n    return x;\n  }\n  function limitPitchLadder(x){\n    if(x<-90) x = -180-x;\n    if(x>90) x = 180-x ;\n    return x;\n  }\n  function rangeClip(rangeArray,limit){\n    return rangeArray.map(x=>limit(x));\n  }\n  function rangeClip360(rangeArray,limit){\n    return rangeArray.map(x=>limit(x));\n  }\n  export class compass extends hudControl{\n    constructor(bm, width, height, tickSpace =40, range = 4) {   \n        super(bm,width/2- tickSpace*(range/2),height / 6);\n        this.tickSpace = tickSpace;\n        this._range = range;\n        //this.middle =  this.tickSpace*(this._range/2);\n        this.middle = width/2;\n        this.width = width;\n        this.height = height;\n        this.tilt = 0;\n        this.tickHeight = 15;\n        \n        this.scale = 10;\n        //this.scaleVals = range(10/this.scale,50/this.scale,this.scale);\n        //console.log(this.scaleVals);\n        this.x = Math.floor(this.x) + 0.5;\n        this.y = Math.floor(this.y) + 0.5;\n        //console.log(this.x);\n        \n    }\n    set angle(angle){\n        this.tilt = angle;\n    }\n    get angle(){\n        return this.tilt;\n    }\n    set range(range){\n        this._range = range;\n    }\n    set rangeScale(rangeScale){\n        this.scale = rangeScale;\n    }\n    draw(){\n        this.x = Math.floor(this.x) + 0.5;\n        this.y = Math.floor(this.y) + 0.5;\n        var tiltFloor = Math.floor(this.tilt);\n        var tiltRemd = Math.floor(this.tilt * 10/this.scale) % 10;\n        var tiltRemdHalf = Math.floor((this.tilt/this.scale+0.5) * 10) % 10;\n        this.scaleVals = range(\n            Math.floor(this.tilt/this.scale)*this.scale-Math.floor(this.scale*this._range/2),\n            Math.floor(this.tilt/this.scale)*this.scale+ Math.floor(this.scale*this._range/2),\n            this.scale);\n        this.scaleVals = rangeClip(this.scaleVals,limitCompass);\n        this.tilt = tiltFloor + tiltRemd/10;\n\n        super.changeLocalLineWidth();\n        this.bm.beginPath();\n        \n        var space = this.x-tiltRemd*this.tickSpace/10;\n        var spaceHalf = this.x-tiltRemdHalf*this.tickSpace/10;\n        this.scaleVals.forEach((val,idx)=>{\n            this.bm.font = `bold ${this.fontSize}px Arial`;\n            this.bm.textAlign = 'start';\n            this.bm.fillText(val.toString(), space-5, this.y-this.tickHeight-2);\n            this.bm.moveTo(space, this.y);\n            this.bm.lineTo(space, this.y-this.tickHeight); \n            this.bm.moveTo(spaceHalf, this.y);\n            this.bm.lineTo(spaceHalf, this.y-this.tickHeight/2); \n            space += this.tickSpace;\n            spaceHalf += this.tickSpace;\n        });\n        //var middle =  this.tickSpace*(this._range/2);\n        this.bm.moveTo(this.middle, this.y+this.tickHeight);\n        this.bm.lineTo(this.middle, this.y); \n        this.bm.fillText(tiltFloor.toString(), this.middle+4, this.y+this.tickHeight);\n        this.bm.closePath();\n        this.bm.stroke();\n        super.resetGlobalLineWidth(); \n    }\n  }\nexport class pitchLader extends hudControl {\n    constructor(bm, width, height){\n        super(bm,0,0);\n        this.width = width;\n        this.height = height;\n        this.middle = width/2;\n        this.tilt = 0;\n        this.rot = 0;\n        this.tickHeight = 100;\n        this.tickSpace = 40;\n        this.scale = 10;\n        this.x = Math.floor(this.x) + 0.5;\n        this.y = Math.floor(this.y) + 0.5;\n        this._range = 4;\n        this.middleOffset = height -(height - this.tickSpace*this._range )/2 +this.tickSpace;\n    }\n    set angle(angle){\n        this.tilt = angle;\n    }\n    set rotation(rotation){\n        this.rot = rotation;\n    }\n    set range(range){\n        this._range = range;\n    }\n    set rangeScale(rangeScale){\n        this.scale = rangeScale;\n    }\n    draw(){\n        this.bm.save();\n        this.bm.translate(this.width/2, this.height/2);\n        this.bm.rotate((Math.PI / 180) * this.rot); // rotate\n        this.bm.translate(-this.width/2, -this.height/2);\n\n        var tiltFloor = Math.floor(this.tilt);\n        var tiltRemd = Math.floor(this.tilt * 10/this.scale) % 10;\n        this.scaleVals = range(\n            Math.floor(this.tilt/this.scale)*this.scale - Math.floor(this.scale*this._range/2),\n            Math.floor(this.tilt/this.scale)*this.scale + Math.floor(this.scale*this._range/2),\n            this.scale);\n        this.scaleVals = rangeClip(this.scaleVals, limitPitchLadder);\n        this.tilt = tiltFloor + tiltRemd/10;\n        \n        var space = 0;\n        if (tiltRemd >=0) \n            space = this.middleOffset +tiltRemd*this.tickSpace/10;\n        else \n            space = this.middleOffset + (10*this.tickSpace/10 +tiltRemd*this.tickSpace/10);\n\n        super.changeLocalLineWidth();\n\n        this.scaleVals.forEach((val,idx)=>{\n            this.bm.beginPath();\n            this.bm.font = `bold ${this.fontSize}px Arial`;\n            this.bm.textAlign = 'start';\n            var sign = 1;\n            if (val<0) {\n                this.bm.setLineDash([3*this.tickHeight/100, 2*this.tickHeight/100]); //3,2\n                sign = -1;\n            }\n            if (val != 0){\n                this.bm.moveTo(this.middle - this.tickHeight/2-this.lineWidth/2, space);\n                this.bm.lineTo(this.middle - this.tickHeight*0.3, space); \n                this.bm.moveTo(this.middle + this.tickHeight*0.3, space);\n                this.bm.lineTo(this.middle + this.tickHeight/2+this.lineWidth/2, space); \n                this.bm.moveTo(this.middle - this.tickHeight/2, space);\n                this.bm.lineTo(this.middle - this.tickHeight/2, space+this.tickSpace/4 *sign); \n                this.bm.moveTo(this.middle + this.tickHeight/2, space);\n                this.bm.lineTo(this.middle + this.tickHeight/2, space+this.tickSpace/4*sign); \n                this.bm.fillText(val.toString(), this.middle - this.tickHeight/2 -130 +20*sign, space+35-1*sign); //25 8\n            }else{\n                this.bm.moveTo(this.middle - this.tickHeight*0.8, space);\n                this.bm.lineTo(this.middle - this.tickHeight*0.3, space); \n                this.bm.moveTo(this.middle + this.tickHeight*0.3, space);\n                this.bm.lineTo(this.middle + this.tickHeight*0.8, space); \n            }\n            space -= this.tickSpace;\n            this.bm.closePath();\n            this.bm.stroke();\n            this.bm.setLineDash([]);\n        });\n        \n        super.resetGlobalLineWidth(); \n        this.bm.restore();\n    }\n}\n\n\n\nexport default { hudSimpleText, hudWrappedText, hudBorder, crosshair, horizon, compass, pitchLader }\n","//import * as THREE from 'three';\nimport * as BABYLON from 'babylonjs';\nimport { compass } from './GuiHudControls';\nimport * as HUD2D from './HudControls';\n//import IMU from './Imu.js';\nfunction isMobileCheck() {\n    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n}\n\nexport default function hudPanel(scene,canvas,planeSize = 0.5){\n\n    //var size = 600;\n    //if (window.innerHeight < size) \n    //size = window.innerHeight;\n    const screenDimensions = {\n        width: canvas.width,\n        height: canvas.height\n    }\n    //console.log(screenDimensions);\n    var elapsed, now;\n    var then = 0;\n    var interval=0.05;\n    var angles = new BABYLON.Vector3(0,0,0);\n    var speed = 0;\n    var altitude = 0;\n    var power = 0;\n    //console.log('win inner height'+window.innerHeight);\n    var style = `rgba(\n        ${0xa3},\n        ${0xff},\n        ${0x00},\n        ${0xFF}`;\n    window.drawCanvas = document.createElement(\"canvas\");\n    window.drawCanvas.width = 768;\n    window.drawCanvas.height = 768;\n    var ctx = window.drawCanvas.getContext(\"2d\");\n    ctx.fillStyle = style;\n    ctx.strokeStyle = style;\n    //ctx.globalAlpha = 0.75;\n    //ctx.imageSmoothingEnabled = true; //maybe use when zooming\n    ctx.lineWidth = 5;\n    var hudElements = {\n        //info: new HUD2D.hudSimpleText(ctx, window.drawCanvas.width/2 -30, window.drawCanvas.height - 150,128),\n        //border: new HUD2D.hudBorder(ctx,window.drawCanvas.width,window.drawCanvas.height),\n        //crosshair: new HUD2D.crosshair(ctx,window.drawCanvas.width,window.drawCanvas.height),\n        //horizon: new HUD2D.horizon(ctx,window.drawCanvas.width,window.drawCanvas.height),\n        compass: new HUD2D.compass(ctx,window.drawCanvas.width,window.drawCanvas.height,200,2),\n        pitchLader: new HUD2D.pitchLader(ctx,window.drawCanvas.width,window.drawCanvas.height),\n        speed: new HUD2D.hudSimpleText(ctx, 0, window.drawCanvas.height-20,90),\n        power: new HUD2D.hudSimpleText(ctx, 0, window.drawCanvas.height-90,75),\n        altitude: new HUD2D.hudSimpleText(ctx, window.drawCanvas.width-230, window.drawCanvas.height-20,90)\n        //msgs: new HUD2D.hudWrappedText(hudBitmap,10,60,12)\n    };\n    //hudElements.compass.tickSpace = 100;\n    hudElements.compass.tickHeight = 60;\n    hudElements.compass.lineWidth = 14;\n    hudElements.compass.fontSize = 90;\n    hudElements.compass.angle = 30;\n\n    hudElements.pitchLader.tickHeight = 300;\n    hudElements.pitchLader.tickSpace = 120;\n    hudElements.pitchLader.lineWidth = 14;\n    hudElements.pitchLader.fontSize = 90;\n    hudElements.pitchLader.range = 2;\n\n   \n\n    Object.values(hudElements).forEach(val => {\n        //val.fontSize = 128;\n        //val.draw(); \n    });\n    var texture = new BABYLON.HtmlElementTexture(\"\", window.drawCanvas, {\n        scene\n    });\n    var material = new BABYLON.StandardMaterial(\"groundMat\", scene);\n    material.emissiveTexture = texture;\n    material.disableLighting = true;\n    material.diffuseTexture = texture;\n    material.diffuseTexture.hasAlpha = true;\n    material.backFaceCulling = false;\n    //material.disableLighting = true;\n    var hudMesh = BABYLON.MeshBuilder.CreatePlane(\"hudPlane\", {size:1.6});\n    hudMesh.material = material;\n\n    texture.update();\n    function draw() {\n        ctx.clearRect(0,0,window.drawCanvas.width,window.drawCanvas.height );\n        \n        hudElements.speed.text = speed;\n        hudElements.altitude.text = altitude;\n        hudElements.power.text = power;\n        hudElements.compass.angle = angles.x;\n        hudElements.pitchLader.angle = angles.y;\n        hudElements.pitchLader.rot = angles.z;\n        //console.log(hudElements.compass.angle );\n        // redraw\n        Object.values(hudElements).forEach(val => {val.draw()});\n        texture.update();\n        //texture.needsUpdate = true;\n        //if (imuData.updated) console.log(`compass = ${imuData.compass}, yaw = ${imuData.yaw},pitch = ${imuData.pitch},roll = ${imuData.roll}`);\n      }\n    /**    \n     * attach the hud to a vehicle     \n     * @param {BABYLON.Mesh} mesh\n     */\n    function linkWithMesh(mesh){\n        mesh.addChild(hudMesh);\n        hudMesh.position = new BABYLON.Vector3(0,0.8,0);//(0,1.2,0);\n    }\n    /**    \n     * attach the hud to a vehicle     \n     * @param {BABYLON.Camera} cam\n     */\n    function linkWithCamera(cam){\n        //hudMesh.translate(BABYLON.Vector3.Up(),20, BABYLON.Space.WORLD);// = new BABYLON.Vector3(0,0.1,2);\n        hudMesh.parent = cam;\n        //hudMesh.position = new BABYLON.Vector3(0,0.1,2);\n    }\n    /**    \n     * attach the hud to a vehicle     \n     * @param {BABYLON.Camera} cam\n     */\n    function lockToCamera(cam){\n        cam.lockedTarget = hudMesh;\n    }\n    function flipHoriz(drawing){\n        //drawing.translate(screenDimensions.width/2,0);\n        //drawing.scale(-1, 1);\n    }\n    function setRotation(eulerAngles){\n        angles.copyFrom(eulerAngles);\n    }\n    function setSpeed(s){\n        speed = (s*10).toFixed(1);\n    }\n    function setAltitude(a){\n        altitude = a.toFixed(1);\n    }\n    function setPower(p){\n        if(p>0.99) p=0.99;\n        power = (p*100).toFixed(0);\n    }\n\tfunction update(time) {\n        //then = now;\n        now = time;\n        elapsed = now - then;\n        if (elapsed > interval){\n            draw();\n            //console.log(time);\n            then = now;\n        }\n    }\n    return {\n        update,\n        draw,\n        linkWithMesh,\n        linkWithCamera,\n        lockToCamera,\n        setRotation,\n        setSpeed,\n        setAltitude,\n        setPower\n    }\n}","class Clock {\n\n\tconstructor( autoStart = true ) {\n\n\t\tthis.autoStart = autoStart;\n\n\t\tthis.startTime = 0;\n\t\tthis.oldTime = 0;\n\t\tthis.elapsedTime = 0;\n\n\t\tthis.running = false;\n\n\t}\n\n\tstart() {\n\n\t\tthis.startTime = now();\n\n\t\tthis.oldTime = this.startTime;\n\t\tthis.elapsedTime = 0;\n\t\tthis.running = true;\n\n\t}\n\n\tstop() {\n\n\t\tthis.getElapsedTime();\n\t\tthis.running = false;\n\t\tthis.autoStart = false;\n\n\t}\n\n\tgetElapsedTime() {\n\n\t\tthis.getDelta();\n\t\treturn this.elapsedTime;\n\n\t}\n\n\tgetDelta() {\n\n\t\tlet diff = 0;\n\n\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\tthis.start();\n\t\t\treturn 0;\n\n\t\t}\n\n\t\tif ( this.running ) {\n\n\t\t\tconst newTime = now();\n\n\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\tthis.oldTime = newTime;\n\n\t\t\tthis.elapsedTime += diff;\n\n\t\t}\n\n\t\treturn diff;\n\n\t}\n\n}\n\nfunction now() {\n\n\treturn ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732\n\n}\n\nexport { Clock };","import * as BABYLON from \"babylonjs\";\nimport { SkyMaterial } from \"babylonjs-materials\";\n /**    \n *  Simulates the sky with the sun \n * @param {BABYLON.Scene} scene      \n * @param {BABYLON.Light} sunLight\n * @param {BABYLON.Light} ambientLight  \n * @param {BABYLON.Camera} followCam \n * @param num size      \n */\nexport default function skySim(scene, sunLight, ambientLight, followCam, size = 10000){\n    var elapsed, now;\n    var then = 0;\n    var interval= 0.05;\n\n    //ambientLight.intensity = 2;\n    //ambientLight.diffuse = new BABYLON.Color3(0.96, 0.97, 0.93);\n\t//ambientLight.groundColor = new BABYLON.Color3(0, 0, 0);\n    //sunLight.intensity = 2;\n    \n\t// Sky material\n\tvar skyboxMaterial = new SkyMaterial(\"skyMaterial\", scene);\n    skyboxMaterial.backFaceCulling = false;\n    skyboxMaterial.distance = size/2;\n    skyboxMaterial.turbidity = 44;\n    skyboxMaterial.inclination = 0;\n    skyboxMaterial.alpha = 0.5;\n    skyboxMaterial.alphaMode = 1; \n    skyboxMaterial.luminance = 1.1;\n    const offset = 0;\n\t// Sky mesh (box)\n    var skybox = BABYLON.MeshBuilder.CreateBox(\"skyBox\", {width:size, depth:size, height:size}, scene);\n    skybox.material = skyboxMaterial;\n    skybox.position.y = size/3;\n\t//sunLight.position =  skyboxMaterial.sunPosition;\n\n    var cloudMaterial = new BABYLON.StandardMaterial(\"farClouds\", scene);\n    var cloudTexture = new BABYLON.Texture(\"https://raw.githubusercontent.com/kristosb/arfix/b958a70382ccbf86294af1540cd1608e1af1e161/arfix/public/assets/textures/Skies0362_3_masked_S.png\", scene);\n    cloudMaterial.diffuseTexture = cloudTexture;\n    cloudMaterial.backFaceCulling = false;\n    cloudMaterial.twoSidedLighting = true;\n    cloudMaterial.diffuseTexture.hasAlpha = true;\n    cloudMaterial.emissiveColor = new BABYLON.Color3(135/255, 123/255, 78/255);\n    cloudMaterial.specularColor = new BABYLON.Color3(46/255, 46/255, 39/255);\n    \n    var faceUV = new Array(6);\n\n    faceUV[0] = new BABYLON.Vector4(1, 0, 0, 1);\n    faceUV[1] = new BABYLON.Vector4(1, 0, 0, 1);\n    faceUV[2] = new BABYLON.Vector4(1, 0, 0, 1);\n    faceUV[3] = new BABYLON.Vector4(1, 0, 0, 1);\n    faceUV[4] = new BABYLON.Vector4(0, 0, 0, 0);\n    faceUV[5] = new BABYLON.Vector4(0, 0, 0, 0);\n    const cloudBoxSizeMult = (size/1024);\n    var cloudOptions = {\n        width: 1024*cloudBoxSizeMult+1,\n        height: 292*cloudBoxSizeMult+1,\n        depth: 1024*cloudBoxSizeMult+1,\n        wrap:true,\n        faceUV: faceUV\n    };\n    //console.log(\"cloud\",cloudOptions.width, cloudBoxSizeMult, size);\n    var cloudBox = BABYLON.MeshBuilder.CreateBox('farCloudsBox', cloudOptions, scene);\n    cloudBox.material = cloudMaterial;\n    cloudBox.position.y = 70;\n    transitionSunInclination(0);\n\n    function calcRaylight(){\n        var rayligh = convertRange(followCam.position.y,[60,500],[2,0])+convertRange(Math.abs(skyboxMaterial.inclination),[0,0.5],[0,2]);\n        if (rayligh>2) rayligh = 2;\n        if (rayligh<0) rayligh = 0;\n        skyboxMaterial.rayleigh = rayligh;\n    }\n    function setLightDirection(){\n        var dirNorm = new BABYLON.Vector3(0,0,0);\n        //console.log(\"inc\",skyboxMaterial.inclination);\n        skyboxMaterial.useSunPosition = false;\n        dirNorm.copyFrom(skyboxMaterial.sunPosition);\n        //dirNorm.subtractInPlace(new BABYLON.Vector3(0,400,0));\n        //console.log(\"dir\",dirNorm);\n        dirNorm.normalize();\n        //console.log(\"dirsub\",dirNorm);\n        ambientLight.direction.copyFromFloats(dirNorm.x, dirNorm.y, dirNorm.z);//copyFrom(dirNorm);\n        sunLight.direction.copyFromFloats(-dirNorm.x, -dirNorm.y, -dirNorm.z);\n        ambientLight.intensity = convertRange(Math.abs(skyboxMaterial.inclination),[0,0.5],[0.8,0.2]);\n        sunLight.intensity = convertRange(Math.abs(skyboxMaterial.inclination),[0,0.5],[2.3,1.4]);;\n        //if(dirNorm.y<0) ambientLight.intensity = 1; else ambientLight.intensity = 2;\n        console.log(sunLight.direction);\n    }\n    // evening  luminance =0.1 and decrease turbo = 5\n\tfunction move(){\n        skyboxMaterial.cameraOffset.y =  offset + followCam.position.y/10;\n        skyboxMaterial.turbidity  = convertRange(Math.abs(skyboxMaterial.inclination),[0,0.5],[44,2]);\n        calcRaylight();\n        \n    };\n    function convertRange( value, r1, r2 ) { \n        return ( value - r1[ 0 ] ) * ( r2[ 1 ] - r2[ 0 ] ) / ( r1[ 1 ] - r1[ 0 ] ) + r2[ 0 ];\n    }  \n    function transitionSunInclination( interval = 0.025){\n        const limit = 0.48;\n        skyboxMaterial.inclination += interval;\n        if (skyboxMaterial.inclination >= limit) skyboxMaterial.inclination = limit;\n        if (skyboxMaterial.inclination <= -limit) skyboxMaterial.inclination = -limit;\n        //console.log(skyboxMaterial.inclination);\n        move();\n        setLightDirection();\n    }\n    function makeClouds(area){\n        var spriteManagerClouds = new BABYLON.SpriteManager(\"cloudsManager\", \"http://www.babylonjs.com/Scenes/Clouds/cloud.png\", 1000, 256, scene);\n        //spriteManagerClouds.texture.\n        //spriteManagerClouds.blendMode\n        //BABYLON.Scalar.RandomRange(0.4, 1)\n        for (var i = 0; i < 100; i++) {\n              var clouds = new BABYLON.Sprite(\"clouds\", spriteManagerClouds);\n              //clouds.color = new BABYLON.Color3(0.87, 0.93, 0.91);\n              clouds.position.x = Math.random() * area - area/2;\n              clouds.position.y = Math.random() * 150 + 150;\n              clouds.position.z = Math.random() * area - area/2; \n              clouds.size = Math.random() * 60 +50;\n              if (Math.round(Math.random() * 5) === 0) {\n                  clouds.angle = Math.PI * 90 / 180;            \n              }\n          if (Math.round(Math.random() * 2) === 0) {\n            clouds.invertU = -1;\n          }\n          if (Math.round(Math.random() * 4) === 0) {\n            clouds.invertV = -1;\n          }\n          }\n    return spriteManagerClouds;\n    }\n    \n    function update(time) {\n       /* now = time;\n        elapsed = now - then;\n        if (elapsed > interval){\n            move();\n            //console.log(time);\n            then = now;\n        }*/\n    }\n    function getSkyMesh(){\n        return skybox;\n    }\n    return {\n        update,\n        transitionSunInclination,\n        makeClouds,\n        getSkyMesh\n    }\n}\n","import * as BABYLON from 'babylonjs';\nimport { CustomMaterial } from \"babylonjs-materials\";\n\n /**    \n *  Simulates the oacean with moving waves\n * @param {BABYLON.Scene} scene      \n * @param num size      \n */\n /* export default function scene(scene, camera, size = 1024, ground) {\n\n\t// Water\n    // Our built-in 'ground' shape.\n    var waterMesh = BABYLON.MeshBuilder.CreateGround(\"water\", { width: size, height: size, subdivisions: 64 }, scene);\n    //waterMesh.scaling = new BABYLON.Vector3(size/2, 5, size/2);\n    //waterMesh.rotation.y = Math.PI*2;\n    //waterMesh.position.y = -10.8;\n    // stylized water shader\n    BABYLON.Effect.ShadersStore[\"customVertexShader\"]= \"\\r\\n\"+   \n    \"precision highp float;\\r\\n\"+\n\n    // Attributes\n    \"attribute vec3 position;\\r\\n\"+\n    \"attribute vec2 uv;\\r\\n\"+\n\n    // Uniforms\n    \"uniform mat4 worldViewProjection;\\r\\n\"+\n    \"uniform float time;\\r\\n\"+\n\n    // Varying\n    \"varying vec3 vPosition;\\r\\n\"+\n    \"varying vec4 vClipSpace;\\r\\n\"+\n\n    \"void main(void) {\\r\\n\"+\n        \"float scale = 1.0;\\r\\n\"+\n        // calc new position\n        \"float newY = 0.02*(sin(position.x * 1.0 / scale + time * 1.0));\\r\\n\"+\n        // new model position\n        \"vec3 newPositionM = vec3(position.x,newY,position.z);\\r\\n\"+\n        \"gl_Position = worldViewProjection * vec4(newPositionM, 1.0);\\r\\n\"+\n        //\"gl_Position = worldViewProjection * vec4(position, 1.0);\\r\\n\"+\n        // grab vertex position in world space\n        \"vPosition = position;\\r\\n\"+\n        // grab vertex position in view space\n        \"vClipSpace = gl_Position;\\r\\n\"+\n    \"}\\r\\n\";\n\n    BABYLON.Effect.ShadersStore[\"customFragmentShader\"]=\"\\r\\n\"+\n    \"precision highp float;\\r\\n\"+\n\n    // Varyings\n    \"varying vec3 vPosition;\\r\\n\"+\n    // world distance, camera to water\n    \"varying vec4 vClipSpace;\\r\\n\"+\n\n    // Uniforms\n    \"uniform sampler2D depthTex;\\r\\n\"+\n    \"uniform sampler2D refractionSampler;\\r\\n\"+\n    \"uniform float camMinZ;\\r\\n\"+\n    \"uniform float camMaxZ;\\r\\n\"+\n    \"uniform float maxDepth;\\r\\n\"+\n    // water colors\n    \"uniform vec4 wDeepColor;\\r\\n\"+\n    \"uniform vec4 wShallowColor;\\r\\n\"+\n    \"uniform float time;\\r\\n\"+\n    \"uniform float wNoiseScale;\\r\\n\"+\n    \"uniform float wNoiseOffset;\\r\\n\"+\n    \"uniform float fNoiseScale;\\r\\n\"+\n\n    \"float mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\\r\\n\"+\n    \"vec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\\r\\n\"+\n    \"vec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\\r\\n\"+\n\n    \"float noise(vec3 p){\\r\\n\"+\n        \"vec3 a = floor(p);\\r\\n\"+\n        \"vec3 d = p - a;\\r\\n\"+\n        \"d = d * d * (3.0 - 2.0 * d);\\r\\n\"+\n\n        \"vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\\r\\n\"+\n        \"vec4 k1 = perm(b.xyxy);\\r\\n\"+\n        \"vec4 k2 = perm(k1.xyxy + b.zzww);\\r\\n\"+\n\n        \"vec4 c = k2 + a.zzzz;\\r\\n\"+\n        \"vec4 k3 = perm(c);\\r\\n\"+\n        \"vec4 k4 = perm(c + 1.0);\\r\\n\"+\n\n        \"vec4 o1 = fract(k3 * (1.0 / 41.0));\\r\\n\"+\n        \"vec4 o2 = fract(k4 * (1.0 / 41.0));\\r\\n\"+\n\n        \"vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\\r\\n\"+\n        \"vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\\r\\n\"+\n\n        \"return o4.y * d.y + o4.x * (1.0 - d.y);\\r\\n\"+\n    \"}\\r\\n\"+\n\n    \"void main(void) {\\r\\n\"+\n        // init baseColor\n        \"vec4 baseColor = vec4(0.0);\\r\\n\"+\n        // generate noise value\n        \"float waveNoise = noise(vec3(0., time, 0.)+vPosition*wNoiseScale)*wNoiseOffset;\\r\\n\"+\n        // remap frag screen space coords to ndc (-1 to +1)\n        \"vec2 ndc = (vClipSpace.xy / vClipSpace.w) / 2.0 + 0.5;\\r\\n\"+\n        // grab depth value (0 to 1) at ndc for object behind water\n        \"float depthOfObjectBehindWater = texture2D(depthTex, vec2(ndc.x, ndc.y)+waveNoise).r;\\r\\n\"+\n        // get depth of water plane\n        \"float linearWaterDepth = (vClipSpace.z + camMinZ) / (camMaxZ + camMinZ);\\r\\n\"+\n        // calculate water depth scaled to camMaxZ since camMaxZ >> camMinZ\n        \"float waterDepth = camMaxZ*(depthOfObjectBehindWater - linearWaterDepth);\\r\\n\"+\n        // get water depth as a ratio of maxDepth\n        \"float wdepth = clamp((waterDepth/maxDepth), 0.0, 1.0);\\r\\n\"+\n        // mix water colors based on depth\n        \"baseColor = mix(wShallowColor, wDeepColor, wdepth);\\r\\n\"+\n        // mix colors with scene render\n        \"vec4 refractiveColor = texture2D(refractionSampler, vec2(ndc.x, ndc.y)+waveNoise);\\r\\n\"+\n        \"baseColor = mix(refractiveColor, baseColor, baseColor.a);\\r\\n\"+\n        // decide the amount of foam \n        \"float foam = 1.0-smoothstep(0.1, 0.2, wdepth);\\r\\n\"+\n        // make the foam effect using noise\n        \"float foamEffect = smoothstep( 0.1, 0.2, noise(vec3(0., time, 0.)+vPosition*fNoiseScale*0.3)*foam);\\r\\n\"+\n        \"baseColor.rgba += vec4(foamEffect);\\r\\n\"+\n        // final result\n        \"gl_FragColor = baseColor;\\r\\n\"+\n        \n    \"}\\r\\n\";\n\n    var shaderMaterial = new BABYLON.ShaderMaterial(\"shader\", scene, {vertex: \"custom\",fragment: \"custom\"},\n    {\n    attributes: [\"position\", \"normal\", \"uv\"],\n    uniforms: [\"world\", \"worldView\", \"worldViewProjection\", \"view\", \"projection\"],\n    });\n \n    // linear depth only!! I dun want to work with non-linear depth map!\n    var depthRenderer = scene.enableDepthRenderer(scene.activeCamera,false);\n    var depthTex = depthRenderer.getDepthMap();\n    depthTex.renderList = [ ground];\n    \n    var _refractionRTT = new BABYLON.RenderTargetTexture(\"water_refraction\", { width: 8, height: 8 }, scene, false, true);\n    _refractionRTT.wrapU = BABYLON.Constants.TEXTURE_MIRROR_ADDRESSMODE;\n    _refractionRTT.wrapV = BABYLON.Constants.TEXTURE_MIRROR_ADDRESSMODE;\n    _refractionRTT.ignoreCameraViewport = true;\n    _refractionRTT.renderList.push( ground);\n    _refractionRTT.refreshRate = 4;\n\n    scene.customRenderTargets.push(_refractionRTT);\n    \n    // set shader parameters\n    shaderMaterial.setTexture(\"depthTex\", depthTex);\n    shaderMaterial.setTexture(\"refractionSampler\", _refractionRTT);\n    shaderMaterial.setFloat(\"camMinZ\", scene.activeCamera.minZ);\n    shaderMaterial.setFloat(\"camMaxZ\", scene.activeCamera.maxZ);\n    shaderMaterial.setFloat(\"time\", 0);\n    shaderMaterial.setFloat(\"wNoiseScale\", 6.0);\n    shaderMaterial.setFloat(\"wNoiseOffset\", 0.01);\n    shaderMaterial.setFloat(\"fNoiseScale\", 10.0);\n    shaderMaterial.setFloat(\"maxDepth\", 0.5);\n    shaderMaterial.setVector4(\"wDeepColor\", new BABYLON.Vector4(0.0,0.2,0.5,0.8));\n    shaderMaterial.setVector4(\"wShallowColor\", new BABYLON.Vector4(0.3,0.4,0.8,0.5));\n\n    var time = 0;\n    scene.registerBeforeRender(function() {\n        time += scene.getEngine().getDeltaTime() * 0.001;\n        shaderMaterial.setFloat(\"time\", time);\n    });\n    \n    waterMesh.material = shaderMaterial;\n\n    waterMesh.receiveShadows = true;\n\n    function update(){\n\n    }\n    function setPosition(position){\n        waterMesh.position = position;\n    }\n    function addReflected(subject){\n        //water.addToRenderList(subject);\n    }\n    return {\n        update,\n        setPosition,\n        addReflected\n    }\n\n}*/\n\n/*  export default function scene(scene, camera, size = 1024) {\n\n\t// Water\n    // Our built-in 'ground' shape.\n    var waterMesh = BABYLON.MeshBuilder.CreateGround(\"water\", { width: 2, height: 2, subdivisions: 64 }, scene);\n    waterMesh.scaling = new BABYLON.Vector3(size/2, 5, size/2);\n    waterMesh.rotation.y = Math.PI*2;\n    //waterMesh.position.y = -10.8;\n\n    BABYLON.NodeMaterial.ParseFromSnippetAsync(\"#3FU5FG#1\", scene).then((mat) => {\n        waterMesh.material = mat;\n        //window.mat = mat;\n    });\n    let addPostEffects = ()=>{\n        var pipeline = new BABYLON.DefaultRenderingPipeline(\n            \"defaultPipeline\", // The name of the pipeline\n            false, // Do you want the pipeline to use HDR texture?\n            scene, // The scene instance\n            [camera] // The list of cameras to be attached to\n        );\n        pipeline.bloomEnabled   = false;\n\n        pipeline.grainEnabled = false;\n        pipeline.grain.animated = false;\n\n        pipeline.chromaticAberrationEnabled = false;\n\n        pipeline.sharpenEnabled = false;\n\n    }\n    addPostEffects();\n\n    waterMesh.receiveShadows = true;\n\n    function update(){\n\n    }\n    function setPosition(position){\n        waterMesh.position = position;\n    }\n    function addReflected(subject){\n        //water.addToRenderList(subject);\n    }\n    return {\n        update,\n        setPosition,\n        addReflected\n    }\n\n}*/\n\n/*export default function scene(scene, size = 1024) {\n\n\t// Water\n\tvar waterMesh = BABYLON.Mesh.CreateGround(\"waterMesh\", size, size, 16, scene, false);\n    waterMesh.receiveShadows = true;\n\tvar water = new WaterMaterial(\"water\", scene, new BABYLON.Vector2(1024, 1024));\n\twater.backFaceCulling = false;\n\twater.bumpTexture = new BABYLON.Texture(\"textures/waterbump.png\", scene);\n\twater.windForce = -10;\n\twater.waveHeight = 0.5;\n\twater.bumpHeight = 0.2;\n\twater.windDirection = new BABYLON.Vector2(1, 1);\n\twater.waterColor = new BABYLON.Color3(0, 0, 221 / 255);\n\twater.colorBlendFactor = 0.0;\n    water.alpha = 0.7;\n\t\n\twaterMesh.material = water;\n\n    function update(){\n\n    }\n    function setPosition(position){\n        waterMesh.position = position;\n    }\n    function addReflected(subject){\n        water.addToRenderList(subject);\n    }\n    return {\n        update,\n        setPosition,\n        addReflected\n    }\n\n}*/\n\nexport default function scene(scene, size = 1024) {\n    var camWaterMask = maskProjectionCam(scene,size);\n    var gmat = createMaskMaterial(scene, camWaterMask);\n    var ocean = null;\n    const checkDepthMapCreated = () => {\n        const ok = gmat.diffuseTexture._currentRefreshId !== -1;\n        if (!ok) {\n            window.setTimeout(checkDepthMapCreated, 10);\n        } else {\n            //var ocean = new BumpWaves(wsize, scene, gmat);\n            ocean = new ProceduralHeightMap(size, scene, gmat);\n        }\n    };\n\n    checkDepthMapCreated();\n\n\n    //var ocean = new ProceduralHeightMap(size, scene, gmat);\n    function update(){\n\n    }\n    function getMesh(){\n        return ocean;\n    }\n    function setPosition(position){\n        //waterMesh.position = position;\n    }\n\n    return {\n        update,\n        setPosition,\n        getMesh\n    }\n\n}\n\nclass ProceduralHeightMap{\n\n    constructor(wsize, scene, gmat){\n\n\n\n\n        let detail = 64;\n        let res = 512;\n\n        var sdfRes = gmat.diffuseTexture.getSize().width;\n        var sdfTexture = this.generateDistanceField(sdfRes, gmat.diffuseTexture, 24, scene);\n        let flowHeight = this.distortionFlow( 0.5, sdfRes, scene);\n        var water = BABYLON.MeshBuilder.CreateGround(\"waterMesh\", {width: wsize, height: wsize, subdivisions:4}, scene);\n        //water.convertToFlatShadedMesh();\n        water.material = new CustomMaterial('waterMaterial', scene);\n        water.material.backFaceCulling = false;\n        water.position.y  = 0;//55;\n        \n        let bumpTexture = new BABYLON.CustomProceduralTexture(\"waterBump\", 'height2Normal', flowHeight._texture.baseWidth, scene, false, true);\n        bumpTexture.wrapU = bumpTexture.wrapV = 1;\n        bumpTexture.setVector2('resolution', new BABYLON.Vector2(res,res));\n        bumpTexture.setTexture('textureSampler', flowHeight);\n        bumpTexture.refreshRate = 3;\n        bumpTexture.level = 0.5;\n        bumpTexture.vScale = 20;\n        bumpTexture.uScale = 20;\n        //bumpTexture.vScale = -1;\n        water.material.bumpTexture = bumpTexture;\n        water.material.specularPower = 60;\n        var waterColorTexture = this.generateShallowWaterGradient(sdfRes,sdfTexture,0.9,scene);\n        water.material.diffuseTexture = waterColorTexture;   \n        water.material.diffuseTexture.uScale = -1;\n        \n        water.receiveShadows = true;\n\n    }\n    \n    ///////////// SDF //////////\n    generateDistanceField(res,occlusionTexture, iter1 =24, scene){\n        var uid = Date.now();  \n        var iter =iter1.toFixed(1).toString();\n        //console.log(\"iter\",iter);\n        BABYLON.Effect.ShadersStore[uid+'SdfPixelShader'] = \n        `\n        varying vec2 vUV;\n        uniform sampler2D occlusionMap;\n        uniform float res;\n        \n        bool isIn(vec2 uv)\n        {\n            //vec4 texColor = texture(occlusionMap, uv);\n            float x = step(0.99,texture(occlusionMap, uv).r); //treshold the map\n            x = 1. -x;  //reverse color\n            //vec3 color = vec3(x,x,x);\n            if (x != 1.)\n                return false;\n            else\n                return true;\n        }\n\n        float squaredDistanceBetween(vec2 uv1, vec2 uv2)\n        {\n            vec2 delta = uv1 - uv2;\n            float dist = (delta.x * delta.x) + (delta.y * delta.y);\n            return dist;\n        }\n        void main(){\n            vec2 iResolution = vec2(res);\n            const float range = ${iter};\n            const int iRange = int(range);\n            float halfRange = range / 2.0;\n            vec2 startPosition = vec2(gl_FragCoord.x - halfRange, gl_FragCoord.y - halfRange);\n            bool fragIsIn = isIn(vUV);\n            float squaredDistanceToEdge = (halfRange*halfRange)*2.0;\n\n            if (!fragIsIn)\n                for(int dx=0; dx < iRange; dx++)\n                {\n                    for(int dy=0; dy < iRange; dy++)\n                    {\n                        vec2 scanPositionUV = startPosition + vec2(dx, dy);\n                        \n                        bool scanIsIn = isIn(scanPositionUV / iResolution.xy);\n                        if (scanIsIn != fragIsIn)\n                        {\n                            float scanDistance = squaredDistanceBetween(vec2(gl_FragCoord.x,gl_FragCoord.y), scanPositionUV);\n                            //float scanDistance = squaredDistanceBetween(gl_FragCoord, scanPositionUV);\n                            if (scanDistance < squaredDistanceToEdge)\n                                squaredDistanceToEdge = scanDistance;\n                        }\n                    }\n                }\n            float normalised = squaredDistanceToEdge / ((halfRange*halfRange)*2.0);\n            float distanceToEdge = sqrt(normalised);\n            if (fragIsIn)\n                distanceToEdge = -distanceToEdge ;\n            normalised = 0.5 - distanceToEdge;\n\n            gl_FragColor = vec4(normalised, normalised, normalised, 1.0);\n            /*float x = step(0.99,texture2D(occlusionMap, vUV).r); //treshold the map\n            x = 1. -x;  //reverse color\n            vec3 color = vec3(x,x,x);*/\n\n            //vec3 color = vec3(0.,1.,0.);\n            //gl_FragColor = vec4(color, 1.0);\n\n        }\n        `\n        let texture = new BABYLON.CustomProceduralTexture(uid+\"SdfDt\", uid+\"Sdf\", res , scene, false, false);\n        //texture.wrapU = texture.wrapV = 1;  \n        texture.refreshRate = 0;        \n        texture.setTexture('occlusionMap', occlusionTexture, scene);//params.flowMap)\n        texture.setFloat('res', res);\n        //texture.uScale = 1;\n        //texture.vScale = 1;\n\n        return texture\n    }\n\n    /////////// SDF END /////\n\n    ///////////shallow water map /////\n    generateShallowWaterGradient(res, depfthField,clipDepth=0.5, scene){\n        var uid = Date.now();  \n        var deepColor = new BABYLON.Color3(0.05, 0.098, 0.168);//0.13, 0.27, 0.57);\n        var shallowColor = new BABYLON.Color3(0.02, 0.72, 0.77);//(0.1, 0.54, 0.68);;//new BABYLON.Color3(0.02, 0.72, 0.77);\n        var clip =clipDepth.toFixed(1).toString();\n        BABYLON.Effect.ShadersStore[uid+'ShallowWaterPixelShader'] = \n        `\n        varying vec2 vUV;\n        uniform sampler2D depthField;\n        uniform float res;\n        uniform vec3 deep;\n        uniform vec3 shallow;\n        void main(){\n            vec2 iResolution = vec2(res);\n            float depth = smoothstep(0.,${clip},texture(depthField, vUV).r);\n            vec3 gradient = mix(deep,shallow, depth);\n            gl_FragColor = vec4(gradient,1.0);\n        }\n        `\n        let texture = new BABYLON.CustomProceduralTexture(uid+\"ShallowWaterDt\", uid+\"ShallowWater\", res , scene, false, false);\n        //texture.wrapU = texture.wrapV = 1;  \n        texture.refreshRate = 0;        \n        texture.setTexture('depthField', depfthField, scene);//params.flowMap)\n        texture.setFloat('res', res);\n        texture.setColor3('deep', deepColor);\n        texture.setColor3('shallow', shallowColor);\n        //texture.uScale = 1;\n        //texture.vScale = 1;\n        return texture\n    }\n/////////////\n\n    distortionFlow(wspeed, res, scene ){\n        var uid = Date.now()\n        //this.params = params\n         \n        var speed = wspeed.toFixed(1).toString();    \n        BABYLON.Effect.ShadersStore[uid+'DistortionFlowPixelShader'] = \n        `\n        varying vec2 vUV;\n        uniform sampler2D textureSampler;\n        //uniform sampler2D flowMap;\n        uniform float uTime;\n\n        vec2 flowUV (vec2 uv, float time) {\n            return uv + time;\n        }\n        //https://www.shadertoy.com/view/MtfBRN\n        void main(){\n            vec2 uv = vec2(vUV.x,-vUV.y);\n            float intensity = ${speed};\n            float timescale = uTime *.0174;\n            //vec2 distortion = (texture2D(flowMap, -uv).rg -1.3) * intensity;\n            float flow_t0 = fract(timescale);\n            float flow_t1 = fract(timescale + .5);\n            float alternate = abs((flow_t0 -.5) * 10.);\n\n            vec4 samp0 = texture2D(textureSampler, uv + flow_t0); \n            vec4 samp1 = texture2D(textureSampler, uv - flow_t1); \n            vec4 Flow = mix(samp0, samp1, alternate);\n            gl_FragColor = vec4(1.,Flow.g,1.,1.);\n        }\n        `\n        let texture = new BABYLON.CustomProceduralTexture(uid+\"DistortionFlowDt\", uid+\"DistortionFlow\", res || 256, scene, false, false)\n        texture.wrapU = texture.wrapV = 1;  \n        texture.refreshRate = 3;        \n\n        texture.onGeneratedObservable.add(()=>{           \n            texture.setFloat('uTime', texture._time)\n        })\n\n        texture.setFloat('uTime', 0); //Must do this or it wont update later on Genderated. \n        //waveTexture.uAng = Math.PI/2;\n        //waveTexture.wAng = Math.PI/2;\n        var waveNoiseTexture = new BABYLON.Texture(\"https://raw.githubusercontent.com/kristosb/assets/main/WavesDt.png\");\n\n        texture.setTexture('textureSampler', waveNoiseTexture);\n        texture.uScale = 1\n        texture.vScale = 1\n\n        return texture\n    }\n////////////\n    get scene(){\n        return this.params.scene\n    }\n\n    get res(){\n        return this.params.res\n    }\n\n}\n\n\nBABYLON.Effect.ShadersStore['height2NormalPixelShader']  =\n`varying vec2 vUV;\nuniform vec2 resolution;\nuniform sampler2D textureSampler;\n\nvoid main(){\n    vec2 unit = vec2(1.0)/resolution*2.;\n    float x = ((texture2D(textureSampler, vUV+(unit*vec2(-1.,0.))).g-texture2D(textureSampler, vUV+(unit*vec2(1.,0.))).g)+1.)*0.5;\n    float y = ((texture2D(textureSampler, vUV+(unit*vec2(0.,1.))).g-texture2D(textureSampler, vUV+(unit*vec2(0.,-1.))).g)+1.)*0.5;\n    float a = 1.;//texture(textureSampler, vUV).r;\n\n#if defined(invertDepth)\n    \tgl_FragColor = vec4(x, y, 1.0, a);\n#else\n\tgl_FragColor = vec4(1.0-x, y, 1.0, a);\n#endif\n\n}`;\n\nfunction subjectMeshes(scene,wsize){\n    var cube = BABYLON.MeshBuilder.CreateBox(\"Cube\", {size:wsize/4}, scene);\n    cube.position.copyFromFloats(wsize/4, wsize/8, wsize/4);\n    var sphere = BABYLON.MeshBuilder.CreateSphere(\"Ball\", {diameter:wsize/4}, scene);\n    sphere.position.copyFromFloats(wsize/4, -2+ wsize/8, -wsize/4);\n    sphere.material = new BABYLON.SimpleMaterial(\"sp\",scene);\n    //sphere.material.wireframe = true;\n    //sphere.material.alpha = 0.9;\n    var torus = BABYLON.MeshBuilder.CreateTorus(\"Torus\", { thickness:wsize/10, diameter: wsize/4}, scene);\n    torus.position.copyFromFloats(-wsize/4, wsize/20, wsize/4);\n    var cylinder = BABYLON.MeshBuilder.CreateCylinder(\"Cyclinder\", {diameter:wsize/4}, scene);\n    cylinder.position.copyFromFloats(-wsize/4, 1, -wsize/4);\n}\n\nfunction createGui(camWaterMask, wsize){\n    var displayFValue = function(value) {\n        return Math.floor(value * 10) / 10;\n    }\n    var frictionBox = function(value) {\n        camWaterMask.position.x = value\n        //console.log(\"value=\",value);\n    }\n    var advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\n\n    var selectFrictionBox = new BABYLON.GUI.SelectionPanel(\"spi\");\n    selectFrictionBox.width = 0.25;\n    selectFrictionBox.height = 0.25;\n    selectFrictionBox.background = \"#1388AF\";\n    selectFrictionBox.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\n    selectFrictionBox.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;\n\n    advancedTexture.addControl(selectFrictionBox);\n\n    var frictionGroup = new BABYLON.GUI.SliderGroup(\"orth cam pos\", \"S\");\n\tfrictionGroup.addSlider(\"x\", frictionBox, \"units\", -wsize/20, wsize/20, 0, displayFValue);\n    selectFrictionBox.addGroup(frictionGroup);\n}\n\nfunction maskProjectionCam(scene, size){\n    var zdist = -10;\n    var cameraOrth = new BABYLON.FreeCamera(\"camWaterMask\", new BABYLON.Vector3(0, zdist, 0), scene);\n    cameraOrth.setTarget(BABYLON.Vector3.Zero());\n    var cameraZoom  = size/2; \n    cameraOrth.mode = BABYLON.Camera.ORTHOGRAPHIC_CAMERA;\n    cameraOrth.orthoTop = cameraZoom ;\n    cameraOrth.orthoBottom = -cameraZoom;\n    cameraOrth.orthoLeft = -cameraZoom ;\n    cameraOrth.orthoRight = cameraZoom ;\n    cameraOrth.minZ = -zdist-2;\n    cameraOrth.maxZ = -zdist+5;\n    return cameraOrth\n}\nfunction createMaskMaterial(scene, camWaterMask){\n    var depthMap = scene.enableDepthRenderer(camWaterMask).getDepthMap();\n    depthMap.scale(0.2);    //reduce resolution\n    const size = depthMap.getSize();\n    depthMap._refreshRate = 0;\n    console.log(size);\n    var groundMat = new BABYLON.StandardMaterial(\"waterOcclMask\", scene);\n    groundMat.diffuseTexture = depthMap;\n    groundMat.specularColor.copyFromFloats(0, 0, 0);\n\n    camWaterMask.dispose();\n    return groundMat;\n}","import * as BABYLON from 'babylonjs';\n\n/*export default function scene(shadowlight) {    \n    //var groundshadowGenerator = simpleShadowGenerator(shadowlight);\n    var groundshadowGenerator = cascadingShadowGenerator(shadowlight);\n\n    function ShadowGenerator(light, camera){\n        \n        //light.position = new BABYLON.Vector3(0, 1500, 0);\n        //light.diffuse = BABYLON.Color3.White();\n        //light.specular = new BABYLON.Color3(0.3, 0.3, 0.3);\n        //light.intensity = 1.0;\n\n        var shadowGeneratorDynamic = new BABYLON.ShadowGenerator(1024, light);\n        shadowGeneratorDynamic.usePercentageCloserFiltering = true;\n        shadowGeneratorDynamic.getShadowMap().renderList.push(torus);\n        return shadowGeneratorDynamic;\n    }\n    function updateOnce(){\n        //groundshadowGenerator.getShadowMap().refreshRate = BABYLON.RenderTargetTexture.REFRESHRATE_RENDER_ONCE;\n        //shadowlight.autoUpdateExtends = false;\n    }\n    function addMesh(mesh){\n        //groundshadowGenerator.getShadowMap().renderList.push(mesh);\n        //groundshadowGenerator.addShadowCaster(mesh);\n        //shadowGenerator.getShadowMap().renderList.push(torus);\n        //console.log(\"exist\",mesh);\n        groundshadowGenerator.getShadowMap().renderList.push(mesh);\n    }\n    return {\n        updateOnce,\n        addMesh\n    }\n}*/\n\nexport default function scene(shadowlight) {    \n    //var groundshadowGenerator = simpleShadowGenerator(shadowlight);\n    var groundshadowGenerator = cascadingShadowGenerator(shadowlight);\n\n    function simpleShadowGenerator(light){\n        var simpleShadows = new BABYLON.ShadowGenerator(1024, light);\n        //simpleShadows.getShadowMap().renderList.push(m1);\n        //simpleShadows.getShadowMap().renderList.push(m2);\n        simpleShadows.useBlurCloseExponentialShadowMap = true;\n        simpleShadows.getShadowMap().refreshRate = BABYLON.RenderTargetTexture.REFRESHRATE_RENDER_ONCE;\n        //light.autoUpdateExtends = true;\n        light.autoCalcShadowZBounds = true;\n        return simpleShadows;\n    }\n    function cascadingShadowGenerator(light, camera){\n        \n        light.position = new BABYLON.Vector3(0, 150, 0); //1500\n        //light.diffuse = BABYLON.Color3.White();\n        //light.specular = new BABYLON.Color3(0.3, 0.3, 0.3);\n        //light.intensity = 1.0;\n\n        var csmShadowGenerator = new BABYLON.CascadedShadowGenerator(1024, light);\n        //csmShadowGenerator.stabilizeCascades = true;\n        //csmShadowGenerator.forceBackFacesOnly = true;\n        //csmShadowGenerator.shadowMaxZ = 100;\n        //csmShadowGenerator.autoCalcDepthBounds = true;\n        //csmShadowGenerator.lambda = 0.5;\n        //csmShadowGenerator.depthClamp = true;\n        //csmShadowGenerator.penumbraDarkness = 0.8;\n        //csmShadowGenerator.usePercentageCloserFiltering = true;\n        //csmShadowGenerator.filteringQuality = BABYLON.ShadowGenerator.QUALITY_HIGH;\n        csmShadowGenerator.forceBackFacesOnly = true;\n        //csmShadowGenerator.numCascades = 2;\n        csmShadowGenerator.filteringQuality = BABYLON.ShadowGenerator.QUALITY_MEDIUM;\n\n        csmShadowGenerator.lambda = 1;     //0 -full lin, 1 full log\n        //csmShadowGenerator.shadowMaxZ = camera.maxZ;\n        csmShadowGenerator.shadowMaxZ = 500;\n        csmShadowGenerator.cascadeBlendPercentage = 0;\n        csmShadowGenerator.depthClamp = false;\n        csmShadowGenerator.splitFrustum();\n        //csmShadowGenerator.getShadowMap().refreshRate = BABYLON.RenderTargetTexture.REFRESHRATE_RENDER_ONEVERYTWOFRAMES;\n        //console.log(\"refresh\",csmShadowGenerator.getShadowMap().refreshRate);\n        return csmShadowGenerator;\n    }\n    function updateOnce(){\n        //groundshadowGenerator.getShadowMap().refreshRate = BABYLON.RenderTargetTexture.REFRESHRATE_RENDER_ONCE;\n        //shadowlight.autoUpdateExtends = false;\n    }\n    function addMesh(mesh){\n        //groundshadowGenerator.getShadowMap().renderList.push(mesh);\n        //groundshadowGenerator.addShadowCaster(mesh);\n        //shadowGenerator.getShadowMap().renderList.push(torus);\n        //console.log(\"exist\",mesh);\n        groundshadowGenerator.getShadowMap().renderList.push(mesh);\n    }\n    return {\n        updateOnce,\n        addMesh\n    }\n}\n\n\n","import * as BABYLON from 'babylonjs';\nimport * as CANNON from 'cannon';\n\nBABYLON.Mesh.prototype.getAbsoluteSize = function() {\n    if(!this.__size){\n        this.__size = BABYLON.Vector3.Zero();\n    }\n    let scaling = this.scaling;\n    //console.log(scaling);\n    let bounds = this.getBoundingInfo();\n    this.__size.x = Math.abs(bounds.minimum.x - bounds.maximum.x)*scaling.x;\n    this.__size.y = Math.abs(bounds.minimum.y - bounds.maximum.y)*scaling.y;\n    this.__size.z = Math.abs(bounds.minimum.z - bounds.maximum.z)*scaling.z;\n\n    return this.__size;\n};\n\n\n/**    \n     * Projects a point to a plane along a ray starting from the camera origin and directed towards the point. \n     * @param {BABYLON.Vector3} point      \n     * @param {BABYLON.Plane} plane\n     * @return {BABYLON.Vector3} The projection of the point p on the plane\n     */\n function projectOnPlane(point, plane) {        \n    let n = plane.normal;        \n    let d = plane.d;\n\n    let p0 = new BABYLON.Vector3().copyFrom(point);//camera.position;\n    \n    // ray direction\n    let V = new BABYLON.Vector3.Up();//point.subtract(p0).normalize();\n    let denom = BABYLON.Vector3.Dot(V, n);\n    \n    let t = -(BABYLON.Vector3.Dot(p0, n) + d)/denom;\n\n    // P = P0 + t*V\n    return p0.add(V.scale(t));\n}\n/**    \n     * Projects a point to a plane along a ray starting from the camera origin and directed towards the point. \n     * @param {BABYLON.Mesh} chassis      \n     * @param {BABYLON.Vector3[]} wheelPosition\n     * @return {BABYLON.Vector3[]} The projection of the point p on the plane\n     */\nfunction getWheelConnectionPoint(chassis, wheelPosition){\n    chassis.computeWorldMatrix(true); \n    //var norm = new BABYLON.Vector3(0,1,0);\n    //norm.rotateByQuaternionToRef(chassis.absoluteRotationQuaternion, norm);\n    //norm.normalize();\n    //var abstractPlane = BABYLON.Plane.FromPositionAndNormal(chassis.getAbsolutePosition(), norm);\n\n    var wheelsConnection = wheelPosition.map((pos,index)=>{\n        var con = new BABYLON.Vector3();\n        con.copyFrom(pos); //projectOnPlane(pos,abstractPlane);\n        con.subtractInPlace(chassis.getAbsolutePosition());\n        con.y = pos.y- chassis.getAbsolutePosition().y\n        return con;\n    });\n    return wheelsConnection;   \n}\n\nexport class CannonUtils {\n\n    static cannon2babylonVec3(cannonVector){\n        var babylonVector = new BABYLON.Vector3();\n        babylonVector.copyFromFloats(cannonVector.x, cannonVector.y, cannonVector.z);\n        return babylonVector;\n    }\n    static cannon2babylonQuat(cannonQuat){\n        const babylonQuat = new BABYLON.Quaternion(cannonQuat.x, cannonQuat.y, cannonQuat.z, cannonQuat.w );\n        //babylonQuat.copyFromFloats( cannonQuat.x, cannonQuat.y, cannonQuat.z, cannonQuat.w );\n        return babylonQuat;\n    }\n    static babylon2cannonVec3(babylonVector){\n        var cannonVector = new CANNON.Vec3(babylonVector.x, babylonVector.y, babylonVector.z);\n        return cannonVector; \n    }\n    static babylon2cannonQuat(babylonQuat){\n        var cannonQuat = new CANNON.Quaternion(babylonQuat.x, babylonQuat.y, babylonQuat.z, babylonQuat.w);\n        return cannonQuat;\n    }\n\n}","import * as BABYLON from 'babylonjs';\nimport * as CANNON from 'cannon';\nimport {CannonUtils} from './CannonUtils.js';\nimport {CarFromBoxesData, ThreeWheelCar} from './VehiclesData.js';\n\nexport default class Vehicle{\n    constructor(scene, carData){\n        this.scene = scene;\n        //this.physics = physics;\n        this.vehicle = null;\n        this.chassisBody = null;\n        //const carData = new ThreeWheelCar(scene);\n        this.carData = carData;\n        this.chassisMesh = carData.chassisMesh;\n        this.wheelMeshes = carData.wheelsMesh;\n        this.powerWheels = carData.powerWheelsIndex;\n        this.steeringwheels = carData.steeringWheelsIndex;\n        this.breakWheels = carData.brakeWheelsIndex;\n        this.carDataBody = carData.chassisBody;\n        this.carDataWheelBodies = carData.wheelBodies;\n        this.createVehicle();\n        \n    }\n    createVehicle(){\n        var world = this.scene.getPhysicsEngine().getPhysicsPlugin().world;\n        console.log(\"rotations\");\n        this.chassisBody = this.carDataBody;\n\n        var options = {\n            radius: 0.3,\n            directionLocal: new CANNON.Vec3(0, -1, 0),\n            suspensionStiffness: 150,\n            suspensionRestLength: 0.25,//04\n            frictionSlip: 5,\n            dampingRelaxation: 2.3,\n            dampingCompression: 4.5,\n            maxSuspensionForce: 200000,\n            rollInfluence:  0.01,\n            axleLocal: new CANNON.Vec3(-1, 0, 0),\n            chassisConnectionPointLocal: new CANNON.Vec3(1, 1, 0),\n            maxSuspensionTravel: 0.25,\n            customSlidingRotationalSpeed: -30,\n            useCustomSlidingRotationalSpeed: true,\n            };\n\n        // Create the vehicle\n        this.vehicle = new CANNON.RaycastVehicle({\n            chassisBody: this.chassisBody,\n\t\t\tindexUpAxis: 1,\n\t\t\tindexRightAxis: 0,\n\t\t\tindexForwardAxis: 2,\n        });\n\n        var that = this;\n    \n        /*this.wheelMeshes.forEach((wheelMesh, index)=>{\n        //this.carData.wheels.forEach((wheel, index)=>{\n            options.radius = 0.25;//0.5*wheelMesh.getAbsoluteSize().y;//y\n            var pos= new BABYLON.Vector3(\n                wheelMesh.getPositionExpressedInLocalSpace().x,\n                wheelMesh.getPositionExpressedInLocalSpace().y-that.chassisMesh.getAbsolutePosition().y,\n                wheelMesh.getPositionExpressedInLocalSpace().z\n                );\n            console.log(pos);\n            options.chassisConnectionPointLocal.copy(CannonUtils.babylon2cannonVec3( pos )); \n\n            that.vehicle.addWheel(options); \n        });*/\n        this.carData.wheels.forEach((wheel, index)=>{\n            options.radius = wheel.radius;\n            options.chassisConnectionPointLocal.copy(CannonUtils.babylon2cannonVec3( new BABYLON.Vector3(wheel.pos.x, wheel.pos.y, wheel.pos.z) )); \n            that.vehicle.addWheel(options); \n        });\n        this.vehicle.addToWorld(world);\n\n        this.scene.registerBeforeRender(function () {\n            for (var i = 0; i < that.vehicle.wheelInfos.length; i++) {\n                that.vehicle.updateWheelTransform(i);\n                var t = that.vehicle.wheelInfos[i].worldTransform; \n                \n                that.wheelMeshes[i].position.copyFrom( CannonUtils.cannon2babylonVec3(t.position) );\n                that.wheelMeshes[i].rotationQuaternion.copyFrom( CannonUtils.cannon2babylonQuat(t.quaternion) );\n            }\n        });\n\n    }\n\n\n    forward(force){\n        this.powerWheels.forEach(x=> this.vehicle.applyEngineForce(-force, x));\n    }\n    backward(force){\n        this.powerWheels.forEach(x=> this.vehicle.applyEngineForce(force, x));\n    }\n    right(force){\n        this.steeringwheels.forEach(x => this.vehicle.setSteeringValue(force, x));\n    }\n    left(force){\n        this.steeringwheels.forEach(x => this.vehicle.setSteeringValue(-force, x));\n    }\n    brake(force){\n        this.breakWheels.forEach(x => this.vehicle.setBrake(force, x));\n    }\n    unbrake(){\n        this.breakWheels.forEach(x => this.vehicle.setBrake(0, x));\n    }\n\n}","import * as BABYLON from 'babylonjs';\nimport * as YUKA from 'yuka';\nimport * as CANNON from 'cannon';\nimport { GridMaterial} from 'babylonjs-materials';\n\nexport default class BattleShip {\n    /**    \n     * Projects a point to a plane along a ray starting from the camera origin and directed towards the point. \n     * @param {BABYLON.Scene} scene      \n     * @param {BABYLON.Mesh} visualMesh \n     *    \n     */\n    constructor(scene, visualMesh){\n        var initPosition = new BABYLON.Vector3(260, 4, 350);\n        this.vehicleMesh = BABYLON.MeshBuilder.CreateBox(\"yukaMesh\",{width:12, height:3, depth:54},scene);\n        var groundMat = new BABYLON.StandardMaterial(\"groundMat\", scene);\n        groundMat.specularColor = new BABYLON.Color3(0, 0, 0);\n        groundMat.diffuseColor = new BABYLON.Color3(0.29, 0.26, 0.26);\n        groundMat.backFaceCulling = false;\n        this.vehicleMesh.material = new GridMaterial(\"groundMaterial\", scene);//groundMat;\n        this.vehicleMesh.position.copyFrom(initPosition);\n        this.vehicleMesh.position.z +=14;\n        this.vehicleMesh.position.x -=4.3;\n        this.vehicleMesh.physicsImpostor = new BABYLON.PhysicsImpostor(this.vehicleMesh, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 100000, friction: 1, restitution: 0.9 }, scene);\n        this.vehicleMesh.isVisible = false;\n        console.log(this.vehicleMesh.physicsImpostor.physicsBody.angularVelocity);\n        this.entityManager = new YUKA.EntityManager();\n        this.time = new YUKA.Time();\n        this.vehicle = new YUKA.Vehicle();\n        this.vehicle.maxSpeed = 1;\n        this.vehicle.mass = 0.1;\n        //vehicle.maxSpeed = 2;\n        //vehicle.setRenderComponent(vehicleMesh, sync);\n        const path = new YUKA.Path();\n        path.loop = true;\n        path.add(new YUKA.Vector3(290, 0, 340));\n        path.add(new YUKA.Vector3(100, 0, 350));\n        path.add(new YUKA.Vector3(0, 0, 300));\n        path.add(new YUKA.Vector3(20, 0, 180));\n        path.add(new YUKA.Vector3(140, 0, 140));\n        path.add(new YUKA.Vector3(300, 0, 200));\n        \n        //path.add(new YUKA.Vector3(250, 0, 340));\n    \n        this.vehicle.position.copy(path.current());\n        this.vehicle.active = false;\n        const followPathBehavior = new YUKA.FollowPathBehavior(path, 0.5);\n        this.vehicle.steering.add(followPathBehavior);\n        this.onPathBehavior = new YUKA.OnPathBehavior(path);\n        this.vehicle.steering.add(this.onPathBehavior);\n        this.entityManager.add(this.vehicle);\n        \n        path._waypoints.push(path._waypoints[0]);\n        var lines = BABYLON.MeshBuilder.CreateLines('lines', {\n            points: path._waypoints,\n            updatable: true,\n          })\n        \n        lines.color = BABYLON.Color3.Teal()\n        this.onPathBehavior.active = false;\n        //onPathBehavior.radius = 10;\n        this.entityManager.update(this.time.update().getDelta())\n        console.log(this.vehicle.velocity);\n\n       // var visualMesh = BABYLON.MeshBuilder.CreateBox(\"battleshipMesh\",{width:10, height:20, depth:10},scene);\n        visualMesh.position.copyFrom(initPosition);\n        visualMesh.position.y +=3.37;\n        this.vehicleMesh.addChild(visualMesh);\n        this.vehicleMesh.rotate(new BABYLON.Vector3.Up(), -Math.PI/2);\n        this.altOffset = new BABYLON.Vector3(0,-2.3,0);\n        console.log(\"q\",this.vehicleMesh.physicsImpostor.physicsBody.quaternion);\n        this.vehicle.rotation = new YUKA.Quaternion(this.vehicleMesh.rotationQuaternion.x,this.vehicleMesh.rotationQuaternion.y,this.vehicleMesh.rotationQuaternion.z,this.vehicleMesh.rotationQuaternion.w);\n    }\n    update(){\n        \n        const delta = this.time.update().getDelta();\n        //console.log(\"entity\", entityManager.entities[0].velocity);\n        this.entityManager.update(delta);\n        //var vy = vehicleMesh.physicsImpostor.physicsBody.velocity.y\n        var vy = -(this.vehicleMesh.position.y+this.altOffset.y);\n        var meshVelocity = new BABYLON.Vector3(this.vehicle.velocity.x,vy,this.vehicle.velocity.z);\n        //var meshVelocity = new BABYLON.Vector3(-1,vy,0);//this.vehicle.velocity.x,vy,this.vehicle.velocity.z)\n        this.vehicleMesh.physicsImpostor.setLinearVelocity(meshVelocity);\n        this.vehicleMesh.physicsImpostor.physicsBody.angularVelocity = new CANNON.Vec3(0,0,0);\n        \n        var yukaRotation = this.vehicle.rotation;//.toEuler(new YUKA.Quaternion());\n        var rotC = new CANNON.Quaternion(yukaRotation.x, yukaRotation.y, yukaRotation.z,yukaRotation.w);\n        var rotE = new CANNON.Vec3();\n        var con = rotC.conjugate();\n        var rotated = con.mult(this.vehicleMesh.physicsImpostor.physicsBody.quaternion);\n        var res = new CANNON.Vec3();\n        rotated.toEuler(res);\n        //console.log(\"rot\",res );\n        this.vehicleMesh.physicsImpostor.physicsBody.angularVelocity = new CANNON.Vec3(0,-res.y/10,0);\n        \n    }\n    set pause(val){\n        this.vehicle.active = val;\n    }\n    get pause(){\n        return this.vehicle.active;\n    }\n}\n","//import * as BABYLON from \"@babylonjs/core\";\nimport * as BABYLON from 'babylonjs';\nimport 'babylonjs-loaders';\n//import 'babylonjs-materials';\n//import { ShadowOnlyMaterial } from \"babylonjs-materials\";\nimport * as Ammo from 'ammojs';\n//import * as CANNON from './cannon.js';\nimport * as CANNON from 'cannon';\n//import * as YUKA from 'yuka';\n\nimport SceneSubject from './SceneSubject';\nimport Airplane from './Airplane';\n//import { CarFromBoxesData, ThreeWheelCar } from './VehiclesData';\n//import VehicleAmmo from './VehicleAmmo';\nimport { AirplaneChassis, AirplaneFromMesh, AirplaneWW2} from './VehiclesData.js';\nimport DebugUI from './DebugUI.js';\nimport HudPanel from './Hud';\nimport {Clock} from './Clock';\nimport SkySim from './SkySimulator.js';\nimport OceanSim from './OceanSimulator.js';\nimport ShadowManager from './sahdowManager';\nimport Inspector from './instrumentation';\nimport Suspension from './Vehicle';\nimport Battleship from './BattleShip';\n\nconst DIR = {UP:1, DOWN:2,LEFT:3, RIGHT:4,  TILT_LEFT:5, TILT_RIGHT:6, BRAKE:7, LEFT_RESET:8, RIGHT_RESET:9, POWER_UP:10, POWER_DOWN:11, LEFT_HOLD:12, RIGHT_HOLD:13, UNBRAKE:14};\nclass vehicleParts{\n    constructor(){\n        this.bluePrint = null;\n        this.suspension = null;\n        this.avionics = null;\n        this.hud = null;\n        this.clock = new Clock();\n    }\n    set position(pos){\n        this.bluePrint.chassisMesh.setAbsolutePosition(pos);\n    }\n    get ready(){\n        return this.suspension!==null\n    }\n    \n    steer(dir){\n        switch(dir){\n            case DIR.UP:\n                //console.log(\"up\");\n                this.avionics.pitch = -1;\n                break;\n            case DIR.DOWN:\n                //console.log(\"up\");\n                this.avionics.pitch = 1;\n                break;\n            case DIR.LEFT:\n                //console.log(\"left\");\n                this.avionics.yaw = -1;\n                this.suspension.left(0.5);\n                break;\n            case DIR.RIGHT:\n                //console.log(\"right\");\n                this.avionics.yaw = 1;\n                this.suspension.right(0.5);\n                break;\n            case DIR.LEFT_RESET:\n                //console.log(\"left reset\");\n                this.suspension.left(0);\n                break;\n            case DIR.RIGHT_RESET:\n                //console.log(\"right reset\");\n                this.suspension.right(0);\n                break;\n            case DIR.LEFT_HOLD:\n                //console.log(\"left hold\");\n                this.avionics.yaw = -1;\n                break;\n            case DIR.RIGHT_HOLD:\n                //console.log(\"right hold\");\n                this.avionics.yaw = 1;\n                break;\n            case DIR.TILT_LEFT:\n                //console.log(\"tilt left\");\n                this.avionics.roll = -1;\n                break;\n            case DIR.TILT_RIGHT:\n                //console.log(\"tilt right\");\n                this.avionics.roll = 1;\n                break;\n            default:\n                console.log(\"vehicle invalid direction\");\n        }\n    }\n    power(val){\n        switch(val){\n            case DIR.POWER_UP:\n                //console.log(\"power up\");\n                this.avionics.enginePower = this.avionics.enginePower + 0.005;\n                this.avionics.speedModifier = 0.12;\n                break;\n            case DIR.POWER_DOWN:\n                //console.log(\"power down\");\n                this.avionics.enginePower = this.avionics.enginePower - 0.005;\n                break;\n            default:\n                console.log(\"vehicle invalid power\");\n        }\n    }\n    brake(val){\n        switch(val){\n            case DIR.BRAKE:\n                this.suspension.brake(5);\n                break;\n            case DIR.UNBRAKE:\n                this.suspension.unbrake();\n                break;\n            default:\n                console.log(\"vehicle invalid power\");\n        }\n    }\n\n    update(){\n        if(this.avionics!=null && this.hud!=null){ //console.error(\"airplane modlel mesh error\");\n            const elapsedTime = this.clock.getElapsedTime();\n            //console.log(elapsedTime);\n            this.hud.setRotation(new BABYLON.Vector3( 180 +BABYLON.Tools.ToDegrees(this.avionics.rotation.y),\n                                                -BABYLON.Tools.ToDegrees(this.avionics.rotation.x),\n                                                BABYLON.Tools.ToDegrees(this.avionics.rotation.z)));\n            this.hud.setSpeed(this.avionics.velocity.z);\n            this.hud.setPower(this.avionics.enginePower);\n            this.hud.setAltitude(this.avionics.collision.position.y);\n            this.hud.update(elapsedTime);\n        }//else {console.log(\"nohud\")}\n\n    }\n}\n\nexport default function canvas(canvas)  {\n    var preserveSize = true;\n\n    const screenDimensions = {\n        width: canvas.width,\n        height: canvas.height\n    }\n    \n    const mousePosition = {\n        x: 0,\n        y: 0\n    }\n    //const clock = new Clock();\n    const engine = new BABYLON.Engine(canvas, true, {preserveDrawingBuffer: true, stencil: true});\n    engine.loadingUIText = \"Loading world and airplane...\";\n    engine.loadingUIBackgroundColor = \"Purple\";\n    const scene = buildScene();\n    //const debugUI = null;//new Inspector(engine);\n    var sceneLoaded = false;\n    const physics = buildGravity();\n    const physicsViewer = new BABYLON.PhysicsViewer(scene);\n    const camera = followCameraCreate();//buildCamera(screenDimensions);//\n    const lights = buildLight(scene);\n    const worldSize = 800;\n    // yuka\n    var nimitzCarrier = null;\n\n\n    const sky = new SkySim(scene, lights.sunLight, lights.ambientlight, camera, worldSize);\n    sky.makeClouds(worldSize);\n\n    camera.maxZ = worldSize*1.4;\n    var ocean = null;//new OceanSim(scene, worldSize);\n    var ground = null;\n    var groundShadow = null;\n    groundShadow = new ShadowManager(lights.sunLight);\n    var inputMap = {};\n    const keys = [\"w\", \"s\", \"a\", \"d\", \"q\", \"e\", \"p\", \"o\", \"m\", \"n\", \"1\", \"2\", \"k\", \"b\"];\n    keys.forEach(key=>inputMap[key] = {type:false,keyState:\"up\"});\n\n    var assetsManager = new BABYLON.AssetsManager(scene);\n    var meshWorldTask = assetsManager.addMeshTask(\"world task\", \"\", process.env.PUBLIC_URL+\"/assets//\", \"achil_2.glb\");\n    var meshAirplaneTask = assetsManager.addMeshTask(\"airplane\", \"\", process.env.PUBLIC_URL+\"/assets/\", \"airplane-ww2-collision-scaled.glb\");\n    var meshCarrierTask = assetsManager.addMeshTask(\"nimitz\", \"\", process.env.PUBLIC_URL+\"/assets/\", \"nimitz_single_mesh.glb\");\n    meshWorldTask.onSuccess = function (task) {   \n        var meshAll = task.loadedMeshes;\n        meshAll[0].removeChild(meshAll[1]);\n        const ground = meshAll[1]; \n        ground.setParent(null);  \n        meshAll[0].dispose(); \n        ground.scaling = ground.scaling.multiplyByFloats(8,8,8); \n        ground.position.y = -1.2;\n        ground.name = \"terrain\";\n        /*ground.physicsImpostor = new BABYLON.PhysicsImpostor(\n            ground, BABYLON.PhysicsImpostor.MeshImpostor, { mass: 0, restitution: 0.3 }, scene\n        );*/\n        \n        //optimization\n        ground.material.freeze();\n        ground.freezeWorldMatrix();\n        ground.doNotSyncBoundingInfo = true;\n        groundShadow.addMesh(ground);\n        ground.receiveShadows = true;\n        console.log(\"world finished\");\n        \n    }\n    var aircraft = new vehicleParts();\n\n    meshAirplaneTask.onSuccess = function (task) {\n        aircraft.bluePrint = new AirplaneWW2(scene, task.loadedMeshes, new BABYLON.Vector3(275, 6.5, 364),new BABYLON.Vector3(0,-Math.PI/2,0));\n        aircraft.suspension = new Suspension(scene, aircraft.bluePrint);\n        aircraft.avionics = new Airplane(scene, aircraft.bluePrint.chassisBody, aircraft.bluePrint.controls);\n        aircraft.hud = new HudPanel(scene, canvas);\n        aircraft.hud.linkWithMesh(aircraft.bluePrint.chassisMesh); \n        camera.lockedTarget =  aircraft.bluePrint.chassisMesh; \n        aircraft.position = new BABYLON.Vector3(-10,5.7,-5);\n        groundShadow.addMesh(aircraft.bluePrint.visualMeshes[0]);\n\n        console.log(\"airplane finished\");\n    }\n    meshCarrierTask.onSuccess = function (task) {\n        var nimitzMesh = task.loadedMeshes[0];\n        nimitzCarrier = new Battleship(scene,nimitzMesh);\n    }\n\n    assetsManager.onFinish= function (task){\n        registerActions(scene);\n        ocean = new OceanSim(scene, worldSize);\n        sceneLoaded = true;\n        console.log(\"manager finished\");\n    }\n    assetsManager.load();\n\n    function buildScene() {  \n        // Create a basic BJS Scene object\n        const scene = new BABYLON.Scene(engine);\n        return scene;\n    }\n    function buildLight(scene){\n        // Light\n        var sunLight = new BABYLON.DirectionalLight(\"light\", new BABYLON.Vector3(0.7, -0.3, 0.7), scene);\n        sunLight.position = new BABYLON.Vector3(50,100,100);//new BABYLON.Vector3(0, 50, 0);\n        sunLight.intensity = 2.3;\n        sunLight.setEnabled(true);   \n\n        var ambientlight = new BABYLON.HemisphericLight(\"ambient\", new BABYLON.Vector3(-0.7, 0.3, -0.7), scene);\n        ambientlight.position = new BABYLON.Vector3(0, 55, 5);\n        ambientlight.intensity =0.8;\n        ambientlight.diffuse = new BABYLON.Color3(0.96, 0.97, 0.93);\n        ambientlight.groundColor = new BABYLON.Color3(0.1, 0.1, 0.1);\n        ambientlight.setEnabled(true);\n\n        return {sunLight, ambientlight};\n    }\n\n    function buildGravity() {\n        var gravityVector = new BABYLON.Vector3(0,-9.81, 0);\n        //var physicsPlugin = new BABYLON.AmmoJSPlugin(undefined, Ammo, undefined);\n        //var physicsPlugin = new BABYLON.AmmoJSPlugin(false, Ammo, undefined);\n        //physicsPlugin.setTimeStep(16);\n        \n        //physicsPlugin.setTimeStep(1/10);\n        var physicsPlugin = new BABYLON.CannonJSPlugin(false,undefined,CANNON);\n        scene.enablePhysics(gravityVector, physicsPlugin);\n        var physicsEngine = scene.getPhysicsEngine();\n        scene.physicsEnabled = false;\n        //physicsEngine.setSubTimeStep(1);\n\n        return physicsPlugin;\n    }\n\n    function followCameraCreate(mesh){\n        var followCamera = new BABYLON.FollowCamera(\"followcamera\", new BABYLON.Vector3(0,0,-100), scene);\n        followCamera.heightOffset = 1;\n        //followCamera.rotationOffset = 180;\n        followCamera.cameraAcceleration = 0.05   ;//0.06 \n        followCamera.maxCameraSpeed = 1800;//1800\n        followCamera.inertia = 20.0;//20\n        followCamera.radius = -5;\n        //followCamera.lockedTarget = mesh;\n        followCamera.attachControl(canvas, false);\n        \n        scene.activeCamera = followCamera;\n        return followCamera;\n    }\n    function firstPersonCamera(mesh){\n        var targetCam = new BABYLON.TargetCamera(\"playerCamera\", new BABYLON.Vector3(0, 2, -5), scene);\n        targetCam.parent = mesh;\n        scene.activeCamera = targetCam;\n    }\n\n    function createSceneSubjects(scene) {\n        const sceneSubjects = new SceneSubject(scene);\n        return sceneSubjects;\n    }\n\n    function registerActions(scene){\n        // Keyboard events\n        scene.actionManager = new BABYLON.ActionManager(scene);\n        scene.actionManager.registerAction(new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnKeyDownTrigger, function (evt) {\n            if(inputMap[evt.sourceEvent.key]) inputMap[evt.sourceEvent.key].type=evt.sourceEvent.type === \"keydown\";// evt.sourceEvent.type == \"keydown\";//{key: evt.sourceEvent.type == \"keydown\", trigger:true};// +(evt.sourceEvent.type == \"keydown\")+(inputMap[evt.sourceEvent.key]==1);//\n        }));\n        scene.actionManager.registerAction(new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnKeyUpTrigger, function (evt) {\n            if(inputMap[evt.sourceEvent.key]) inputMap[evt.sourceEvent.key].type= false;//if(inputMap[evt.sourceEvent.key]) inputMap[evt.sourceEvent.key] = {type:false,keyState:\"up\"};//+(evt.sourceEvent.type == \"keydown\");//-(inputMap[evt.sourceEvent.key]==1);//evt.sourceEvent.type == \"keydown\";//{key: evt.sourceEvent.type == \"keydown\", trigger:true};\n        }));\n\n    }\n    function actions(){\n        if(aircraft.ready){\n            keyAction(\"q\", ()=>aircraft.steer(DIR.TILT_LEFT));\n            keyAction(\"e\", ()=>aircraft.steer(DIR.TILT_RIGHT));\n            keyAction(\"w\", ()=>aircraft.steer(DIR.DOWN));\n            keyAction(\"s\", ()=>aircraft.steer(DIR.UP));\n            keyActionTrig(\"d\", ()=>aircraft.steer(DIR.LEFT),\n                               ()=>aircraft.steer(DIR.LEFT_RESET),\n                               ()=>aircraft.steer(DIR.LEFT_HOLD));\n            keyActionTrig(\"a\", ()=>aircraft.steer(DIR.RIGHT),\n                               ()=>aircraft.steer(DIR.RIGHT_RESET),\n                               ()=>aircraft.steer(DIR.RIGHT_HOLD));   \n            keyAction(\"m\", ()=>aircraft.power(DIR.POWER_UP));    \n            keyAction(\"n\", ()=>aircraft.power(DIR.POWER_DOWN));     \n            keyActionTrig(\"b\", ()=> aircraft.brake(DIR.BRAKE),\n                               ()=> aircraft.brake(DIR.UNBRAKE),\n                               ()=> aircraft.brake(DIR.BRAKE));   \n        }\n\n        keyActionTrig(\"o\", ()=> scene.debugLayer.show());\n        keyActionTrig(\"1\", ()=> {\n            sky.transitionSunInclination(0.025);\n            groundShadow.updateOnce();\n        });\n        keyActionTrig(\"2\",()=> {\n            sky.transitionSunInclination(-0.025);\n            groundShadow.updateOnce();\n        });\n        keyActionTrig(\"p\", ()=> {\n            scene.physicsEnabled = !scene.physicsEnabled;\n            nimitzCarrier.pause = scene.physicsEnabled;\n        });\n        \n        //keyActionTrig(\"k\", ()=> console.log(\"down\"));//, x=>console.log(\"hold\"));\n            \n    }\n\n    function keyAction(key, onKeyFunc ){//= () => {}\n        if(inputMap[key].type) {\n            onKeyFunc();\n        }\n    }\n\n    function keyActionTrig(key, onKeyDownFunc = () => {},onKeyUpFunc = () => {}, onKeyHoldFunc = () => {} ){\n        if(inputMap[key].type) {\n            if(inputMap[key].keyState == \"up\") {\n                inputMap[key].keyState = \"down\"; \n                onKeyDownFunc();\n            }\n            else {\n                inputMap[key].keyState = \"hold\";\n                onKeyHoldFunc();\n            }\n        }else{\n            if(inputMap[key].keyState != \"up\") {\n                inputMap[key].keyState = \"up\";\n                onKeyUpFunc();\n            }\n            \n        }\n    \n    }\n\n    function update() {\n\n    }\n\n    function onWindowResize() {\n        engine.resize();\n    }\n\n    function animate(){\n        //assetsManager.onFinish = function (tasks) {\n            engine.runRenderLoop(function () {\n                if (sceneLoaded){\n                    actions();\n                    aircraft.update();\n                    nimitzCarrier.update();\n                    //if (debugUI) debugUI.update();\n                    scene.render();\n                }\n            });\n        //}\n    }\n\n    function onMouseMove(x, y) {\n\n    }\n    return {\n        update,\n        onWindowResize,\n        onMouseMove,\n        animate\n    }\n}\n","import SceneManager from './SceneManager';\n\nexport default container => {\n    let canvasHalfWidth;\n    let canvasHalfHeight;\n    const canvas = createCanvas(document, container);\n    canvas.style.width = '100%';\n    canvas.style.height= '100%';\n    canvas.width  = canvas.offsetWidth;\n    canvas.height = canvas.offsetHeight;\n    const sceneManager = new SceneManager(canvas);\n    \n    bindEventListeners();\n    resizeCanvas();\n    sceneManager.animate();\n     \n    function createCanvas(document, container) {\n        const canvas = document.createElement(\"canvas\");    \n        container.appendChild(canvas);   \n        return canvas;\n    }\n\n    function bindEventListeners() {\n        window.onresize = resizeCanvas;\n        resizeCanvas();\t\n    }\n\n    function resizeCanvas() {        \n        canvas.style.width = '100%';\n        canvas.style.height= '100%';\n        canvas.width  = canvas.offsetWidth;\n        canvas.height = canvas.offsetHeight;\n\n        canvasHalfWidth = Math.round(canvas.offsetWidth/2);\n        canvasHalfHeight = Math.round(canvas.offsetHeight/2);\n\n        sceneManager.onWindowResize();\n    }\n\n}\n","import React, { Component } from 'react';\n\nimport threeEntryPoint from \"./babylonjs/babylonEntryPoint\"\nimport \"./viewer.css\"\n\nexport default class Viewer extends Component {\n    \n    componentDidMount() {\n        threeEntryPoint(this.threeRootElement);\n    }\n\n    render () {\n        return (\n            <div className=\"viewer-viewer\" ref={element => this.threeRootElement = element} />\n        );\n    }\n}","import './App.css';\nimport Viewer from './Components/Viewer/Viewer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Viewer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}