{"version":3,"sources":["Components/Viewer/babylonjs/utils/Clock.js","Components/Viewer/babylonjs/scenery/SkySimulator.js","Components/Viewer/babylonjs/scenery/OceanSimulator.js","Components/Viewer/babylonjs/scenery/sahdowManager.js","Components/Viewer/babylonjs/props/BattleShip.js","Components/Viewer/babylonjs/props/Airship.js","Components/Viewer/babylonjs/props/Birds.js","Components/Viewer/babylonjs/props/VehiclesData.js","Components/Viewer/babylonjs/hud/GuiHudControls.js","Components/Viewer/babylonjs/hud/HudControls.js","Components/Viewer/babylonjs/hud/Hud.js","Components/Viewer/babylonjs/props/Airplane.js","Components/Viewer/babylonjs/utils/CannonUtils.js","Components/Viewer/babylonjs/props/Vehicle.js","Components/Viewer/babylonjs/props/VehicleComponents.js","Components/Viewer/babylonjs/utils/instrumentation.js","Components/Viewer/babylonjs/ecs/ecs.js","Components/Viewer/babylonjs/SceneManager.js","Components/Viewer/babylonjs/babylonEntryPoint.js","Components/Viewer/Viewer.js","App.js","reportWebVitals.js","index.js"],"names":["Clock","autoStart","this","startTime","oldTime","elapsedTime","running","now","getElapsedTime","getDelta","interval","diff","start","newTime","performance","Date","skySim","scene","sunLight","ambientLight","followCam","size","skyboxMaterial","SkyMaterial","backFaceCulling","distance","turbidity","inclination","alpha","alphaMode","luminance","offset","skybox","BABYLON","CreateBox","width","depth","height","material","position","y","cloudMaterial","cloudTexture","process","diffuseTexture","twoSidedLighting","hasAlpha","emissiveColor","specularColor","faceUV","Array","cloudBoxSizeMult","cloudOptions","wrap","cloudBox","calcRaylight","rayligh","convertRange","Math","abs","rayleigh","getLightDirection","dirNorm","copyFrom","sunPosition","console","log","normalize","move","cameraOffset","value","r1","r2","transitionSunInclination","limit","azimuth","update","time","getSkyMesh","useSunPosition","camWaterMask","maskProjectionCam","gmat","createMaskMaterial","ocean","checkDepthMapCreated","_currentRefreshId","ProceduralHeightMap","window","setTimeout","getMesh","setPosition","wsize","sdfRes","getSize","sdfTexture","generateDistanceField","flowHeight","distortionFlow","water","CreateGround","subdivisions","CustomMaterial","bumpTexture","_texture","baseWidth","wrapU","wrapV","setVector2","setTexture","refreshRate","level","vScale","uScale","specularPower","waterColorTexture","generateShallowWaterGradient","receiveShadows","res","occlusionTexture","iter1","uid","iter","toFixed","toString","ShadersStore","texture","setFloat","depfthField","clipDepth","deepColor","shallowColor","clip","setColor3","wspeed","speed","onGeneratedObservable","add","_time","waveNoiseTexture","params","cameraOrth","setTarget","Zero","cameraZoom","mode","ORTHOGRAPHIC_CAMERA","orthoTop","orthoBottom","orthoLeft","orthoRight","minZ","maxZ","depthMap","enableDepthRenderer","getDepthMap","scale","_refreshRate","groundMat","copyFromFloats","dispose","shadowlight","groundshadowGenerator","light","camera","csmShadowGenerator","forceBackFacesOnly","filteringQuality","QUALITY_MEDIUM","lambda","shadowMaxZ","cascadeBlendPercentage","depthClamp","splitFrustum","cascadingShadowGenerator","updateOnce","addMesh","mesh","getShadowMap","renderList","push","BattleShip","visualMesh","options","initPosition","vehicleMesh","GridMaterial","z","x","physicsImpostor","BoxImpostor","mass","friction","restitution","isVisible","entityManager","YUKA","vehicle","maxSpeed","path","loop","copy","current","active","followPathBehavior","steering","onPathBehavior","_waypoints","debug","CreateLines","points","updatable","color","Teal","addChild","rotate","Up","PI","altOffset","rotation","rotationQuaternion","w","delta","vy","meshVelocity","velocity","setLinearVelocity","physicsBody","angularVelocity","CANNON","rotC","rotated","conjugate","mult","quaternion","toEuler","val","Airship","offsetPosition","addInPlace","yukaOffset","scaling","inverse","localPositionOfLimitBox","LimitBoxBehavior","limitBox","brakingWeight","dBoxMinLength","force","worldMatrix","getInverse","getSpeed","applyMatrix4","vehicleSphereDitsance","boundingRadius","length","multiplier","applyRotation","json","Birds","meshes","entityMatrix","pos","mesh1","meshMat","disableLighting","Red","wireframe","visibility","getBoundingInfo","boundingSphere","radius","setupLimitBox","alignmentBehavior","cohesionBehavior","separationBehavior","weight","enemy","forEach","updateNeighborhood","neighborhoodRadius","setRenderComponent","sync","smoother","random","wanderBehavior","LimitBehavior","fleeBehavior","entities","entity","renderComponent","prototype","calculate","targetWorld","jitterThisTimeSlice","jitter","randomDisplacement","randFloat","_targetLocal","multiplyScalar","subVectors","AirplaneWW2","meshAll","eulerRotation","error","translate","WORLD","multiplyByFloats","massOffset","settings","suspensionStiffness","suspensionDamping","suspensionCompression","suspensionRestLength","rollInfluence","rearWheelSettings","wheelsMesh","m","removeChild","wheels","isFront","chassis","name","box","myMaterial","diffuseColor","makebox","subtractInPlace","toQuaternion","visualMeshes","vm","freeze","controls","rotor","rudder","leftAileron","rightAileron","leftElevator","rightElevator","Object","values","chassisBody","createBody","powerWheelsIndex","steeringWheelsIndex","brakeWheelsIndex","chassisMesh","world","getPhysicsEngine","getPhysicsPlugin","initRotation","addBody","that","registerBeforeRender","oldRoot","newRoot","impostorType","coliderMeshesBox","cm","impostor","reparent","checkCollisions","parent","createPhysicsImpostor","chassisShape","mat","addShape","angularDamping","_scene","_chassisMesh","_wheelsMesh","_powerWheelsIndex","_steeringWheelsIndex","_brakeWheelsIndex","s","indices","getAbsoluteSize","__size","bounds","minimum","maximum","hudControl","bm","_x","_y","lineWidth","globalLineWidth","_fontSize","localLineWidth","hudSimpleText","fontSize","txt","font","textAlign","fillText","range","end","inc","fill","map","_","idx","limitCompass","limitPitchLadder","rangeClip","rangeArray","compass","tickSpace","_range","middle","tilt","tickHeight","floor","angle","rangeScale","tiltFloor","tiltRemd","tiltRemdHalf","scaleVals","beginPath","space","spaceHalf","moveTo","lineTo","closePath","stroke","pitchLader","rot","middleOffset","save","sign","setLineDash","restore","hudPanel","canvas","then","angles","altitude","power","style","drawCanvas","document","createElement","ctx","getContext","fillStyle","strokeStyle","hudElements","HUD2D","emissiveTexture","hudMesh","CreatePlane","draw","clearRect","text","linkWithMesh","linkWithCamera","cam","lockToCamera","lockedTarget","setRotation","eulerAngles","setSpeed","setAltitude","a","setPower","p","vmult","v","q","target","qx","qy","qz","qw","ix","iy","iz","iw","applyLocalForce","localForce","localPoint","body","AirplaneCannon","_lift","_roll","_rollLimit","_yaw","_yawLimit","_pitch","_pitchLimit","_velocity","_currentSpeed","_enginePower","_enginePowerLimit","enginePowerPrev","speedModifier","collision","_relativeBody","_isTouchingGround","addAnimations","animationGroup","play","speedRatio","controlsInitialize","registerForces","Inverse","toEulerAngles","touching","animWheel","ANIMATIONTYPE_FLOAT","ANIMATIONLOOPMODE_CYCLE","wheelKeys","frame","setKeys","animations","addTargetedAnimation","rotorSpin","rudderZeroRotation","leftAileronZeroRotation","rightAileronZeroRotation","leftElevatorZeroRotation","rightElevatorZeroRotation","set","Left","lift","enginePower","dir","pitchForce","YawForce","aileronControl","roll","rudderControl","yaw","elevatorControl","pitch","onBeforeRenderObservable","applyRollForce","applyPitchYawForce","applyDragForce","applyLiftForce","applyThrustForce","propellerSpeedUpdate","resetControls","CannonUtils","cannonVector","babylonVector","cannonQuat","babylonQuat","Vehicle","carData","wheelMeshes","powerWheels","steeringwheels","breakWheels","carDataBody","carDataWheelBodies","wheelBodies","createVehicle","directionLocal","frictionSlip","dampingRelaxation","dampingCompression","maxSuspensionForce","axleLocal","chassisConnectionPointLocal","maxSuspensionTravel","customSlidingRotationalSpeed","useCustomSlidingRotationalSpeed","indexUpAxis","indexRightAxis","indexForwardAxis","wheel","index","babylon2cannonVec3","addWheel","addToWorld","i","wheelInfos","updateWheelTransform","t","worldTransform","cannon2babylonVec3","cannon2babylonQuat","applyEngineForce","setSteeringValue","setBrake","vehicleParts","bluePrint","suspension","avionics","hud","clock","setAbsolutePosition","DIR","UP","DOWN","LEFT","left","RIGHT","right","LEFT_RESET","RIGHT_RESET","LEFT_HOLD","RIGHT_HOLD","TILT_LEFT","TILT_RIGHT","POWER_UP","POWER_DOWN","BRAKE","brake","UNBRAKE","unbrake","ToDegrees","engine","advancedTexture","GUI","CreateFullscreenUI","stackPanel","addControl","verticalAlignment","VERTICAL_ALIGNMENT_BOTTOM","horizontalAlignment","HORIZONTAL_ALIGNMENT_RIGHT","isVertical","text1","getFps","ComponentBase","constructor","componentes","Scene","object","render","Camera","followCamera","heightOffset","cameraAcceleration","maxCameraSpeed","inertia","attachControl","activeCamera","Light","type","intensity","diffuse","groundColor","setEnabled","FromHexString","Physics","gravityVector","undefined","enablePhysics","physicsEnabled","setTimeStep","Box","Sky","SkySim","Ocean","OceanSim","Clouds","area","spriteManagerClouds","clouds","round","invertU","invertV","Keyboard","inputMap","key","keyState","onKeyFunc","onKeyDownFunc","onKeyUpFunc","onKeyHoldFunc","actionManager","registerAction","OnKeyDownTrigger","evt","sourceEvent","OnKeyUpTrigger","loadPromise","root","file","Promise","rej","LoadAssetContainer","container","Terrain","assets","shadowMesh","addAllToScene","Shadows","sun","ShadowManager","Airships","Ship","Battleship","gullModel","bakeCurrentTransformIntoVertices","birds","gull","createInstance","BirdFlock","Aircraft","Suspension","Airplane","HudPanel","DebugUi","Instrumentation","ShadowCasters","shadows","casters","c","KeyboardGameStateInteraction","keyboard","actors","keyActionTrig","debugLayer","show","pause","KeyboardCameraInteraction","KeyboardSkyInteraction","sky","ambient","ref","direction","setLightDirection","KeyboardAirplaneInteraction","airplane","keyAction","steer","AirplaneBirdsInteraction","enemyPosition","fpcClock","components","preserveDrawingBuffer","stencil","loadingUIText","loadingUIBackgroundColor","sceneEnt","physicsEnt","light_sun","light_ambient","cameraEnt","terrain","nimitz","zeppelin","birdflock","debugUI","keyboardCameraActions","shadowCasters","keyboardSkyActions","keyboardStateActions","keyboardAirplaneActions","airplaneBirdsInteractions","component","init","onWindowResize","resize","animate","runRenderLoop","timeIntervalCheck","Viewer","appendChild","createCanvas","offsetWidth","offsetHeight","sceneManager","SceneManager","resizeCanvas","onresize","threeEntryPoint","threeRootElement","className","element","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.396aa419.chunk.js","sourcesContent":["class Clock {\n\n\tconstructor( autoStart = true ) {\n\n\t\tthis.autoStart = autoStart;\n\n\t\tthis.startTime = 0;\n\t\tthis.oldTime = 0;\n\t\tthis.elapsedTime = 0;\n\n\t\tthis.running = false;\n\n\t}\n\n\tstart() {\n\n\t\tthis.startTime = now();\n\n\t\tthis.oldTime = this.startTime;\n\t\tthis.elapsedTime = 0;\n\t\tthis.running = true;\n\n\t}\n\n\tstop() {\n\n\t\tthis.getElapsedTime();\n\t\tthis.running = false;\n\t\tthis.autoStart = false;\n\n\t}\n\n\tgetElapsedTime() {\n\n\t\tthis.getDelta();\n\t\treturn this.elapsedTime;\n\n\t}\n\n\ttimeIntervalCheck(interval){\n\t\tif(this.getElapsedTime() >= interval){\n\t\t\tthis.elapsedTime = 0;\n\t\t\treturn true;\n\t\t}\n\t\telse return false;\n\n\t}\n\n\tgetDelta() {\n\n\t\tlet diff = 0;\n\n\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\tthis.start();\n\t\t\treturn 0;\n\n\t\t}\n\n\t\tif ( this.running ) {\n\n\t\t\tconst newTime = now();\n\n\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\tthis.oldTime = newTime;\n\n\t\t\tthis.elapsedTime += diff;\n\n\t\t}\n\n\t\treturn diff;\n\n\t}\n\n}\n\nfunction now() {\n\n\treturn ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732\n\n}\n\nexport { Clock };","import * as BABYLON from \"babylonjs\";\nimport { SkyMaterial } from \"babylonjs-materials\";\n /**    \n *  Simulates the sky with the sun \n * @param {BABYLON.Scene} scene      \n * @param {BABYLON.Light} sunLight\n * @param {BABYLON.Light} ambientLight  \n * @param {BABYLON.Camera} followCam \n * @param num size      \n */\nexport default function skySim(scene, sunLight, ambientLight, followCam, size = 10000){\n    var elapsed, now;\n    var then = 0;\n    var interval= 0.05;\n\n    //ambientLight.intensity = 2;\n    //ambientLight.diffuse = new BABYLON.Color3(0.96, 0.97, 0.93);\n\t//ambientLight.groundColor = new BABYLON.Color3(0, 0, 0);\n    //sunLight.intensity = 2;\n    \n\t// Sky material\n\tvar skyboxMaterial = new SkyMaterial(\"skyMaterial\", scene);\n    skyboxMaterial.backFaceCulling = false;\n    skyboxMaterial.distance = size/2;\n    skyboxMaterial.turbidity = 44;\n    skyboxMaterial.inclination = 0;\n    skyboxMaterial.alpha = 0.5;\n    skyboxMaterial.alphaMode = 1; \n    skyboxMaterial.luminance = 1.1;\n    const offset = 0;\n\t// Sky mesh (box)\n    var skybox = BABYLON.MeshBuilder.CreateBox(\"skyBox\", {width:size, depth:size, height:size}, scene);\n    skybox.material = skyboxMaterial;\n    skybox.position.y = size/3;\n\t//sunLight.position =  skyboxMaterial.sunPosition;\n\n    var cloudMaterial = new BABYLON.StandardMaterial(\"farClouds\", scene);\n    \n    //var cloudTexture = new BABYLON.Texture(\"https://raw.githubusercontent.com/kristosb/arfix/b958a70382ccbf86294af1540cd1608e1af1e161/arfix/public/assets/textures/Skies0362_3_masked_S.png\", scene);\n    var cloudTexture = new BABYLON.Texture(process.env.PUBLIC_URL+\"/assets/textures/Skies0362_3_masked_S.png\", scene);\n    cloudMaterial.diffuseTexture = cloudTexture;\n    cloudMaterial.backFaceCulling = false;\n    cloudMaterial.twoSidedLighting = true;\n    cloudMaterial.diffuseTexture.hasAlpha = true;\n    cloudMaterial.emissiveColor = new BABYLON.Color3(135/255, 123/255, 78/255);\n    cloudMaterial.specularColor = new BABYLON.Color3(46/255, 46/255, 39/255);\n    \n    var faceUV = new Array(6);\n\n    faceUV[0] = new BABYLON.Vector4(1, 0, 0, 1);\n    faceUV[1] = new BABYLON.Vector4(1, 0, 0, 1);\n    faceUV[2] = new BABYLON.Vector4(1, 0, 0, 1);\n    faceUV[3] = new BABYLON.Vector4(1, 0, 0, 1);\n    faceUV[4] = new BABYLON.Vector4(0, 0, 0, 0);\n    faceUV[5] = new BABYLON.Vector4(0, 0, 0, 0);\n    const cloudBoxSizeMult = (size/1024);\n    var cloudOptions = {\n        width: 1024*cloudBoxSizeMult+1,\n        height: 292*cloudBoxSizeMult+1,\n        depth: 1024*cloudBoxSizeMult+1,\n        wrap:true,\n        faceUV: faceUV\n    };\n    //console.log(\"cloud\",cloudOptions.width, cloudBoxSizeMult, size);\n    var cloudBox = BABYLON.MeshBuilder.CreateBox('farCloudsBox', cloudOptions, scene);\n    cloudBox.material = cloudMaterial;\n    cloudBox.position.y = 70;\n    skyboxMaterial.sunPosition = new BABYLON.Vector3(2.2628522245754007e-14, 153.0733729460359, -369.5518130045147);\n    skyboxMaterial.useSunPosition = false;\n    //transitionSunInclination(0);\n\n    function calcRaylight(){\n        var rayligh = convertRange(followCam.position.y,[60,500],[2,0])+convertRange(Math.abs(skyboxMaterial.inclination),[0,0.5],[0,2]);\n        if (rayligh>2) rayligh = 2;\n        if (rayligh<0) rayligh = 0;\n        skyboxMaterial.rayleigh = rayligh;\n    }\n    /*function setLightDirection(){\n        var dirNorm = new BABYLON.Vector3(0,0,0);\n        //console.log(\"inc\",skyboxMaterial.inclination);\n        skyboxMaterial.useSunPosition = false;\n        dirNorm.copyFrom(skyboxMaterial.sunPosition);\n        //dirNorm.subtractInPlace(new BABYLON.Vector3(0,400,0));\n        //console.log(\"dir\",dirNorm);\n        dirNorm.normalize();\n        //console.log(\"dirsub\",dirNorm);\n        ambientLight.direction.copyFromFloats(dirNorm.x, dirNorm.y, dirNorm.z);//copyFrom(dirNorm);\n        sunLight.direction.copyFromFloats(-dirNorm.x, -dirNorm.y, -dirNorm.z);\n        ambientLight.intensity = convertRange(Math.abs(skyboxMaterial.inclination),[0,0.5],[0.8,0.2]);\n        sunLight.intensity = convertRange(Math.abs(skyboxMaterial.inclination),[0,0.5],[2.3,1.4]);;\n        //if(dirNorm.y<0) ambientLight.intensity = 1; else ambientLight.intensity = 2;\n        console.log(sunLight.direction);\n    }*/ skyboxMaterial.sunPosition = new BABYLON.Vector3(2.2628522245754007e-14, 153.0733729460359, -369.5518130045147);\n    function getLightDirection(){\n        var dirNorm = new BABYLON.Vector3(0,0,0);//new BABYLON.Vector3(2.2628522245754007e-14, 153.0733729460359, -369.5518130045147);//\n        //console.log(\"inc\",skyboxMaterial.inclination);\n        //skyboxMaterial.useSunPosition = false;\n        dirNorm.copyFrom(skyboxMaterial.sunPosition);\n        //dirNorm.subtractInPlace(new BABYLON.Vector3(0,400,0));\n        \n        console.log(\"dir\",dirNorm);\n        dirNorm.normalize();\n        return dirNorm;\n    }\n    // evening  luminance =0.1 and decrease turbo = 5\n\tfunction move(){\n        skyboxMaterial.cameraOffset.y =  offset + followCam.position.y/10;\n        //console.log(\"offset\",skyboxMaterial.cameraOffset.y );\n        skyboxMaterial.turbidity  = convertRange(Math.abs(skyboxMaterial.inclination),[0,0.5],[44,2]);\n        calcRaylight();\n        \n    };\n    function convertRange( value, r1, r2 ) { \n        return ( value - r1[ 0 ] ) * ( r2[ 1 ] - r2[ 0 ] ) / ( r1[ 1 ] - r1[ 0 ] ) + r2[ 0 ];\n    }  \n    function transitionSunInclination( interval = 0.025){\n        const limit = 0.48;\n        skyboxMaterial.inclination += interval;\n        if (skyboxMaterial.inclination >= limit) skyboxMaterial.inclination = limit;\n        if (skyboxMaterial.inclination <= -limit) skyboxMaterial.inclination = -limit;\n        console.log(skyboxMaterial.inclination, skyboxMaterial.azimuth);\n        move();\n        //setLightDirection();\n    }\n    /*function makeClouds(area){\n        var spriteManagerClouds = new BABYLON.SpriteManager(\"cloudsManager\", \"http://www.babylonjs.com/Scenes/Clouds/cloud.png\", 1000, 256, scene);\n        //spriteManagerClouds.texture.\n        //spriteManagerClouds.blendMode\n        //BABYLON.Scalar.RandomRange(0.4, 1)\n        for (var i = 0; i < 100; i++) {\n              var clouds = new BABYLON.Sprite(\"clouds\", spriteManagerClouds);\n              //clouds.color = new BABYLON.Color3(0.87, 0.93, 0.91);\n              clouds.position.x = Math.random() * area - area/2;\n              clouds.position.y = Math.random() * 150 + 150;\n              clouds.position.z = Math.random() * area - area/2; \n              clouds.size = Math.random() * 60 +50;\n              if (Math.round(Math.random() * 5) === 0) {\n                  clouds.angle = Math.PI * 90 / 180;            \n              }\n          if (Math.round(Math.random() * 2) === 0) {\n            clouds.invertU = -1;\n          }\n          if (Math.round(Math.random() * 4) === 0) {\n            clouds.invertV = -1;\n          }\n          }\n    return spriteManagerClouds;\n    }*/\n    \n    function update(time) {\n       /* now = time;\n        elapsed = now - then;\n        if (elapsed > interval){\n            move();\n            //console.log(time);\n            then = now;\n        }*/\n    }\n    function getSkyMesh(){\n        return skybox;\n    }\n    return {\n        update,\n        transitionSunInclination,\n        //makeClouds,\n        getSkyMesh,\n        getLightDirection,\n        convertRange\n    }\n}\n","import * as BABYLON from 'babylonjs';\nimport { CustomMaterial } from \"babylonjs-materials\";\n\n /**    \n *  Simulates the oacean with moving waves\n * @param {BABYLON.Scene} scene      \n * @param num size      \n */\n /* export default function scene(scene, camera, size = 1024, ground) {\n\n\t// Water\n    // Our built-in 'ground' shape.\n    var waterMesh = BABYLON.MeshBuilder.CreateGround(\"water\", { width: size, height: size, subdivisions: 64 }, scene);\n    //waterMesh.scaling = new BABYLON.Vector3(size/2, 5, size/2);\n    //waterMesh.rotation.y = Math.PI*2;\n    //waterMesh.position.y = -10.8;\n    // stylized water shader\n    BABYLON.Effect.ShadersStore[\"customVertexShader\"]= \"\\r\\n\"+   \n    \"precision highp float;\\r\\n\"+\n\n    // Attributes\n    \"attribute vec3 position;\\r\\n\"+\n    \"attribute vec2 uv;\\r\\n\"+\n\n    // Uniforms\n    \"uniform mat4 worldViewProjection;\\r\\n\"+\n    \"uniform float time;\\r\\n\"+\n\n    // Varying\n    \"varying vec3 vPosition;\\r\\n\"+\n    \"varying vec4 vClipSpace;\\r\\n\"+\n\n    \"void main(void) {\\r\\n\"+\n        \"float scale = 1.0;\\r\\n\"+\n        // calc new position\n        \"float newY = 0.02*(sin(position.x * 1.0 / scale + time * 1.0));\\r\\n\"+\n        // new model position\n        \"vec3 newPositionM = vec3(position.x,newY,position.z);\\r\\n\"+\n        \"gl_Position = worldViewProjection * vec4(newPositionM, 1.0);\\r\\n\"+\n        //\"gl_Position = worldViewProjection * vec4(position, 1.0);\\r\\n\"+\n        // grab vertex position in world space\n        \"vPosition = position;\\r\\n\"+\n        // grab vertex position in view space\n        \"vClipSpace = gl_Position;\\r\\n\"+\n    \"}\\r\\n\";\n\n    BABYLON.Effect.ShadersStore[\"customFragmentShader\"]=\"\\r\\n\"+\n    \"precision highp float;\\r\\n\"+\n\n    // Varyings\n    \"varying vec3 vPosition;\\r\\n\"+\n    // world distance, camera to water\n    \"varying vec4 vClipSpace;\\r\\n\"+\n\n    // Uniforms\n    \"uniform sampler2D depthTex;\\r\\n\"+\n    \"uniform sampler2D refractionSampler;\\r\\n\"+\n    \"uniform float camMinZ;\\r\\n\"+\n    \"uniform float camMaxZ;\\r\\n\"+\n    \"uniform float maxDepth;\\r\\n\"+\n    // water colors\n    \"uniform vec4 wDeepColor;\\r\\n\"+\n    \"uniform vec4 wShallowColor;\\r\\n\"+\n    \"uniform float time;\\r\\n\"+\n    \"uniform float wNoiseScale;\\r\\n\"+\n    \"uniform float wNoiseOffset;\\r\\n\"+\n    \"uniform float fNoiseScale;\\r\\n\"+\n\n    \"float mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\\r\\n\"+\n    \"vec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\\r\\n\"+\n    \"vec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\\r\\n\"+\n\n    \"float noise(vec3 p){\\r\\n\"+\n        \"vec3 a = floor(p);\\r\\n\"+\n        \"vec3 d = p - a;\\r\\n\"+\n        \"d = d * d * (3.0 - 2.0 * d);\\r\\n\"+\n\n        \"vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\\r\\n\"+\n        \"vec4 k1 = perm(b.xyxy);\\r\\n\"+\n        \"vec4 k2 = perm(k1.xyxy + b.zzww);\\r\\n\"+\n\n        \"vec4 c = k2 + a.zzzz;\\r\\n\"+\n        \"vec4 k3 = perm(c);\\r\\n\"+\n        \"vec4 k4 = perm(c + 1.0);\\r\\n\"+\n\n        \"vec4 o1 = fract(k3 * (1.0 / 41.0));\\r\\n\"+\n        \"vec4 o2 = fract(k4 * (1.0 / 41.0));\\r\\n\"+\n\n        \"vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\\r\\n\"+\n        \"vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\\r\\n\"+\n\n        \"return o4.y * d.y + o4.x * (1.0 - d.y);\\r\\n\"+\n    \"}\\r\\n\"+\n\n    \"void main(void) {\\r\\n\"+\n        // init baseColor\n        \"vec4 baseColor = vec4(0.0);\\r\\n\"+\n        // generate noise value\n        \"float waveNoise = noise(vec3(0., time, 0.)+vPosition*wNoiseScale)*wNoiseOffset;\\r\\n\"+\n        // remap frag screen space coords to ndc (-1 to +1)\n        \"vec2 ndc = (vClipSpace.xy / vClipSpace.w) / 2.0 + 0.5;\\r\\n\"+\n        // grab depth value (0 to 1) at ndc for object behind water\n        \"float depthOfObjectBehindWater = texture2D(depthTex, vec2(ndc.x, ndc.y)+waveNoise).r;\\r\\n\"+\n        // get depth of water plane\n        \"float linearWaterDepth = (vClipSpace.z + camMinZ) / (camMaxZ + camMinZ);\\r\\n\"+\n        // calculate water depth scaled to camMaxZ since camMaxZ >> camMinZ\n        \"float waterDepth = camMaxZ*(depthOfObjectBehindWater - linearWaterDepth);\\r\\n\"+\n        // get water depth as a ratio of maxDepth\n        \"float wdepth = clamp((waterDepth/maxDepth), 0.0, 1.0);\\r\\n\"+\n        // mix water colors based on depth\n        \"baseColor = mix(wShallowColor, wDeepColor, wdepth);\\r\\n\"+\n        // mix colors with scene render\n        \"vec4 refractiveColor = texture2D(refractionSampler, vec2(ndc.x, ndc.y)+waveNoise);\\r\\n\"+\n        \"baseColor = mix(refractiveColor, baseColor, baseColor.a);\\r\\n\"+\n        // decide the amount of foam \n        \"float foam = 1.0-smoothstep(0.1, 0.2, wdepth);\\r\\n\"+\n        // make the foam effect using noise\n        \"float foamEffect = smoothstep( 0.1, 0.2, noise(vec3(0., time, 0.)+vPosition*fNoiseScale*0.3)*foam);\\r\\n\"+\n        \"baseColor.rgba += vec4(foamEffect);\\r\\n\"+\n        // final result\n        \"gl_FragColor = baseColor;\\r\\n\"+\n        \n    \"}\\r\\n\";\n\n    var shaderMaterial = new BABYLON.ShaderMaterial(\"shader\", scene, {vertex: \"custom\",fragment: \"custom\"},\n    {\n    attributes: [\"position\", \"normal\", \"uv\"],\n    uniforms: [\"world\", \"worldView\", \"worldViewProjection\", \"view\", \"projection\"],\n    });\n \n    // linear depth only!! I dun want to work with non-linear depth map!\n    var depthRenderer = scene.enableDepthRenderer(scene.activeCamera,false);\n    var depthTex = depthRenderer.getDepthMap();\n    depthTex.renderList = [ ground];\n    \n    var _refractionRTT = new BABYLON.RenderTargetTexture(\"water_refraction\", { width: 8, height: 8 }, scene, false, true);\n    _refractionRTT.wrapU = BABYLON.Constants.TEXTURE_MIRROR_ADDRESSMODE;\n    _refractionRTT.wrapV = BABYLON.Constants.TEXTURE_MIRROR_ADDRESSMODE;\n    _refractionRTT.ignoreCameraViewport = true;\n    _refractionRTT.renderList.push( ground);\n    _refractionRTT.refreshRate = 4;\n\n    scene.customRenderTargets.push(_refractionRTT);\n    \n    // set shader parameters\n    shaderMaterial.setTexture(\"depthTex\", depthTex);\n    shaderMaterial.setTexture(\"refractionSampler\", _refractionRTT);\n    shaderMaterial.setFloat(\"camMinZ\", scene.activeCamera.minZ);\n    shaderMaterial.setFloat(\"camMaxZ\", scene.activeCamera.maxZ);\n    shaderMaterial.setFloat(\"time\", 0);\n    shaderMaterial.setFloat(\"wNoiseScale\", 6.0);\n    shaderMaterial.setFloat(\"wNoiseOffset\", 0.01);\n    shaderMaterial.setFloat(\"fNoiseScale\", 10.0);\n    shaderMaterial.setFloat(\"maxDepth\", 0.5);\n    shaderMaterial.setVector4(\"wDeepColor\", new BABYLON.Vector4(0.0,0.2,0.5,0.8));\n    shaderMaterial.setVector4(\"wShallowColor\", new BABYLON.Vector4(0.3,0.4,0.8,0.5));\n\n    var time = 0;\n    scene.registerBeforeRender(function() {\n        time += scene.getEngine().getDeltaTime() * 0.001;\n        shaderMaterial.setFloat(\"time\", time);\n    });\n    \n    waterMesh.material = shaderMaterial;\n\n    waterMesh.receiveShadows = true;\n\n    function update(){\n\n    }\n    function setPosition(position){\n        waterMesh.position = position;\n    }\n    function addReflected(subject){\n        //water.addToRenderList(subject);\n    }\n    return {\n        update,\n        setPosition,\n        addReflected\n    }\n\n}*/\n\n/*  export default function scene(scene, camera, size = 1024) {\n\n\t// Water\n    // Our built-in 'ground' shape.\n    var waterMesh = BABYLON.MeshBuilder.CreateGround(\"water\", { width: 2, height: 2, subdivisions: 64 }, scene);\n    waterMesh.scaling = new BABYLON.Vector3(size/2, 5, size/2);\n    waterMesh.rotation.y = Math.PI*2;\n    //waterMesh.position.y = -10.8;\n\n    BABYLON.NodeMaterial.ParseFromSnippetAsync(\"#3FU5FG#1\", scene).then((mat) => {\n        waterMesh.material = mat;\n        //window.mat = mat;\n    });\n    let addPostEffects = ()=>{\n        var pipeline = new BABYLON.DefaultRenderingPipeline(\n            \"defaultPipeline\", // The name of the pipeline\n            false, // Do you want the pipeline to use HDR texture?\n            scene, // The scene instance\n            [camera] // The list of cameras to be attached to\n        );\n        pipeline.bloomEnabled   = false;\n\n        pipeline.grainEnabled = false;\n        pipeline.grain.animated = false;\n\n        pipeline.chromaticAberrationEnabled = false;\n\n        pipeline.sharpenEnabled = false;\n\n    }\n    addPostEffects();\n\n    waterMesh.receiveShadows = true;\n\n    function update(){\n\n    }\n    function setPosition(position){\n        waterMesh.position = position;\n    }\n    function addReflected(subject){\n        //water.addToRenderList(subject);\n    }\n    return {\n        update,\n        setPosition,\n        addReflected\n    }\n\n}*/\n\n/*export default function scene(scene, size = 1024) {\n\n\t// Water\n\tvar waterMesh = BABYLON.Mesh.CreateGround(\"waterMesh\", size, size, 16, scene, false);\n    waterMesh.receiveShadows = true;\n\tvar water = new WaterMaterial(\"water\", scene, new BABYLON.Vector2(1024, 1024));\n\twater.backFaceCulling = false;\n\twater.bumpTexture = new BABYLON.Texture(\"textures/waterbump.png\", scene);\n\twater.windForce = -10;\n\twater.waveHeight = 0.5;\n\twater.bumpHeight = 0.2;\n\twater.windDirection = new BABYLON.Vector2(1, 1);\n\twater.waterColor = new BABYLON.Color3(0, 0, 221 / 255);\n\twater.colorBlendFactor = 0.0;\n    water.alpha = 0.7;\n\t\n\twaterMesh.material = water;\n\n    function update(){\n\n    }\n    function setPosition(position){\n        waterMesh.position = position;\n    }\n    function addReflected(subject){\n        water.addToRenderList(subject);\n    }\n    return {\n        update,\n        setPosition,\n        addReflected\n    }\n\n}*/\n\nexport default function scene(scene, size = 1024) {\n    var camWaterMask = maskProjectionCam(scene,size);\n    var gmat = createMaskMaterial(scene, camWaterMask);\n    var ocean = null;\n    const checkDepthMapCreated = () => {\n        const ok = gmat.diffuseTexture._currentRefreshId !== -1;\n        if (!ok) {\n            window.setTimeout(checkDepthMapCreated, 10);\n        } else {\n            //var ocean = new BumpWaves(wsize, scene, gmat);\n            ocean = new ProceduralHeightMap(size, scene, gmat);\n        }\n    };\n\n    checkDepthMapCreated();\n\n\n    //var ocean = new ProceduralHeightMap(size, scene, gmat);\n    function update(){\n\n    }\n    function getMesh(){\n        return ocean;\n    }\n    function setPosition(position){\n        //waterMesh.position = position;\n    }\n\n    return {\n        update,\n        setPosition,\n        getMesh\n    }\n\n}\n\nclass ProceduralHeightMap{\n\n    constructor(wsize, scene, gmat){\n\n\n\n\n        let detail = 64;\n        let res = 512;\n\n        var sdfRes = gmat.diffuseTexture.getSize().width;\n        var sdfTexture = this.generateDistanceField(sdfRes, gmat.diffuseTexture, 24, scene);\n        let flowHeight = this.distortionFlow( 0.5, sdfRes, scene);\n        var water = BABYLON.MeshBuilder.CreateGround(\"waterMesh\", {width: wsize, height: wsize, subdivisions:4}, scene);\n        //water.convertToFlatShadedMesh();\n        water.material = new CustomMaterial('waterMaterial', scene);\n        water.material.backFaceCulling = false;\n        water.position.y  = 0;//55;\n        \n        let bumpTexture = new BABYLON.CustomProceduralTexture(\"waterBump\", 'height2Normal', flowHeight._texture.baseWidth, scene, false, true);\n        bumpTexture.wrapU = bumpTexture.wrapV = 1;\n        bumpTexture.setVector2('resolution', new BABYLON.Vector2(res,res));\n        bumpTexture.setTexture('textureSampler', flowHeight);\n        bumpTexture.refreshRate = 3;\n        bumpTexture.level = 0.5;\n        bumpTexture.vScale = 20;\n        bumpTexture.uScale = 20;\n        //bumpTexture.vScale = -1;\n        water.material.bumpTexture = bumpTexture;\n        water.material.specularPower = 60;\n        var waterColorTexture = this.generateShallowWaterGradient(sdfRes,sdfTexture,0.9,scene);\n        water.material.diffuseTexture = waterColorTexture;   \n        water.material.diffuseTexture.uScale = -1;\n        \n        water.receiveShadows = true;\n\n    }\n    \n    ///////////// SDF //////////\n    generateDistanceField(res,occlusionTexture, iter1 =24, scene){\n        var uid = Date.now();  \n        var iter =iter1.toFixed(1).toString();\n        //console.log(\"iter\",iter);\n        BABYLON.Effect.ShadersStore[uid+'SdfPixelShader'] = \n        `\n        varying vec2 vUV;\n        uniform sampler2D occlusionMap;\n        uniform float res;\n        \n        bool isIn(vec2 uv)\n        {\n            //vec4 texColor = texture(occlusionMap, uv);\n            float x = step(0.99,texture(occlusionMap, uv).r); //treshold the map\n            x = 1. -x;  //reverse color\n            //vec3 color = vec3(x,x,x);\n            if (x != 1.)\n                return false;\n            else\n                return true;\n        }\n\n        float squaredDistanceBetween(vec2 uv1, vec2 uv2)\n        {\n            vec2 delta = uv1 - uv2;\n            float dist = (delta.x * delta.x) + (delta.y * delta.y);\n            return dist;\n        }\n        void main(){\n            vec2 iResolution = vec2(res);\n            const float range = ${iter};\n            const int iRange = int(range);\n            float halfRange = range / 2.0;\n            vec2 startPosition = vec2(gl_FragCoord.x - halfRange, gl_FragCoord.y - halfRange);\n            bool fragIsIn = isIn(vUV);\n            float squaredDistanceToEdge = (halfRange*halfRange)*2.0;\n\n            if (!fragIsIn)\n                for(int dx=0; dx < iRange; dx++)\n                {\n                    for(int dy=0; dy < iRange; dy++)\n                    {\n                        vec2 scanPositionUV = startPosition + vec2(dx, dy);\n                        \n                        bool scanIsIn = isIn(scanPositionUV / iResolution.xy);\n                        if (scanIsIn != fragIsIn)\n                        {\n                            float scanDistance = squaredDistanceBetween(vec2(gl_FragCoord.x,gl_FragCoord.y), scanPositionUV);\n                            //float scanDistance = squaredDistanceBetween(gl_FragCoord, scanPositionUV);\n                            if (scanDistance < squaredDistanceToEdge)\n                                squaredDistanceToEdge = scanDistance;\n                        }\n                    }\n                }\n            float normalised = squaredDistanceToEdge / ((halfRange*halfRange)*2.0);\n            float distanceToEdge = sqrt(normalised);\n            if (fragIsIn)\n                distanceToEdge = -distanceToEdge ;\n            normalised = 0.5 - distanceToEdge;\n\n            gl_FragColor = vec4(normalised, normalised, normalised, 1.0);\n            /*float x = step(0.99,texture2D(occlusionMap, vUV).r); //treshold the map\n            x = 1. -x;  //reverse color\n            vec3 color = vec3(x,x,x);*/\n\n            //vec3 color = vec3(0.,1.,0.);\n            //gl_FragColor = vec4(color, 1.0);\n\n        }\n        `\n        let texture = new BABYLON.CustomProceduralTexture(uid+\"SdfDt\", uid+\"Sdf\", res , scene, false, false);\n        //texture.wrapU = texture.wrapV = 1;  \n        texture.refreshRate = 0;        \n        texture.setTexture('occlusionMap', occlusionTexture, scene);//params.flowMap)\n        texture.setFloat('res', res);\n        //texture.uScale = 1;\n        //texture.vScale = 1;\n\n        return texture\n    }\n\n    /////////// SDF END /////\n\n    ///////////shallow water map /////\n    generateShallowWaterGradient(res, depfthField,clipDepth=0.5, scene){\n        var uid = Date.now();  \n        var deepColor = new BABYLON.Color3(0.13, 0.27, 0.57);// new BABYLON.Color3(0.05, 0.098, 0.168);//0.13, 0.27, 0.57); \n        var shallowColor = new BABYLON.Color3(0.02, 0.72, 0.77);//(0.1, 0.54, 0.68);;//new BABYLON.Color3(0.02, 0.72, 0.77);\n        var clip =clipDepth.toFixed(1).toString();\n        BABYLON.Effect.ShadersStore[uid+'ShallowWaterPixelShader'] = \n        `\n        varying vec2 vUV;\n        uniform sampler2D depthField;\n        uniform float res;\n        uniform vec3 deep;\n        uniform vec3 shallow;\n        void main(){\n            vec2 iResolution = vec2(res);\n            float depth = smoothstep(0.,${clip},texture(depthField, vUV).r);\n            vec3 gradient = mix(deep,shallow, depth);\n            gl_FragColor = vec4(gradient,1.0);\n        }\n        `\n        let texture = new BABYLON.CustomProceduralTexture(uid+\"ShallowWaterDt\", uid+\"ShallowWater\", res , scene, false, false);\n        //texture.wrapU = texture.wrapV = 1;  \n        texture.refreshRate = 0;        \n        texture.setTexture('depthField', depfthField, scene);//params.flowMap)\n        texture.setFloat('res', res);\n        texture.setColor3('deep', deepColor);\n        texture.setColor3('shallow', shallowColor);\n        //texture.uScale = 1;\n        //texture.vScale = 1;\n        return texture\n    }\n/////////////\n\n    distortionFlow(wspeed, res, scene ){\n        var uid = Date.now()\n        //this.params = params\n         \n        var speed = wspeed.toFixed(1).toString();    \n        BABYLON.Effect.ShadersStore[uid+'DistortionFlowPixelShader'] = \n        `\n        varying vec2 vUV;\n        uniform sampler2D textureSampler;\n        //uniform sampler2D flowMap;\n        uniform float uTime;\n\n        vec2 flowUV (vec2 uv, float time) {\n            return uv + time;\n        }\n        //https://www.shadertoy.com/view/MtfBRN\n        void main(){\n            vec2 uv = vec2(vUV.x,-vUV.y);\n            float intensity = ${speed};\n            float timescale = uTime *.0174;\n            //vec2 distortion = (texture2D(flowMap, -uv).rg -1.3) * intensity;\n            float flow_t0 = fract(timescale);\n            float flow_t1 = fract(timescale + .5);\n            float alternate = abs((flow_t0 -.5) * 10.);\n\n            vec4 samp0 = texture2D(textureSampler, uv + flow_t0); \n            vec4 samp1 = texture2D(textureSampler, uv - flow_t1); \n            vec4 Flow = mix(samp0, samp1, alternate);\n            gl_FragColor = vec4(1.,Flow.g,1.,1.);\n        }\n        `\n        let texture = new BABYLON.CustomProceduralTexture(uid+\"DistortionFlowDt\", uid+\"DistortionFlow\", res || 256, scene, false, false)\n        texture.wrapU = texture.wrapV = 1;  \n        texture.refreshRate = 3;        \n\n        texture.onGeneratedObservable.add(()=>{           \n            texture.setFloat('uTime', texture._time)\n        })\n\n        texture.setFloat('uTime', 0); //Must do this or it wont update later on Genderated. \n        //waveTexture.uAng = Math.PI/2;\n        //waveTexture.wAng = Math.PI/2;\n        var waveNoiseTexture = new BABYLON.Texture(\"https://raw.githubusercontent.com/kristosb/assets/main/WavesDt.png\");\n\n        texture.setTexture('textureSampler', waveNoiseTexture);\n        texture.uScale = 1\n        texture.vScale = 1\n\n        return texture\n    }\n////////////\n    get scene(){\n        return this.params.scene\n    }\n\n    get res(){\n        return this.params.res\n    }\n\n}\n\n\nBABYLON.Effect.ShadersStore['height2NormalPixelShader']  =\n`varying vec2 vUV;\nuniform vec2 resolution;\nuniform sampler2D textureSampler;\n\nvoid main(){\n    vec2 unit = vec2(1.0)/resolution*2.;\n    float x = ((texture2D(textureSampler, vUV+(unit*vec2(-1.,0.))).g-texture2D(textureSampler, vUV+(unit*vec2(1.,0.))).g)+1.)*0.5;\n    float y = ((texture2D(textureSampler, vUV+(unit*vec2(0.,1.))).g-texture2D(textureSampler, vUV+(unit*vec2(0.,-1.))).g)+1.)*0.5;\n    float a = 1.;//texture(textureSampler, vUV).r;\n\n#if defined(invertDepth)\n    \tgl_FragColor = vec4(x, y, 1.0, a);\n#else\n\tgl_FragColor = vec4(1.0-x, y, 1.0, a);\n#endif\n\n}`;\n\nfunction subjectMeshes(scene,wsize){\n    var cube = BABYLON.MeshBuilder.CreateBox(\"Cube\", {size:wsize/4}, scene);\n    cube.position.copyFromFloats(wsize/4, wsize/8, wsize/4);\n    var sphere = BABYLON.MeshBuilder.CreateSphere(\"Ball\", {diameter:wsize/4}, scene);\n    sphere.position.copyFromFloats(wsize/4, -2+ wsize/8, -wsize/4);\n    sphere.material = new BABYLON.SimpleMaterial(\"sp\",scene);\n    //sphere.material.wireframe = true;\n    //sphere.material.alpha = 0.9;\n    var torus = BABYLON.MeshBuilder.CreateTorus(\"Torus\", { thickness:wsize/10, diameter: wsize/4}, scene);\n    torus.position.copyFromFloats(-wsize/4, wsize/20, wsize/4);\n    var cylinder = BABYLON.MeshBuilder.CreateCylinder(\"Cyclinder\", {diameter:wsize/4}, scene);\n    cylinder.position.copyFromFloats(-wsize/4, 1, -wsize/4);\n}\n\nfunction createGui(camWaterMask, wsize){\n    var displayFValue = function(value) {\n        return Math.floor(value * 10) / 10;\n    }\n    var frictionBox = function(value) {\n        camWaterMask.position.x = value\n        //console.log(\"value=\",value);\n    }\n    var advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\n\n    var selectFrictionBox = new BABYLON.GUI.SelectionPanel(\"spi\");\n    selectFrictionBox.width = 0.25;\n    selectFrictionBox.height = 0.25;\n    selectFrictionBox.background = \"#1388AF\";\n    selectFrictionBox.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\n    selectFrictionBox.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;\n\n    advancedTexture.addControl(selectFrictionBox);\n\n    var frictionGroup = new BABYLON.GUI.SliderGroup(\"orth cam pos\", \"S\");\n\tfrictionGroup.addSlider(\"x\", frictionBox, \"units\", -wsize/20, wsize/20, 0, displayFValue);\n    selectFrictionBox.addGroup(frictionGroup);\n}\n\nfunction maskProjectionCam(scene, size){\n    var zdist = -10;\n    var cameraOrth = new BABYLON.FreeCamera(\"camWaterMask\", new BABYLON.Vector3(0, zdist, 0), scene);\n    cameraOrth.setTarget(BABYLON.Vector3.Zero());\n    var cameraZoom  = size/2; \n    cameraOrth.mode = BABYLON.Camera.ORTHOGRAPHIC_CAMERA;\n    cameraOrth.orthoTop = cameraZoom ;\n    cameraOrth.orthoBottom = -cameraZoom;\n    cameraOrth.orthoLeft = -cameraZoom ;\n    cameraOrth.orthoRight = cameraZoom ;\n    cameraOrth.minZ = -zdist-2;\n    cameraOrth.maxZ = -zdist+5;\n    return cameraOrth\n}\nfunction createMaskMaterial(scene, camWaterMask){\n    var depthMap = scene.enableDepthRenderer(camWaterMask).getDepthMap();\n    depthMap.scale(0.2);    //reduce resolution\n    const size = depthMap.getSize();\n    depthMap._refreshRate = 0;\n    //console.log(size);\n    var groundMat = new BABYLON.StandardMaterial(\"waterOcclMask\", scene);\n    groundMat.diffuseTexture = depthMap;\n    groundMat.specularColor.copyFromFloats(0, 0, 0);\n\n    camWaterMask.dispose();\n    return groundMat;\n}","import * as BABYLON from 'babylonjs';\n\n/*export default function scene(shadowlight) {    \n    //var groundshadowGenerator = simpleShadowGenerator(shadowlight);\n    var groundshadowGenerator = cascadingShadowGenerator(shadowlight);\n\n    function ShadowGenerator(light, camera){\n        \n        //light.position = new BABYLON.Vector3(0, 1500, 0);\n        //light.diffuse = BABYLON.Color3.White();\n        //light.specular = new BABYLON.Color3(0.3, 0.3, 0.3);\n        //light.intensity = 1.0;\n\n        var shadowGeneratorDynamic = new BABYLON.ShadowGenerator(1024, light);\n        shadowGeneratorDynamic.usePercentageCloserFiltering = true;\n        shadowGeneratorDynamic.getShadowMap().renderList.push(torus);\n        return shadowGeneratorDynamic;\n    }\n    function updateOnce(){\n        //groundshadowGenerator.getShadowMap().refreshRate = BABYLON.RenderTargetTexture.REFRESHRATE_RENDER_ONCE;\n        //shadowlight.autoUpdateExtends = false;\n    }\n    function addMesh(mesh){\n        //groundshadowGenerator.getShadowMap().renderList.push(mesh);\n        //groundshadowGenerator.addShadowCaster(mesh);\n        //shadowGenerator.getShadowMap().renderList.push(torus);\n        //console.log(\"exist\",mesh);\n        groundshadowGenerator.getShadowMap().renderList.push(mesh);\n    }\n    return {\n        updateOnce,\n        addMesh\n    }\n}*/\n\nexport default function scene(shadowlight) {    \n    //var groundshadowGenerator = simpleShadowGenerator(shadowlight);\n    var groundshadowGenerator = cascadingShadowGenerator(shadowlight);\n\n    function simpleShadowGenerator(light){\n        var simpleShadows = new BABYLON.ShadowGenerator(1024, light);\n        //simpleShadows.getShadowMap().renderList.push(m1);\n        //simpleShadows.getShadowMap().renderList.push(m2);\n        simpleShadows.useBlurCloseExponentialShadowMap = true;\n        simpleShadows.getShadowMap().refreshRate = BABYLON.RenderTargetTexture.REFRESHRATE_RENDER_ONCE;\n        //light.autoUpdateExtends = true;\n        light.autoCalcShadowZBounds = true;\n        return simpleShadows;\n    }\n    function cascadingShadowGenerator(light, camera){\n        \n        light.position = new BABYLON.Vector3(0, 150, 0); //1500\n        //light.diffuse = BABYLON.Color3.White();\n        //light.specular = new BABYLON.Color3(0.3, 0.3, 0.3);\n        //light.intensity = 1.0;\n\n        var csmShadowGenerator = new BABYLON.CascadedShadowGenerator(1024, light);\n        //csmShadowGenerator.stabilizeCascades = true;\n        //csmShadowGenerator.forceBackFacesOnly = true;\n        //csmShadowGenerator.shadowMaxZ = 100;\n        //csmShadowGenerator.autoCalcDepthBounds = true;\n        //csmShadowGenerator.lambda = 0.5;\n        //csmShadowGenerator.depthClamp = true;\n        //csmShadowGenerator.penumbraDarkness = 0.8;\n        //csmShadowGenerator.usePercentageCloserFiltering = true;\n        //csmShadowGenerator.filteringQuality = BABYLON.ShadowGenerator.QUALITY_HIGH;\n        csmShadowGenerator.forceBackFacesOnly = true;\n        //csmShadowGenerator.numCascades = 2;\n        csmShadowGenerator.filteringQuality = BABYLON.ShadowGenerator.QUALITY_MEDIUM;\n\n        csmShadowGenerator.lambda = 1;     //0 -full lin, 1 full log\n        //csmShadowGenerator.shadowMaxZ = camera.maxZ;\n        csmShadowGenerator.shadowMaxZ = 500;\n        csmShadowGenerator.cascadeBlendPercentage = 0;\n        csmShadowGenerator.depthClamp = false;\n        csmShadowGenerator.splitFrustum();\n        //csmShadowGenerator.getShadowMap().refreshRate = BABYLON.RenderTargetTexture.REFRESHRATE_RENDER_ONEVERYTWOFRAMES;\n        //console.log(\"refresh\",csmShadowGenerator.getShadowMap().refreshRate);\n        return csmShadowGenerator;\n    }\n    function updateOnce(){\n        //groundshadowGenerator.getShadowMap().refreshRate = BABYLON.RenderTargetTexture.REFRESHRATE_RENDER_ONCE;\n        //shadowlight.autoUpdateExtends = false;\n    }\n    function addMesh(mesh){\n        //groundshadowGenerator.getShadowMap().renderList.push(mesh);\n        //groundshadowGenerator.addShadowCaster(mesh);\n        //shadowGenerator.getShadowMap().renderList.push(torus);\n        //console.log(\"exist\",mesh);\n        groundshadowGenerator.getShadowMap().renderList.push(mesh);\n    }\n    return {\n        updateOnce,\n        addMesh\n    }\n}\n\n\n","import * as BABYLON from 'babylonjs';\nimport * as YUKA from 'yuka';\nimport * as CANNON from 'cannon';\nimport { GridMaterial} from 'babylonjs-materials';\n\nexport default class BattleShip {\n    /**    \n     * Projects a point to a plane along a ray starting from the camera origin and directed towards the point. \n     * @param {BABYLON.Scene} scene      \n     * @param {BABYLON.Mesh} visualMesh \n     *    \n     */\n    constructor(scene, visualMesh,options){\n        options = options || {};\n        var initPosition = new BABYLON.Vector3(260, 4, 350);\n        this.vehicleMesh = BABYLON.MeshBuilder.CreateBox(\"yukaMeshShip\",{width:12, height:3, depth:54},scene);\n        /*var groundMat = new BABYLON.StandardMaterial(\"groundMat\", scene);\n        groundMat.specularColor = new BABYLON.Color3(0, 0, 0);\n        groundMat.diffuseColor = new BABYLON.Color3(0.29, 0.26, 0.26);\n        groundMat.backFaceCulling = false;*/\n        this.vehicleMesh.material = new GridMaterial(\"groundMaterial\", scene);//groundMat;\n        this.vehicleMesh.position.copyFrom(initPosition);\n        this.vehicleMesh.position.z +=14;\n        this.vehicleMesh.position.x -=4.3;\n        this.vehicleMesh.physicsImpostor = new BABYLON.PhysicsImpostor(this.vehicleMesh, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 100000, friction: 1, restitution: 0.9 }, scene);\n        this.vehicleMesh.isVisible = false;\n        //console.log(this.vehicleMesh.physicsImpostor.physicsBody.angularVelocity);\n        this.entityManager = new YUKA.EntityManager();\n        this.time = new YUKA.Time();\n        this.vehicle = new YUKA.Vehicle();\n        this.vehicle.maxSpeed = 1;\n        this.vehicle.mass = 0.1;\n        //vehicle.maxSpeed = 2;\n        //vehicle.setRenderComponent(vehicleMesh, sync);\n        const path = new YUKA.Path();\n        path.loop = true;\n        path.add(new YUKA.Vector3(290, 0, 340));\n        path.add(new YUKA.Vector3(100, 0, 350));\n        path.add(new YUKA.Vector3(0, 0, 300));\n        path.add(new YUKA.Vector3(20, 0, 180));\n        path.add(new YUKA.Vector3(140, 0, 140));\n        path.add(new YUKA.Vector3(300, 0, 200));\n        \n        //path.add(new YUKA.Vector3(250, 0, 340));\n    \n        this.vehicle.position.copy(path.current());\n        this.vehicle.active = false;\n        const followPathBehavior = new YUKA.FollowPathBehavior(path, 20);\n        this.vehicle.steering.add(followPathBehavior);\n        this.onPathBehavior = new YUKA.OnPathBehavior(path);\n        this.vehicle.steering.add(this.onPathBehavior);\n        this.entityManager.add(this.vehicle);\n        \n        path._waypoints.push(path._waypoints[0]);\n\n        if(options.debug){\n        var lines = BABYLON.MeshBuilder.CreateLines('lines', {\n            points: path._waypoints,\n            updatable: true,\n        })\n        lines.color = BABYLON.Color3.Teal()\n        }\n        this.onPathBehavior.active = false;\n        //onPathBehavior.radius = 10;\n        this.entityManager.update(this.time.update().getDelta())\n\n       // var visualMesh = BABYLON.MeshBuilder.CreateBox(\"battleshipMesh\",{width:10, height:20, depth:10},scene);\n        visualMesh.position.copyFrom(initPosition);\n        visualMesh.position.y +=3.37;\n        this.vehicleMesh.addChild(visualMesh);\n        this.vehicleMesh.rotate(new BABYLON.Vector3.Up(), -Math.PI/2);\n        this.altOffset = new BABYLON.Vector3(0,-2.3,0);\n        //console.log(\"q\",this.vehicleMesh.physicsImpostor.physicsBody.quaternion);\n        this.vehicle.rotation = new YUKA.Quaternion(this.vehicleMesh.rotationQuaternion.x,this.vehicleMesh.rotationQuaternion.y,this.vehicleMesh.rotationQuaternion.z,this.vehicleMesh.rotationQuaternion.w);\n    }\n    update(){\n        \n        const delta = this.time.update().getDelta();\n        //console.log(\"entity\", entityManager.entities[0].velocity);\n        this.entityManager.update(delta);\n        //var vy = vehicleMesh.physicsImpostor.physicsBody.velocity.y\n        var vy = -(this.vehicleMesh.position.y+this.altOffset.y);\n        var meshVelocity = new BABYLON.Vector3(this.vehicle.velocity.x,vy,this.vehicle.velocity.z);\n        //var meshVelocity = new BABYLON.Vector3(-1,vy,0);//this.vehicle.velocity.x,vy,this.vehicle.velocity.z)\n        this.vehicleMesh.physicsImpostor.setLinearVelocity(meshVelocity);\n        this.vehicleMesh.physicsImpostor.physicsBody.angularVelocity = new CANNON.Vec3(0,0,0);\n        \n        //var yukaRotation = this.vehicle.rotation;//.toEuler(new YUKA.Quaternion());\n        var rotC = new CANNON.Quaternion(this.vehicle.rotation.x, this.vehicle.rotation.y, this.vehicle.rotation.z,this.vehicle.rotation.w);\n        var rotE = new CANNON.Vec3();\n        var con = rotC.conjugate(); //find angle between quaternions\n        var rotated = con.mult(this.vehicleMesh.physicsImpostor.physicsBody.quaternion);    \n        var res = new CANNON.Vec3();\n        rotated.toEuler(res);\n        //console.log(\"rot\",res );\n        this.vehicleMesh.physicsImpostor.physicsBody.angularVelocity = new CANNON.Vec3(0,-res.y/10,0);\n        \n    }\n    set pause(val){\n        this.vehicle.active = val;\n    }\n    get pause(){\n        return this.vehicle.active;\n    }\n}\n","import * as BABYLON from 'babylonjs';\nimport * as YUKA from 'yuka';\nimport * as CANNON from 'cannon';\nimport { GridMaterial} from 'babylonjs-materials';\n\nexport default class Airship {\n    /**    \n     * Projects a point to a plane along a ray starting from the camera origin and directed towards the point. \n     * @param {BABYLON.Scene} scene      \n     * @param {BABYLON.Mesh} visualMesh \n     *    \n     */\n    constructor(scene, visualMesh,options){\n        options = options || {};\n        \n        const offsetPosition = new BABYLON.Vector3(-100, 100, -100);\n        const initPosition = new BABYLON.Vector3(140, 50, 190).addInPlace(offsetPosition);\n        this.vehicleMesh = BABYLON.MeshBuilder.CreateBox(\"yukaMeshAirship\",{width:12, height:10, depth:64},scene);\n        /*var groundMat = new BABYLON.StandardMaterial(\"groundMatAirship\", scene);\n        groundMat.specularColor = new BABYLON.Color3(0, 0, 0);\n        groundMat.diffuseColor = new BABYLON.Color3(0.29, 0.26, 0.26);\n        groundMat.backFaceCulling = false;*/\n        this.vehicleMesh.material = new GridMaterial(\"groundMaterialAirship\", scene);//groundMat;\n        this.vehicleMesh.position.copyFrom(initPosition);\n        this.vehicleMesh.position.z +=-1;\n        //this.vehicleMesh.position.x -=2.3;\n        this.vehicleMesh.physicsImpostor = new BABYLON.PhysicsImpostor(this.vehicleMesh, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 100000, friction: 1, restitution: 0.9 }, scene);\n        this.vehicleMesh.isVisible = options.debug;\n        //console.log(this.vehicleMesh.physicsImpostor.physicsBody.angularVelocity);\n        this.entityManager = new YUKA.EntityManager();\n        this.time = new YUKA.Time();\n        this.vehicle = new YUKA.Vehicle();\n        this.vehicle.maxSpeed = 2;\n        this.vehicle.mass = 0.1;\n        //vehicle.maxSpeed = 2;\n        //vehicle.setRenderComponent(vehicleMesh, sync);\n        const path = new YUKA.Path();\n        path.loop = true;\n        const yukaOffset = new YUKA.Vector3(offsetPosition.x,offsetPosition.y,offsetPosition.z);\n        path.add(new YUKA.Vector3(140, 80, 190).add(yukaOffset));\n        path.add(new YUKA.Vector3(-50, 130, 200).add(yukaOffset));\n        path.add(new YUKA.Vector3(-50, 180, 150).add(yukaOffset));\n        path.add(new YUKA.Vector3(-30, 130, 30).add(yukaOffset));\n        path.add(new YUKA.Vector3(-10, 130, -10).add(yukaOffset));\n        path.add(new YUKA.Vector3(150, 100, 50).add(yukaOffset));\n        \n        //path.add(new YUKA.Vector3(250, 0, 340));\n    \n        this.vehicle.position.copy(path.current());\n        this.vehicle.active = false;\n        const followPathBehavior = new YUKA.FollowPathBehavior(path, 20);\n        this.vehicle.steering.add(followPathBehavior);\n        this.onPathBehavior = new YUKA.OnPathBehavior(path);\n        this.vehicle.steering.add(this.onPathBehavior);\n        this.entityManager.add(this.vehicle);\n        \n        path._waypoints.push(path._waypoints[0]);\n\n        if(options.debug){\n        var lines = BABYLON.MeshBuilder.CreateLines('lines', {\n            points: path._waypoints,\n            updatable: true,\n        })\n        lines.color = BABYLON.Color3.Teal()\n        }\n        this.onPathBehavior.active = false;\n        //onPathBehavior.radius = 10;\n        this.entityManager.update(this.time.update().getDelta())\n\n       // var visualMesh = BABYLON.MeshBuilder.CreateBox(\"battleshipMesh\",{width:10, height:20, depth:10},scene);\n        visualMesh.scaling = new BABYLON.Vector3(7,7,7);\n        visualMesh.position.copyFrom(initPosition);\n        visualMesh.position.y +=-20.6;\n        visualMesh.rotate(new BABYLON.Vector3.Up(), -Math.PI);\n        this.vehicleMesh.addChild(visualMesh);\n        this.vehicleMesh.rotate(new BABYLON.Vector3.Up(), -Math.PI/2);\n        this.altOffset = new BABYLON.Vector3(0,0,0);//-2.3-100\n        //console.log(\"q\",this.vehicleMesh.physicsImpostor.physicsBody.quaternion);\n        this.vehicle.rotation = new YUKA.Quaternion(this.vehicleMesh.rotationQuaternion.x,this.vehicleMesh.rotationQuaternion.y,this.vehicleMesh.rotationQuaternion.z,this.vehicleMesh.rotationQuaternion.w);\n    }\n    update(){\n        \n        const delta = this.time.update().getDelta();\n        //console.log(\"entity\", this.vehicle.position.y);\n        this.entityManager.update(delta);\n        //var vy = vehicleMesh.physicsImpostor.physicsBody.velocity.y\n        var vy = -(this.vehicleMesh.position.y-this.vehicle.position.y+this.altOffset.y);\n        var meshVelocity = new BABYLON.Vector3(this.vehicle.velocity.x,vy,this.vehicle.velocity.z);\n        //var meshVelocity = new BABYLON.Vector3(-1,vy,0);//this.vehicle.velocity.x,vy,this.vehicle.velocity.z)\n        this.vehicleMesh.physicsImpostor.setLinearVelocity(meshVelocity);\n        this.vehicleMesh.physicsImpostor.physicsBody.angularVelocity = new CANNON.Vec3(0,0,0);\n        \n        //var yukaRotation = this.vehicle.rotation;//.toEuler(new YUKA.Quaternion());\n        var rotC = new CANNON.Quaternion(this.vehicle.rotation.x, this.vehicle.rotation.y, this.vehicle.rotation.z,this.vehicle.rotation.w);\n        var rotE = new CANNON.Vec3();\n        var con = rotC.conjugate(); //find angle between quaternions\n        var rotated = con.mult(this.vehicleMesh.physicsImpostor.physicsBody.quaternion);    \n        var res = new CANNON.Vec3();\n        rotated.toEuler(res);\n        //console.log(\"rot\",res );\n        this.vehicleMesh.physicsImpostor.physicsBody.angularVelocity = new CANNON.Vec3(0,-res.y/10,0);\n        \n    }\n    set pause(val){\n        this.vehicle.active = val;\n    }\n    get pause(){\n        return this.vehicle.active;\n    }\n}\n","import * as BABYLON from 'babylonjs';\nimport * as YUKA from 'yuka';\nimport { GridMaterial} from 'babylonjs-materials';\nimport { createVehicle } from '../utils/ActorsShapes.js'\nconst inverse = new YUKA.Matrix4();\nconst localPositionOfLimitBox= new YUKA.Vector3();\nclass LimitBoxBehavior extends YUKA.SteeringBehavior {\n\n    constructor( limitBox ) {\n      super();\n      console.log(\"Limit Box\");\n      this.limitBox = limitBox;\n              /**\n          * This factor determines how much the vehicle decelerates if an intersection occurs.\n          * @type {Number}\n          * @default 0.2\n          */\n          this.brakingWeight = 0.2;\n  \n          /**\n          * Minimum length of the detection box used for intersection tests.\n          * @type {Number}\n          * @default 4\n          */\n          this.dBoxMinLength = 4; //\n    }\n      /**\n    * Calculates the steering force for a single simulation step.\n    *\n    * @param {YUKA.Vehicle} vehicle - The game entity the force is produced for.\n    * @param {YUKA.Vector3} force - The force/result vector.\n    * @param {Number} delta - The time delta.\n    * @return {YUKA.Vector3} The force/result vector.\n    */\n    calculate( vehicle, force /*, delta */ ) {\n        const limitBox = this.limitBox;\n        vehicle.worldMatrix.getInverse( inverse );\n        const dBoxLength = this.dBoxMinLength + ( vehicle.getSpeed() / vehicle.maxSpeed ) * this.dBoxMinLength;\n        // calculate this obstacle's position in local space of the vehicle\n        localPositionOfLimitBox.copy( limitBox.position ).applyMatrix4( inverse );\n        //console.log(localPositionOfLimitBox.length());\n        if ( localPositionOfLimitBox.z < 0 ){//&& Math.abs( localPositionOfObstacle.z ) < dBoxLength ) {\n          const expandedRadius = limitBox.boundingRadius;// + vehicle.boundingRadius;\n            var vehicleSphereDitsance = expandedRadius -localPositionOfLimitBox.length();\n            if ( vehicleSphereDitsance < 0) {\n              //console.log(intersectionPoint);\n              var multiplier = -vehicleSphereDitsance*20;\n              force.x = localPositionOfLimitBox.x * multiplier;\n              force.y = localPositionOfLimitBox.y * multiplier/10;\n              // apply a braking force proportional to the obstacles distance from the vehicle\n              force.z = -10*multiplier;//( limitBox.boundingRadius + localPositionOfLimitBox.z ) * this.brakingWeight;\n        \n              // finally, convert the steering vector from local to world space (just apply the rotation)\n              //console.log(force );\n              force.applyRotation( vehicle.rotation );\n              \n            }\n          }\n        //const vehicleOrientation = new YUKA.Vector3();\n        const speed = 6*(1.5+(vehicle.rotation.toEuler(new YUKA.Vector3()).x/ (Math.PI/4)));\n        //console.log(vehicle.rotation.toEuler(new YUKA.Vector3()).x,speed);\n        vehicle.maxSpeed = speed;\n        //if ( vehicle.rotation.toEuler(new YUKA.Vector3()).x > 0 ) vehicle.maxSpeed = 12; else vehicle.maxSpeed = 5;\n        return force;\n      }\n  \n    /**\n      * Transforms this instance into a JSON object.\n      *\n      * @return {Object} The JSON object.\n      */\n      toJSON() {\n  \n          const json = super.toJSON();\n  \n          json.brakingWeight = this.brakingWeight;\n          json.dBoxMinLength = this.dBoxMinLength;\n  \n  \n          return json;\n  \n      }\n  \n      /**\n      * Restores this instance from the given JSON object.\n      *\n      * @param {Object} json - The JSON object.\n      * @return {ObstacleAvoidanceBehavior} A reference to this behavior.\n      */\n      fromJSON( json ) {\n  \n          super.fromJSON( json );\n  \n          this.brakingWeight = json.brakingWeight;\n          this.dBoxMinLength = json.dBoxMinLength;\n  \n          return this;\n  \n      }\n  \n  }\n  \n/*const entityMatrix = new BABYLON.Matrix();\nfunction sync(entity, renderComponent) {\n    entity.worldMatrix.toArray(entityMatrix.m);\n    entityMatrix.markAsUpdated();\n    //console.log(\"sync\");\n    const matrix = renderComponent.getWorldMatrix();\n    matrix.copyFrom(entityMatrix);\n  }\n*/\n//var target = new YUKA.Vector3(0,0,0);\nexport default class Birds {\n    /**    \n     * Projects a point to a plane along a ray starting from the camera origin and directed towards the point. \n     * @param {BABYLON.Scene} scene      \n     *    \n     */\n    constructor(scene, meshes,options){\n        options = options || {};\n        this.entityMatrix = new BABYLON.Matrix();\n        this.entityManager = new YUKA.EntityManager();\n        this.time = new YUKA.Time();\n        var initPosition = new BABYLON.Vector3(150, 35, 240);\n        var limitBox = null;\n        limitBox = setupLimitBox(scene, 100, new BABYLON.Vector3(initPosition.x, initPosition.y+50, initPosition.z), options.debug);\n        this.entityManager.add(limitBox);\n        //console.log(\"bird\",mesh);\n        //const vehicleMeshPrefab = //createVehicle(scene, { size: 5 });\n        //vehicleMeshPrefab.setEnabled(false);\n        const alignmentBehavior = new YUKA.AlignmentBehavior();\n        const cohesionBehavior = new YUKA.CohesionBehavior();\n        const separationBehavior = new YUKA.SeparationBehavior();\n        \n        alignmentBehavior.weight = 1.9;\n        cohesionBehavior.weight = 2.5;\n        separationBehavior.weight = 0.15;\n        \n\n        this.enemy = new YUKA.Vector3();\n\n        //for (let i = 0; i < 1; i++) {\n        meshes.forEach( mesh =>{\n            const vehicleMesh =  mesh;//vehicleMeshPrefab.clone('bird_'+i.toString());\n            //vehicleMesh.setEnabled(true);\n            vehicleMesh.position.copyFrom(initPosition);\n\n            const vehicle = new YUKA.Vehicle();\n            vehicle.maxSpeed = 10;//13\n            vehicle.updateNeighborhood = true;\n            vehicle.neighborhoodRadius = 30;\n\n            \n            vehicle.setRenderComponent(vehicleMesh, sync);\n        \n            vehicle.boundingRadius = vehicleMesh.getBoundingInfo().boundingSphere.radius;\n            vehicle.smoother = new YUKA.Smoother(20);\n            vehicle.position = new YUKA.Vector3(initPosition.x, initPosition.y, initPosition.z);\n            vehicle.position.x = vehicle.position.x - Math.random() * 5;\n            vehicle.position.z = vehicle.position.z - Math.random() * 5;\n            vehicle.active = false;\n            \n            vehicle.steering.add(alignmentBehavior);\n            vehicle.steering.add(cohesionBehavior);\n            vehicle.steering.add(separationBehavior);\n\n            const wanderBehavior = new YUKA.WanderBehavior(1,5,5);\n            wanderBehavior.weight = 1.2;\n            vehicle.steering.add(wanderBehavior);\n\n            const LimitBehavior = new LimitBoxBehavior(limitBox);\n            vehicle.steering.add(LimitBehavior);\n\n            const fleeBehavior = new YUKA.FleeBehavior(this.enemy , 5);\n            fleeBehavior.weight = 5;\n            vehicle.steering.add(fleeBehavior);\n            this.entityManager.add(vehicle);\n        });\n        //vehicleMeshPrefab.setEnabled(false);\n    }\n\n    update(){\n        const delta = this.time.update().getDelta();\n        this.entityManager.update(delta);\n\n        //this.vehicleMesh.position = new BABYLON.Vector3(this.vehicle.position.x,this.vehicle.position.y,this.vehicle.position.z);\n        //this.vehicleMesh.rotationQuaternion = new BABYLON.Quaternion(this.vehicle.rotation.x, this.vehicle.rotation.y, this.vehicle.rotation.z,this.vehicle.rotation.w);\n    }\n    set pause(val){\n        this.entityManager.entities.forEach(x=>x.active = val);\n        //this.vehicle.active = val;\n    }\n    get pause(){\n        return false;//this.vehicle.active;\n    }\n    set enemyPosition(pos){\n        this.enemy.copy( new YUKA.Vector3(pos.x, pos.y, pos.z));\n    }\n}\n\nfunction setupLimitBox(scene, size, pos, debug) {\n    const mesh1 = BABYLON.MeshBuilder.CreateBox('limitBox', { size: size }, scene)\n    \n    const meshMat = new BABYLON.StandardMaterial('meshMat', scene)\n    meshMat.disableLighting = true\n    meshMat.emissiveColor = BABYLON.Color3.Red()\n    meshMat.wireframe = true;\n  \n    mesh1.material = meshMat;\n    mesh1.position.copyFrom(pos);\n    mesh1.visibility = debug;\n    var limitBox = new YUKA.GameEntity();\n    limitBox.position.copy(mesh1.position);\n    limitBox.boundingRadius = mesh1.getBoundingInfo().boundingSphere.radius * 1;\n    return limitBox;\n  }\n\n\nYUKA.WanderBehavior.prototype.calculate = function(vehicle, force, delta ) {\n\n    // this behavior is dependent on the update rate, so this line must be\n    // included when using time independent frame rate\n    const targetWorld = new YUKA.Vector3();\n    const jitterThisTimeSlice = this.jitter * delta;\n  \n    // prepare random vector\n    const randomDisplacement = new YUKA.Vector3();\n    randomDisplacement.x = YUKA.MathUtils.randFloat( - 1, 1 ) * jitterThisTimeSlice;\n    randomDisplacement.y = YUKA.MathUtils.randFloat( - 1, 1 ) * jitterThisTimeSlice/10;\n    randomDisplacement.z = YUKA.MathUtils.randFloat( - 1, 1 ) * jitterThisTimeSlice;\n    // add random vector to the target's position\n  \n    this._targetLocal.add( randomDisplacement );\n  \n    // re-project this new vector back onto a unit sphere\n  \n    this._targetLocal.normalize();\n  \n    // increase the length of the vector to the same as the radius of the wander sphere\n  \n    this._targetLocal.multiplyScalar( this.radius );\n  \n    // move the target into a position wanderDist in front of the agent\n  \n    targetWorld.copy( this._targetLocal );\n    targetWorld.z += this.distance;\n  \n    // project the target into world space\n  \n    targetWorld.applyMatrix4( vehicle.worldMatrix );\n  \n    // and steer towards it\n  \n    force.subVectors( targetWorld, vehicle.position );\n  \n    return force;\n  \n  }\n  function sync(entity, renderComponent) {\n    renderComponent.position = new BABYLON.Vector3(entity.position.x,entity.position.y,entity.position.z);\n    renderComponent.rotationQuaternion = new BABYLON.Quaternion(entity.rotation.x, entity.rotation.y, entity.rotation.z,entity.rotation.w);\n  }","import * as BABYLON from 'babylonjs';\n//import * as Ammo from 'ammojs';\nimport * as CANNON from 'cannon';\nimport { Vector3 } from 'yuka';\n//import * as CANNON from 'cannon';\nclass VehicleData {\n    constructor(scene){\n        this._scene = scene;\n        this._chassisMesh = null;\n        this._wheelsMesh = [];\n        this._powerWheelsIndex = [];\n        this._steeringWheelsIndex = [];\n        this._brakeWheelsIndex = [];    \n    }\n    get scene(){\n        return this._scene;\n    }\n    set scene(s){\n        this._scene = s;\n    }\n    get chassisMesh(){\n        return this._chassisMesh;\n    }\n    set chassisMesh(mesh){\n        this._chassisMesh = mesh;\n    }\n    get wheelsMesh(){\n        return this._wheelsMesh;\n    }\n    set wheelsMesh(mesh){\n        this._wheelsMesh = mesh;\n    }\n    get powerWheelsIndex(){\n        return this._powerWheelsIndex;\n    }\n    set powerWheelsIndex(indices){\n        this._powerWheelsIndex = indices;\n    }\n    get steeringWheelsIndex(){\n        return this._steeringWheelsIndex;\n    }\n    set steeringWheelsIndex(indices){\n        this._steeringWheelsIndex = indices;\n    }\n    get brakeWheelsIndex(){\n        return this._brakeWheelsIndex;\n    }\n    set brakeWheelsIndex(indices){\n        this._brakeWheelsIndex = indices;\n    }\n}\n\nfunction makebox(scene, size, position, rotation, color = new BABYLON.Color3(0.5, 0.6, 0.87), name= \"box\"){\n    var box =  BABYLON.MeshBuilder.CreateBox(name, {width:size.x,depth:size.y,height:size.z}, scene);\n    box.rotationQuaternion = rotation;\n    box.position = position;\n    var myMaterial = new BABYLON.StandardMaterial(\"vehicleMassBox\", scene);\n    myMaterial.diffuseColor = new BABYLON.Color3(1, 0, 1);\n    myMaterial.specularColor = color;\n    myMaterial.emissiveColor = color;\n    box.material = myMaterial;\n    return box;\n} \n\nfunction createWheelMesh(scene, diameter, width, position){\n    //Wheel Material \n    var wheelMaterial = new BABYLON.StandardMaterial(\"wheelMaterial\", scene);\n    var wheelTexture = new BABYLON.Texture(\"http://i.imgur.com/ZUWbT6L.png\", scene);\n    wheelMaterial.diffuseTexture = wheelTexture;\n\n    //Set color for wheel tread as black\n    var faceColors = [];\n    faceColors[1] = new BABYLON.Color3(0, 0, 0);\n\n    //set texture for flat face of wheel \n    var faceUV = [];\n    faceUV[0] = new BABYLON.Vector4(0, 0, 1, 1);\n    faceUV[2] = new BABYLON.Vector4(0, 0, 1, 1);\n\n    //create wheel front inside and apply material\n    var wheelMesh = BABYLON.MeshBuilder.CreateCylinder(\"wheelMesh\", {\n        diameter: diameter,\n        height: width,\n        tessellation: 24,\n        faceColors: faceColors,\n        faceUV: faceUV\n    }, scene);\n    wheelMesh.material = wheelMaterial;\n\n    wheelMesh.rotateAround(\n        new BABYLON.Vector3(0,0,0),\n        new BABYLON.Vector3(0,0,1),\n        -Math.PI/2\n        );\n    wheelMesh.bakeCurrentTransformIntoVertices();\n    wheelMesh.position.addInPlace(position);\n    return wheelMesh;\n}\n\n\nexport class AirplaneWW2 extends VehicleData{\n    /**    \n     * Airplane mesh data and physics body\n     * @param {BABYLON.Scene} scene      \n     * @param {[BABYLON.Mesh]} meshAll\n     * @param {[BABYLON.Vector3]} position\n     * @param {[BABYLON.Vector3]} eulerRotation\n     */\n     constructor(scene, meshAll, position, eulerRotation){\n        super(scene);\n        if(!meshAll) console.error(\"airplane modlel mesh error\");\n        var scale = 1;\n        meshAll[0].translate(new BABYLON.Vector3.Up(),0.15,BABYLON.Space.WORLD);\n        meshAll[0].scaling= meshAll[0].scaling.multiplyByFloats(scale,scale,scale);// = new Vector3(1,1,1);\n        const massOffset = new BABYLON.Vector3(0, 0.2, 0.65).multiplyByFloats(scale,scale,scale);\n        const mass = 50;\n        const isColiderVisible = false;\n        var settings = {\n            suspensionStiffness: 47,//27\n            suspensionDamping: 0.3,//03\n            suspensionCompression: 4.4,//4.4\n            suspensionRestLength: 0.3,//0.3\n            rollInfluence: 0.01, //0.01\n        }\n        var rearWheelSettings = { ...settings };\n        rearWheelSettings.suspensionRestLength = 0.27;\n        this.wheelsMesh = [\n            meshAll[18], meshAll[19], meshAll[20]\n        ];  \n        this.wheelsMesh.forEach(m=>meshAll[0].removeChild(m));\n        meshAll[0].translate(new BABYLON.Vector3.Up(),0.75,BABYLON.Space.WORLD);\n\n        const radius = 0.225/2;//0.225/2;\n        // (widht, heigth, length) of a car\n        this.wheels =\n            [\n                {pos: this.wheelsMesh[0].position, radius: radius, isFront: true, params: settings},\n                {pos: this.wheelsMesh[1].position, radius: radius, isFront: true, params: settings},\n                {pos: this.wheelsMesh[2].position, radius: radius/2, isFront: false, params: rearWheelSettings},\n            ];\n        this.wheels.forEach(x=>x.pos.addInPlace(massOffset));\n\n        const bodySize = new BABYLON.Vector3(2, 2, 0.6).multiplyByFloats(scale,scale,scale);//0.3\n\n        //chassis offset only visual because of the root mass offset\n        //chassis is the volume that represents weight, its used for vehicle physisc but not collisions\n        var chassis = makebox(scene, bodySize, new BABYLON.Vector3(0, 1, 0).subtractInPlace(massOffset), new BABYLON.Vector3(0,0,0).toQuaternion(),new BABYLON.Color3(.1, .1, .1), \"chassis\");\n        chassis.isVisible = false;       \n        // body visuals\n        meshAll[0].removeChild(meshAll[11]);\n        this.visualMeshes = [meshAll[11]];//[rootVisualMesh];\n        //add all meshes to chassis\n        this.visualMeshes.forEach(vm=>{chassis.addChild(vm)});\n        this.visualMeshes[0].receiveShadows = true;\n        //optimization\n        this.visualMeshes[0].material.freeze();\n\n        this.controls = {   rotor: meshAll[17],\n                            rudder: meshAll[16],\n                            leftAileron: meshAll[12],\n                            rightAileron: meshAll[13],\n                            leftElevator: meshAll[15],\n                            rightElevator: meshAll[14]\n                        };   \n        Object.values( this.controls).forEach(m=>{\n            meshAll[0].removeChild(m);\n            chassis.addChild(m);\n        } );  \n        \n        /*this.collidersCreate(meshAll[0],chassis,\n                            [meshAll[1],meshAll[2], meshAll[3], meshAll[4], meshAll[5]],\n                            BABYLON.PhysicsImpostor.BoxImpostor,\n                            isColiderVisible);*/\n        /*this.collidersCreate(meshAll[0],chassis,\n                            [meshAll[6], meshAll[7], meshAll[8], meshAll[9], meshAll[10]],\n                            BABYLON.PhysicsImpostor.CapsuleImpostor,\n                            isColiderVisible);*/\n       // createPhysicsImpostor(this.scene, chassis, BABYLON.PhysicsImpostor.NoImpostor, { mass: mass, friction: 1,restitution:0.1}, true);\n        //console.log(\"body\", chassis.physicsImpostor.physicsBody);\n        //chassis.physicsImpostor.physicsBody.angularDamping = 0.6;//cannon\n        //chassis.physicsImpostor.physicsBody.setDamping(0.01, 0.6);\n        this.chassisBody = this.createBody(mass, new BABYLON.Vector3(1,0.3,1),new BABYLON.Vector3(0,0.1,-0.2));\n        this.powerWheelsIndex = [0,1];\n        this.steeringWheelsIndex = [2];\n        this.brakeWheelsIndex = [0,1,2];\n        this.chassisMesh = chassis;\n        meshAll[0].dispose();       //not needed anymore since we had do assign a new mesh root for raycast vehicle\n        var world = this.scene.getPhysicsEngine().getPhysicsPlugin().world;\n        this.chassisBody.position = new CANNON.Vec3(position.x, position.y, position.z);\n        var initRotation = eulerRotation.toQuaternion();\n        this.chassisBody.quaternion = new CANNON.Quaternion(initRotation.x,initRotation.y,initRotation.z,initRotation.w);\n        world.addBody(this.chassisBody);\n        \n        //console.log(world);\n        var that = this;\n        this.scene.registerBeforeRender(function () {\n            that.chassisMesh.position.copyFrom( new BABYLON.Vector3( that.chassisBody.position.x,\n                                                                     that.chassisBody.position.y,\n                                                                     that.chassisBody.position.z,\n                                                ));\n            //that.chassisMesh.rotation = new BABYLON.Quaternion(\n            that.chassisMesh.rotationQuaternion = new BABYLON.Quaternion(\n                that.chassisBody.quaternion.x,\n                that.chassisBody.quaternion.y,\n                that.chassisBody.quaternion.z,\n                that.chassisBody.quaternion.w\n            );\n        });\n    }\n    collidersCreate(oldRoot, newRoot, meshes, impostorType, isVisible){\n        var coliderMeshesBox = meshes;\n        coliderMeshesBox.forEach(m=>oldRoot.removeChild(m));\n        coliderMeshesBox.forEach(cm=>{\n            newRoot.addChild(cm);\n            cm.isVisible = isVisible;\n        });\n        coliderMeshesBox.forEach(cm=>{createPhysicsImpostor(this.scene, cm, impostorType, { mass: 0, friction: 1,restitution: 0.1}, true)});    //    restitution:0.1   \n    }\n    createBody(mass = 50, size, offset){\n        var chassisShape;\n        var mat = new CANNON.Material('Mat');\n\t\tmat.friction = 0.8;\n        chassisShape = new CANNON.Box(new CANNON.Vec3(size.x, size.y, size.z));\n        var chassisBody = new CANNON.Body({ mass: mass });\n        chassisBody.material = mat;\n        chassisBody.addShape(chassisShape, new CANNON.Vec3(offset.x, offset.y, offset.z));\n        chassisBody.angularDamping = 0.8;\n        return chassisBody;\n    }\n\n}\n\n\n\n\nfunction createPhysicsImpostor(scene, entity, impostor, options, reparent) {\n    if (entity == null) return;\n    entity.checkCollisions = false;\n    const parent = entity.parent;\n    if (reparent === true) entity.parent = null;\n    entity.physicsImpostor = new BABYLON.PhysicsImpostor(entity, impostor, options, scene);\n    //console.log(entity.physicsImpostor.physicsBody);\n    if (reparent === true) entity.parent = parent;\n};\n\nBABYLON.Mesh.prototype.getAbsoluteSize = function() {\n    if(!this.__size){\n        this.__size = BABYLON.Vector3.Zero();\n    }\n    let scaling = this.scaling;\n    //console.log(scaling);\n    let bounds = this.getBoundingInfo();\n    this.__size.x = Math.abs(bounds.minimum.x - bounds.maximum.x)*scaling.x;\n    this.__size.z = Math.abs(bounds.minimum.y - bounds.maximum.y)*scaling.y;\n    this.__size.y = Math.abs(bounds.minimum.z - bounds.maximum.z)*scaling.z;\n\n    return this.__size;\n};","import * as BABYLON from 'babylonjs';\nimport * as GUI from 'babylonjs-gui';\n\nclass hudControl {\n    constructor( x, y){\n       this._x = x;\n       this._y = y;\n    }\n   set x(x){\n       this._x = x;\n   }\n   get x(){\n       return this._x;\n   }\n   set y(y){\n       this._y = y;\n   }\n   get y(){\n       return this._y;\n   }\n    draw(){\n\n    }\n}\n\nexport class crosshair extends hudControl{\n    constructor( width, height) {\n        super(width / 2,height / 2);\n        this.width = width;\n        this.height = height;\n        this.lines = [new GUI.Line(),new GUI.Line()];\n        this.lines.forEach(line=>{\n            line.lineWidth = 2;\n            line.color = \"green\";\n        });\n\n    }\n\n    draw(){\n        // remove aliasing\n        this.x = Math.floor(this.x) + 0.5;\n        this.y = Math.floor(this.y) + 0.5;\n\n        this.lines[0].x1 = this.x;\n        this.lines[0].y1 = this.y - 10;\n        this.lines[0].x2 = this.x;\n        this.lines[0].y2 = this.y + 10;\n\n        this.lines[1].x1 = this.x - 10;\n        this.lines[1].y1 = this.y;\n        this.lines[1].x2 = this.x + 10;\n        this.lines[1].y2 = this.y;\n\n    }\n  }\n\n  export class hudSimpleText extends hudControl{\n    constructor( x, y, fontSize =12) {\n        super(x,y);\n        this.txt = \"hello...\"\n        this.fontSize = fontSize;\n        this.element = new GUI.TextBlock();\n        this.element.top = x;\n        this.element.left = y;\n        this.element.color = \"green\";\n        this.element.fontSize = fontSize;\n        this.element.height = \"30px\";\n    }\n    set text(txt){\n        this.element.text = txt;\n    }\n    draw(){\n\n    }\n  }\n//////////\nfunction range(start, end, inc) {\n    //console.log(start,end);\n    return Array(end/inc - (start/inc) + 1).fill().map((_, idx) => start+ idx*inc);\n  }\n  function limitCompass(x){\n    if(x<0) x = x+ 360;\n    if(x>359) x = x -360;\n    return x;\n  }\n  function limitPitchLadder(x){\n    if(x<-90) x = -180-x;\n    if(x>90) x = 180-x ;\n    return x;\n  }\n  function rangeClip(rangeArray,limit){\n    return rangeArray.map(x=>limit(x));\n  }\n  /*function rangeClip360(rangeArray){\n    return rangeArray.map(x=>limit(x));\n  }*/\nexport class compass extends hudControl{\n    constructor( width, height, tickSpace =40, rangeC = 4) {   \n        super(width/2- 40*(4/2),height / 7);\n        this.tickSpace = tickSpace;\n        this._range = rangeC;\n        //this.middle =  this.tickSpace*(this._range/2);\n        this.middle = width/2;\n        this.width = width;\n        this.height = height;\n        this.tilt = 0;\n        this.tickHeight = 15;\n        \n        this.scale = 10;\n        //this.scaleVals = range(10/this.scale,50/this.scale,this.scale);\n        //console.log(this.scaleVals);\n        this.x = Math.floor(this.x) + 0.5;\n        this.y = Math.floor(this.y) + 0.5;\n        const fontSize = 12;\n        this.elements = [];//new GUI.Line()\n        this.elements.push(new GUI.TextBlock());\n        this.elements[this.elements.length-1].color = \"green\";\n        this.elements[this.elements.length-1].fontSize = fontSize;\n        this.elements[this.elements.length-1].height = \"10px\";\n        this.elements[this.elements.length-1].width = \"20px\";\n        this.elements[this.elements.length-1].horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\n        this.elements[this.elements.length-1].verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_TOP;\n        this.elements.push(new GUI.Line());\n        this.elements[this.elements.length-1].lineWidth = 2;\n        this.elements[this.elements.length-1].color = \"green\";\n\n        this.scaleVals = range(\n            Math.floor(this.tilt/this.scale)*this.scale-Math.floor(this.scale*this._range/2),\n            Math.floor(this.tilt/this.scale)*this.scale+ Math.floor(this.scale*this._range/2),\n            this.scale);\n        this.scaleVals = rangeClip(this.scaleVals,limitCompass);\n        this.scaleVals.forEach((x,i)=>{\n            this.elements.push(new GUI.TextBlock());\n            this.elements[this.elements.length-1].color = \"green\";\n            this.elements[this.elements.length-1].fontSize = fontSize;\n            this.elements[this.elements.length-1].height = \"10px\";\n            this.elements[this.elements.length-1].width = \"20px\";\n            this.elements[this.elements.length-1].horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\n            this.elements[this.elements.length-1].verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_TOP;\n            this.elements.push(new GUI.Line());\n            this.elements[this.elements.length-1].lineWidth = 2;\n            this.elements[this.elements.length-1].color = \"green\";\n            this.elements.push(new GUI.Line());\n            this.elements[this.elements.length-1].lineWidth = 2;\n            this.elements[this.elements.length-1].color = \"green\";\n        });  \n        //console.log(this.elements.length);\n    }\n    set angle(angle){\n        this.tilt = angle;\n    }\n    set range(range){\n        this._range = range;\n    }\n    set rangeScale(rangeScale){\n        this.scale = rangeScale;\n    }\n    draw(){\n        var tiltFloor = Math.floor(this.tilt);\n        var tiltRemd = Math.floor(this.tilt * 10/this.scale) % 10;\n        var tiltRemdHalf = Math.floor((this.tilt/this.scale+0.5) * 10) % 10;\n        this.scaleVals = range(\n            Math.floor(this.tilt/this.scale)*this.scale-Math.floor(this.scale*this._range/2),\n            Math.floor(this.tilt/this.scale)*this.scale+ Math.floor(this.scale*this._range/2),\n            this.scale);\n        this.scaleVals = rangeClip(this.scaleVals,limitCompass);\n        this.tilt = tiltFloor + tiltRemd/10;\n\n        var elemIdx = 2;\n        var space = this.x-tiltRemd*this.tickSpace/10;\n        var spaceHalf = this.x-tiltRemdHalf*this.tickSpace/10;\n        this.scaleVals.forEach((val,idx)=>{\n            this.elements[elemIdx].left = space-5;\n            this.elements[elemIdx].top = this.y-this.tickHeight-10;\n            this.elements[elemIdx].text = val.toString();\n            elemIdx = elemIdx +1;\n            this.elements[elemIdx].x1 = space;\n            this.elements[elemIdx].y1 = this.y;\n            this.elements[elemIdx].x2 = space;\n            this.elements[elemIdx].y2 = this.y-this.tickHeight;\n            elemIdx = elemIdx +1;\n            this.elements[elemIdx].x1 = spaceHalf;\n            this.elements[elemIdx].y1 = this.y;\n            this.elements[elemIdx].x2 = spaceHalf;\n            this.elements[elemIdx].y2 = this.y-this.tickHeight/2;\n            elemIdx = elemIdx +1;\n            space += this.tickSpace;\n            spaceHalf += this.tickSpace;\n        });\n        this.elements[0].left = this.middle;\n        this.elements[0].top = this.y+15;\n        this.elements[0].text = tiltFloor.toString();\n        this.elements[1].x1 = this.middle;\n        this.elements[1].y1 = this.y+15;\n        this.elements[1].x2 = this.middle;\n        this.elements[1].y2 = this.y+15 -this.tickHeight;\n        //console.log(\"location\",this.middle + 4, this.y+15);\n    }\n}\n\nexport class pitchLader extends hudControl {\n    constructor(width, height){\n        super(0,0);\n        this.width = width;\n        this.height = height;\n        const containerWidth = 200;\n        const containerHeight = 200;\n        this.middle = containerWidth/2;//width/2;\n        this.tilt = 0;\n        this.rot = 0;\n        this.tickHeight = 100;\n        this.tickSpace = 40;\n        this.scale = 10;\n        this._range = 4;\n        this.middleOffset = containerHeight-(containerHeight -this.tickSpace*this._range)/2;//this.tickSpace*this._range;//height -(height - this.tickSpace*this._range )/2;\n        const fontSize = 12;\n        this.elements = [];\n        this.scaleVals = range(\n            Math.floor(this.tilt/this.scale)*this.scale - Math.floor(this.scale*this._range/2),\n            Math.floor(this.tilt/this.scale)*this.scale + Math.floor(this.scale*this._range/2),\n            this.scale);\n        this.scaleVals = rangeClip(this.scaleVals, limitPitchLadder);\n        this.scaleVals.forEach((x,i)=>{\n            this.elements.push(new GUI.TextBlock());\n            this.elements[this.elements.length-1].color = \"green\";\n            this.elements[this.elements.length-1].fontSize = fontSize;\n            this.elements[this.elements.length-1].height = \"10px\";\n            this.elements[this.elements.length-1].width = \"20px\";\n            this.elements[this.elements.length-1].horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\n            this.elements[this.elements.length-1].verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_TOP;\n            this.elements.push(new GUI.Line());\n            this.elements[this.elements.length-1].lineWidth = 2;\n            this.elements[this.elements.length-1].color = \"green\";\n            this.elements.push(new GUI.Line());\n            this.elements[this.elements.length-1].lineWidth = 2;\n            this.elements[this.elements.length-1].color = \"green\";\n            this.elements.push(new GUI.Line());\n            this.elements[this.elements.length-1].lineWidth = 2;\n            this.elements[this.elements.length-1].color = \"green\";\n            this.elements.push(new GUI.Line());\n            this.elements[this.elements.length-1].lineWidth = 2;\n            this.elements[this.elements.length-1].color = \"green\";\n        }); \n        this.root = new GUI.Rectangle();\n        this.root.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_TOP;\n        this.root.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\n        this.root.widthInPixels = containerWidth;\n        this.root.heightInPixels = containerHeight;\n        this.root.left = width/2 - containerWidth/2;\n        this.root.top = (height -(height - containerHeight )/2) -containerHeight;\n        this.root.thickness = 1; \n        //this.root.addControl(line);\n        this.elements.forEach(el=>this.root.addControl(el));\n    }\n    set angle(angle){\n        this.tilt = angle;\n    }\n    set rotation(rotation){\n        this.rot = rotation;\n    }\n    set range(range){\n        this._range = range;\n    }\n    set rangeScale(rangeScale){\n        this.scale = rangeScale;\n    }\n    draw(){\n        var tiltFloor = Math.floor(this.tilt);\n        var tiltRemd = Math.floor(this.tilt * 10/this.scale) % 10;\n        this.scaleVals = range(\n            Math.floor(this.tilt/this.scale)*this.scale - Math.floor(this.scale*this._range/2),\n            Math.floor(this.tilt/this.scale)*this.scale + Math.floor(this.scale*this._range/2),\n            this.scale);\n        this.scaleVals = rangeClip(this.scaleVals, limitPitchLadder);\n        this.tilt = tiltFloor + tiltRemd/10;      \n        var space = 0;\n        if (tiltRemd >=0) \n            space = this.middleOffset +tiltRemd*this.tickSpace/10;\n        else \n            space = this.middleOffset + (10*this.tickSpace/10 +tiltRemd*this.tickSpace/10);\n        var elemIdx = 0;\n        this.scaleVals.forEach((val,idx)=>{\n            var sign = 1;\n            if (val<0) {\n                //this.bm.setLineDash([3, 2]);\n                this.elements[elemIdx+1].dash = [5, 10];\n                this.elements[elemIdx+2].dash = [5, 10];\n                this.elements[elemIdx+3].dash = [5, 10];\n                this.elements[elemIdx+4].dash = [5, 10];\n                sign = -1;\n            }else{\n                this.elements[elemIdx+1].dash = [];\n                this.elements[elemIdx+2].dash = [];\n                this.elements[elemIdx+3].dash = [];\n                this.elements[elemIdx+4].dash = [];\n            }\n            this.elements[elemIdx].left = this.middle - this.tickHeight/2 -25;\n            this.elements[elemIdx].top = space+8*sign;\n            this.elements[elemIdx].text = val.toString();\n            elemIdx = elemIdx +1;\n            this.elements[elemIdx].x1 = this.middle - this.tickHeight/2;\n            this.elements[elemIdx].y1 = space;\n            this.elements[elemIdx].x2 = this.middle - this.tickHeight*0.3;\n            this.elements[elemIdx].y2 = space;\n            elemIdx = elemIdx +1;\n            this.elements[elemIdx].x1 = this.middle + this.tickHeight*0.3;\n            this.elements[elemIdx].y1 = space;\n            this.elements[elemIdx].x2 = this.middle + this.tickHeight/2;\n            this.elements[elemIdx].y2 = space;\n            elemIdx = elemIdx +1;\n            this.elements[elemIdx].x1 = this.middle - this.tickHeight/2;\n            this.elements[elemIdx].y1 = space;\n            this.elements[elemIdx].x2 = this.middle - this.tickHeight/2;\n            this.elements[elemIdx].y2 = space+10*sign;\n            elemIdx = elemIdx +1;\n            this.elements[elemIdx].x1 = this.middle + this.tickHeight/2;\n            this.elements[elemIdx].y1 = space;\n            this.elements[elemIdx].x2 = this.middle + this.tickHeight/2;\n            this.elements[elemIdx].y2 = space+10*sign;\n            elemIdx = elemIdx +1;\n            space -= this.tickSpace;\n        });\n        this.root.rotation = (Math.PI / 180) * this.rot;\n       /* this.bm.save();\n        this.bm.translate(this.width/2, this.height/2);\n        this.bm.rotate((Math.PI / 180) * this.rot); // rotate\n        this.bm.translate(-this.width/2, -this.height/2);\n\n        var tiltFloor = Math.floor(this.tilt);\n        var tiltRemd = Math.floor(this.tilt * 10/this.scale) % 10;\n        this.scaleVals = range(\n            Math.floor(this.tilt/this.scale)*this.scale - Math.floor(this.scale*this._range/2),\n            Math.floor(this.tilt/this.scale)*this.scale + Math.floor(this.scale*this._range/2),\n            this.scale);\n        this.scaleVals = rangeClip(this.scaleVals, limitPitchLadder);\n        this.tilt = tiltFloor + tiltRemd/10;\n        \n        var space = 0;\n        if (tiltRemd >=0) \n            space = this.middleOffset +tiltRemd*this.tickSpace/10;\n        else \n            space = this.middleOffset + (10*this.tickSpace/10 +tiltRemd*this.tickSpace/10);\n\n        super.changeLocalLineWidth();\n\n        this.scaleVals.forEach((val,idx)=>{\n            this.bm.beginPath();\n            this.bm.font = `bold ${12}px Arial`;\n            this.bm.textAlign = 'start';\n            var sign = 1;\n            if (val<0) {\n                this.bm.setLineDash([3, 2]);\n                sign = -1;\n            }\n            if (val != 0){\n                this.bm.moveTo(this.middle - this.tickHeight/2, space);\n                this.bm.lineTo(this.middle - this.tickHeight*0.3, space); \n                this.bm.moveTo(this.middle + this.tickHeight*0.3, space);\n                this.bm.lineTo(this.middle + this.tickHeight/2, space); \n                this.bm.moveTo(this.middle - this.tickHeight/2, space);\n                this.bm.lineTo(this.middle - this.tickHeight/2, space+10*sign); \n                this.bm.moveTo(this.middle + this.tickHeight/2, space);\n                this.bm.lineTo(this.middle + this.tickHeight/2, space+10*sign); \n                this.bm.fillText(val.toString(), this.middle - this.tickHeight/2 -25, space+8*sign);\n            }else{\n                this.bm.moveTo(this.middle - this.tickHeight*0.8, space);\n                this.bm.lineTo(this.middle - this.tickHeight*0.3, space); \n                this.bm.moveTo(this.middle + this.tickHeight*0.3, space);\n                this.bm.lineTo(this.middle + this.tickHeight*0.8, space); \n            }\n            space -= this.tickSpace;\n            this.bm.closePath();\n            this.bm.stroke();\n            this.bm.setLineDash([]);\n        });\n        \n        super.resetGlobalLineWidth(); \n        this.bm.restore();*/\n    }\n}"," class hudControl {\n     constructor(bm, x, y){\n        this.bm = bm;\n        this._x = x;\n        this._y = y;\n        this.lineWidth = this.bm.lineWidth;\n        this.globalLineWidth = this.bm.lineWidth;\n        this._fontSize = 12;\n     }\n     set lineWidth(lineWidth){\n        this.localLineWidth = lineWidth;\n    }\n    get lineWidth(){\n        return this.localLineWidth;\n    }\n    set x(x){\n        this._x = x;\n    }\n    get x(){\n        return this._x;\n    }\n    set y(y){\n        this._y = y;\n    }\n    get y(){\n        return this._y;\n    }\n    set fontSize(size){\n        this._fontSize = size;\n    }\n    get fontSize(){\n        return this._fontSize;\n    }\n    changeLocalLineWidth(){\n        this.globalLineWidth = this.bm.lineWidth;\n        this.bm.lineWidth = this.localLineWidth;\n    }\n    resetGlobalLineWidth(){\n        this.bm.lineWidth = this.globalLineWidth;\n    }\n     draw(){\n\n     }\n }\n\n\nexport class hudSimpleText extends hudControl{\n    constructor(bm, x, y, fontSize) {\n        super(bm,x,y);\n        this.txt = \"hello...\"\n        this.fontSize = fontSize;\n    }\n    set text(txt){\n        this.txt = txt;\n    }\n    draw(){\n        this.bm.font = `bold ${this.fontSize}px Arial`;\n        this.bm.textAlign = 'start';\n        this.bm.fillText(this.txt, this.x, this.y);\n    }\n  }\n\n  function wrapText(context, text, x, y, maxWidth, lineHeight) {\n    var words = text.split(' ');\n    var line = '';\n\n    for(var n = 0; n < words.length; n++) {\n      var testLine = line + words[n] + ' ';\n      var metrics = context.measureText(testLine);\n      var testWidth = metrics.width;\n      if (testWidth > maxWidth && n > 0) {\n        context.fillText(line, x, y);\n        line = words[n] + ' ';\n        y += lineHeight;\n      }\n      else {\n        line = testLine;\n      }\n    }\n    context.fillText(line, x, y);\n  }\n\n  export class hudWrappedText extends hudControl{\n    constructor(bm, x, y, fontSize) {\n        super(bm,x,y);\n        this.txt = \"hello...\"\n        this.fontSize = fontSize;\n    }\n    set text(txt){\n        this.txt = txt;\n    }\n    draw(){\n        this.bm.font = `bold ${this.fontSize}px Arial`;\n        wrapText(this.bm, this.txt, this.x, this.y, 100, this.fontSize+2);\n    }\n  }\n\n\n\n  \nexport class hudBorder extends hudControl{\n    constructor(bm, width, height) {\n        super(bm,0,0);\n        this.width = width;\n        this.height = height;\n    }  \n    draw(){\n        super.changeLocalLineWidth();\n        this.bm.strokeRect(0,0,this.width, this.height);\n        super.resetGlobalLineWidth();\n    }\n\n  }\n \nexport class crosshair extends hudControl{\n    constructor(bm, width, height) {\n        super(bm,width / 2,height / 2);\n        this.width = width;\n        this.height = height;\n        \n    }\n\n    draw(){\n        // remove aliasing\n        this.x = Math.floor(this.x) + 0.5;\n        this.y = Math.floor(this.y) + 0.5;\n        super.changeLocalLineWidth();\n        this.bm.strokeWidth = 2;\n        this.bm.beginPath();\n        this.bm.moveTo(this.x, this.y - 10);\n        this.bm.lineTo(this.x, this.y + 10);\n        this.bm.moveTo(this.x - 10,  this.y);\n        this.bm.lineTo(this.x + 10,  this.y);\n        this.bm.closePath();\n        this.bm.stroke();\n        super.resetGlobalLineWidth();\n        //console.log(\"crosshair\", this.x, this.y);\n    }\n  }\n\n  export class horizon extends hudControl{\n    constructor(bm, width, height) {\n        super(bm,width / 2,height / 2);\n        this.width = width;\n        this.height = height;\n        this.tilt = 0;\n    }\n    set angle(angle){\n        this.tilt = angle;\n    }\n    draw(){\n        // remove aliasing\n        this.x = Math.floor(this.x) + 0.5;\n        this.y = Math.floor(this.y) + 0.5;\n        this.bm.save();\n        //this.bm.clearRect(0,0,this.width,this.height);\n        this.bm.translate(this.width/2, this.height/2)\n        this.bm.rotate((Math.PI / 180) * this.tilt); // rotate\n        this.bm.translate(-this.width/2, -this.height/2)\n        super.changeLocalLineWidth();\n        this.bm.strokeWidth = 1;\n        this.bm.beginPath();\n        this.bm.moveTo(this.x-20, this.y);\n        this.bm.lineTo(this.x-10, this.y);\n        this.bm.moveTo(this.x-10, this.y);\n        this.bm.lineTo(this.x, this.y -10 );\n        this.bm.moveTo(this.x, this.y -10 );\n        this.bm.lineTo(this.x+10, this.y);\n        this.bm.moveTo(this.x+10,  this.y);\n        this.bm.lineTo(this.x+20,  this.y);\n        this.bm.closePath();\n        this.bm.stroke();\n        super.resetGlobalLineWidth();\n        \n        this.bm.restore();\n    }\n  }\n\n  function range(start, end, inc) {\n    //console.log(start,end);\n    return Array(end/inc - (start/inc) + 1).fill().map((_, idx) => start+ idx*inc);\n  }\n  function limitCompass(x){\n    if(x<0) x = x+ 360;\n    if(x>359) x = x -360;\n    return x;\n  }\n  function limitPitchLadder(x){\n    if(x<-90) x = -180-x;\n    if(x>90) x = 180-x ;\n    return x;\n  }\n  function rangeClip(rangeArray,limit){\n    return rangeArray.map(x=>limit(x));\n  }\n  function rangeClip360(rangeArray,limit){\n    return rangeArray.map(x=>limit(x));\n  }\n  export class compass extends hudControl{\n    constructor(bm, width, height, tickSpace =40, range = 4) {   \n        super(bm,width/2- tickSpace*(range/2),height / 6);\n        this.tickSpace = tickSpace;\n        this._range = range;\n        //this.middle =  this.tickSpace*(this._range/2);\n        this.middle = width/2;\n        this.width = width;\n        this.height = height;\n        this.tilt = 0;\n        this.tickHeight = 15;\n        \n        this.scale = 10;\n        //this.scaleVals = range(10/this.scale,50/this.scale,this.scale);\n        //console.log(this.scaleVals);\n        this.x = Math.floor(this.x) + 0.5;\n        this.y = Math.floor(this.y) + 0.5;\n        //console.log(this.x);\n        \n    }\n    set angle(angle){\n        this.tilt = angle;\n    }\n    get angle(){\n        return this.tilt;\n    }\n    set range(range){\n        this._range = range;\n    }\n    set rangeScale(rangeScale){\n        this.scale = rangeScale;\n    }\n    draw(){\n        this.x = Math.floor(this.x) + 0.5;\n        this.y = Math.floor(this.y) + 0.5;\n        var tiltFloor = Math.floor(this.tilt);\n        var tiltRemd = Math.floor(this.tilt * 10/this.scale) % 10;\n        var tiltRemdHalf = Math.floor((this.tilt/this.scale+0.5) * 10) % 10;\n        this.scaleVals = range(\n            Math.floor(this.tilt/this.scale)*this.scale-Math.floor(this.scale*this._range/2),\n            Math.floor(this.tilt/this.scale)*this.scale+ Math.floor(this.scale*this._range/2),\n            this.scale);\n        this.scaleVals = rangeClip(this.scaleVals,limitCompass);\n        this.tilt = tiltFloor + tiltRemd/10;\n\n        super.changeLocalLineWidth();\n        this.bm.beginPath();\n        \n        var space = this.x-tiltRemd*this.tickSpace/10;\n        var spaceHalf = this.x-tiltRemdHalf*this.tickSpace/10;\n        this.scaleVals.forEach((val,idx)=>{\n            this.bm.font = `bold ${this.fontSize}px Arial`;\n            this.bm.textAlign = 'start';\n            this.bm.fillText(val.toString(), space-5, this.y-this.tickHeight-2);\n            this.bm.moveTo(space, this.y);\n            this.bm.lineTo(space, this.y-this.tickHeight); \n            this.bm.moveTo(spaceHalf, this.y);\n            this.bm.lineTo(spaceHalf, this.y-this.tickHeight/2); \n            space += this.tickSpace;\n            spaceHalf += this.tickSpace;\n        });\n        //var middle =  this.tickSpace*(this._range/2);\n        this.bm.moveTo(this.middle, this.y+this.tickHeight);\n        this.bm.lineTo(this.middle, this.y); \n        this.bm.fillText(tiltFloor.toString(), this.middle+4, this.y+this.tickHeight);\n        this.bm.closePath();\n        this.bm.stroke();\n        super.resetGlobalLineWidth(); \n    }\n  }\nexport class pitchLader extends hudControl {\n    constructor(bm, width, height){\n        super(bm,0,0);\n        this.width = width;\n        this.height = height;\n        this.middle = width/2;\n        this.tilt = 0;\n        this.rot = 0;\n        this.tickHeight = 100;\n        this.tickSpace = 40;\n        this.scale = 10;\n        this.x = Math.floor(this.x) + 0.5;\n        this.y = Math.floor(this.y) + 0.5;\n        this._range = 4;\n        this.middleOffset = height -(height - this.tickSpace*this._range )/2 +this.tickSpace;\n    }\n    set angle(angle){\n        this.tilt = angle;\n    }\n    set rotation(rotation){\n        this.rot = rotation;\n    }\n    set range(range){\n        this._range = range;\n    }\n    set rangeScale(rangeScale){\n        this.scale = rangeScale;\n    }\n    draw(){\n        this.bm.save();\n        this.bm.translate(this.width/2, this.height/2);\n        this.bm.rotate((Math.PI / 180) * this.rot); // rotate\n        this.bm.translate(-this.width/2, -this.height/2);\n\n        var tiltFloor = Math.floor(this.tilt);\n        var tiltRemd = Math.floor(this.tilt * 10/this.scale) % 10;\n        this.scaleVals = range(\n            Math.floor(this.tilt/this.scale)*this.scale - Math.floor(this.scale*this._range/2),\n            Math.floor(this.tilt/this.scale)*this.scale + Math.floor(this.scale*this._range/2),\n            this.scale);\n        this.scaleVals = rangeClip(this.scaleVals, limitPitchLadder);\n        this.tilt = tiltFloor + tiltRemd/10;\n        \n        var space = 0;\n        if (tiltRemd >=0) \n            space = this.middleOffset +tiltRemd*this.tickSpace/10;\n        else \n            space = this.middleOffset + (10*this.tickSpace/10 +tiltRemd*this.tickSpace/10);\n\n        super.changeLocalLineWidth();\n\n        this.scaleVals.forEach((val,idx)=>{\n            this.bm.beginPath();\n            this.bm.font = `bold ${this.fontSize}px Arial`;\n            this.bm.textAlign = 'start';\n            var sign = 1;\n            if (val<0) {\n                this.bm.setLineDash([3*this.tickHeight/100, 2*this.tickHeight/100]); //3,2\n                sign = -1;\n            }\n            if (val != 0){\n                this.bm.moveTo(this.middle - this.tickHeight/2-this.lineWidth/2, space);\n                this.bm.lineTo(this.middle - this.tickHeight*0.3, space); \n                this.bm.moveTo(this.middle + this.tickHeight*0.3, space);\n                this.bm.lineTo(this.middle + this.tickHeight/2+this.lineWidth/2, space); \n                this.bm.moveTo(this.middle - this.tickHeight/2, space);\n                this.bm.lineTo(this.middle - this.tickHeight/2, space+this.tickSpace/4 *sign); \n                this.bm.moveTo(this.middle + this.tickHeight/2, space);\n                this.bm.lineTo(this.middle + this.tickHeight/2, space+this.tickSpace/4*sign); \n                this.bm.fillText(val.toString(), this.middle - this.tickHeight/2 -130 +20*sign, space+35-1*sign); //25 8\n            }else{\n                this.bm.moveTo(this.middle - this.tickHeight*0.8, space);\n                this.bm.lineTo(this.middle - this.tickHeight*0.3, space); \n                this.bm.moveTo(this.middle + this.tickHeight*0.3, space);\n                this.bm.lineTo(this.middle + this.tickHeight*0.8, space); \n            }\n            space -= this.tickSpace;\n            this.bm.closePath();\n            this.bm.stroke();\n            this.bm.setLineDash([]);\n        });\n        \n        super.resetGlobalLineWidth(); \n        this.bm.restore();\n    }\n}\n\n\n\nexport default { hudSimpleText, hudWrappedText, hudBorder, crosshair, horizon, compass, pitchLader }\n","//import * as THREE from 'three';\nimport * as BABYLON from 'babylonjs';\nimport { compass } from './GuiHudControls';\nimport * as HUD2D from './HudControls';\n//import IMU from './Imu.js';\nfunction isMobileCheck() {\n    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n}\n\nexport default function hudPanel(scene,canvas,planeSize = 0.5){\n\n    //var size = 600;\n    //if (window.innerHeight < size) \n    //size = window.innerHeight;\n    const screenDimensions = {\n        width: canvas.width,\n        height: canvas.height\n    }\n    //console.log(screenDimensions);\n    var elapsed, now;\n    var then = 0;\n    var interval=0.05;\n    var angles = new BABYLON.Vector3(0,0,0);\n    var speed = 0;\n    var altitude = 0;\n    var power = 0;\n    //console.log('win inner height'+window.innerHeight);\n    var style = `rgba(\n        ${0xa3},\n        ${0xff},\n        ${0x00},\n        ${0xFF}`;\n    window.drawCanvas = document.createElement(\"canvas\");\n    window.drawCanvas.width = 768;\n    window.drawCanvas.height = 768;\n    var ctx = window.drawCanvas.getContext(\"2d\");\n    ctx.fillStyle = style;\n    ctx.strokeStyle = style;\n    //ctx.globalAlpha = 0.75;\n    //ctx.imageSmoothingEnabled = true; //maybe use when zooming\n    ctx.lineWidth = 5;\n    var hudElements = {\n        //info: new HUD2D.hudSimpleText(ctx, window.drawCanvas.width/2 -30, window.drawCanvas.height - 150,128),\n        //border: new HUD2D.hudBorder(ctx,window.drawCanvas.width,window.drawCanvas.height),\n        //crosshair: new HUD2D.crosshair(ctx,window.drawCanvas.width,window.drawCanvas.height),\n        //horizon: new HUD2D.horizon(ctx,window.drawCanvas.width,window.drawCanvas.height),\n        compass: new HUD2D.compass(ctx,window.drawCanvas.width,window.drawCanvas.height,200,2),\n        pitchLader: new HUD2D.pitchLader(ctx,window.drawCanvas.width,window.drawCanvas.height),\n        speed: new HUD2D.hudSimpleText(ctx, 0, window.drawCanvas.height-20,90),\n        power: new HUD2D.hudSimpleText(ctx, 0, window.drawCanvas.height-90,75),\n        altitude: new HUD2D.hudSimpleText(ctx, window.drawCanvas.width-230, window.drawCanvas.height-20,90)\n        //msgs: new HUD2D.hudWrappedText(hudBitmap,10,60,12)\n    };\n    //hudElements.compass.tickSpace = 100;\n    hudElements.compass.tickHeight = 60;\n    hudElements.compass.lineWidth = 14;\n    hudElements.compass.fontSize = 90;\n    hudElements.compass.angle = 30;\n\n    hudElements.pitchLader.tickHeight = 300;\n    hudElements.pitchLader.tickSpace = 120;\n    hudElements.pitchLader.lineWidth = 14;\n    hudElements.pitchLader.fontSize = 90;\n    hudElements.pitchLader.range = 2;\n\n   \n\n    Object.values(hudElements).forEach(val => {\n        //val.fontSize = 128;\n        //val.draw(); \n    });\n    var texture = new BABYLON.HtmlElementTexture(\"\", window.drawCanvas, {\n        scene\n    });\n    var material = new BABYLON.StandardMaterial(\"groundMat\", scene);\n    material.emissiveTexture = texture;\n    material.disableLighting = true;\n    material.diffuseTexture = texture;\n    material.diffuseTexture.hasAlpha = true;\n    material.backFaceCulling = false;\n    //material.disableLighting = true;\n    var hudMesh = BABYLON.MeshBuilder.CreatePlane(\"hudPlane\", {size:1.6});\n    hudMesh.material = material;\n\n    texture.update();\n    function draw() {\n        ctx.clearRect(0,0,window.drawCanvas.width,window.drawCanvas.height );\n        \n        hudElements.speed.text = speed;\n        hudElements.altitude.text = altitude;\n        hudElements.power.text = power;\n        hudElements.compass.angle = angles.x;\n        hudElements.pitchLader.angle = angles.y;\n        hudElements.pitchLader.rot = angles.z;\n        //console.log(hudElements.compass.angle );\n        // redraw\n        Object.values(hudElements).forEach(val => {val.draw()});\n        texture.update();\n        //texture.needsUpdate = true;\n        //if (imuData.updated) console.log(`compass = ${imuData.compass}, yaw = ${imuData.yaw},pitch = ${imuData.pitch},roll = ${imuData.roll}`);\n      }\n    /**    \n     * attach the hud to a vehicle     \n     * @param {BABYLON.Mesh} mesh\n     */\n    function linkWithMesh(mesh){\n        mesh.addChild(hudMesh);\n        hudMesh.position = new BABYLON.Vector3(0,0.8,0);//(0,1.2,0);\n    }\n    /**    \n     * attach the hud to a vehicle     \n     * @param {BABYLON.Camera} cam\n     */\n    function linkWithCamera(cam){\n        //hudMesh.translate(BABYLON.Vector3.Up(),20, BABYLON.Space.WORLD);// = new BABYLON.Vector3(0,0.1,2);\n        hudMesh.parent = cam;\n        //hudMesh.position = new BABYLON.Vector3(0,0.1,2);\n    }\n    /**    \n     * attach the hud to a vehicle     \n     * @param {BABYLON.Camera} cam\n     */\n    function lockToCamera(cam){\n        cam.lockedTarget = hudMesh;\n    }\n    function flipHoriz(drawing){\n        //drawing.translate(screenDimensions.width/2,0);\n        //drawing.scale(-1, 1);\n    }\n    function setRotation(eulerAngles){\n        angles.copyFrom(eulerAngles);\n    }\n    function setSpeed(s){\n        speed = (s*10).toFixed(1);\n    }\n    function setAltitude(a){\n        altitude = a.toFixed(1);\n    }\n    function setPower(p){\n        if(p>0.99) p=0.99;\n        power = (p*100).toFixed(0);\n    }\n\tfunction update(time) {\n        //then = now;\n        now = time;\n        elapsed = now - then;\n        if (elapsed > interval){\n            draw();\n            //console.log(time);\n            then = now;\n        }\n    }\n    return {\n        update,\n        draw,\n        linkWithMesh,\n        linkWithCamera,\n        lockToCamera,\n        setRotation,\n        setSpeed,\n        setAltitude,\n        setPower\n    }\n}","//import * as BABYLON from \"@babylonjs/core\";\nimport * as BABYLON from 'babylonjs';\nimport * as CANNON from 'cannon';\n\n// Use physics viewer to display impostors\nlet getChildRotation = function(child){ //return the rotation of a child of a parent object by using a temporary World Matrix\n    var scale = new BABYLON.Vector3(0, 0, 0);\n    var rotation = new BABYLON.Quaternion();\n    var translation = new BABYLON.Vector3(0,0,0);\n\n    var tempWorldMatrix = child.getWorldMatrix();\n    tempWorldMatrix.decompose(scale, rotation, translation);\n    return rotation;\n}\n\nvar vmult = function(v,q){\n    var target =  new BABYLON.Vector3();\n \n    var x = v.x,\n        y = v.y,\n        z = v.z;\n \n    var qx = q.x,\n        qy = q.y,\n        qz = q.z,\n        qw = q.w;\n \n    // q*v\n    var ix =  qw * x + qy * z - qz * y,\n    iy =  qw * y + qz * x - qx * z,\n    iz =  qw * z + qx * y - qy * x,\n    iw = -qx * x - qy * y - qz * z;\n \n    target.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    target.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    target.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n \n    return target;\n};\nvar vectorToWorldFrame = function(localVector, quaternion){\n    var result = new BABYLON.Vector3();\n    result = vmult(localVector, quaternion);\n    return result;\n};\nvar pointToWorldFrame = function(localPoint,quaternion, position){\n    var result = new BABYLON.Vector3();\n    result = vmult(localPoint,quaternion);\n    result = result.add(position); //temp fix for v5 update\n    return result;\n};\n\n/*var applyLocalForce = function(localForce, localPoint, mesh){\n    var worldForce = new BABYLON.Vector3();\n    var worldPoint = new BABYLON.Vector3();\n \n    // Transform the force vector to world space\n    worldForce = vectorToWorldFrame(localForce, mesh.rotationQuaternion);\n    worldPoint = pointToWorldFrame(localPoint, mesh.rotationQuaternion, mesh.getAbsolutePosition());\n    mesh.physicsImpostor.applyForce(worldForce, worldPoint);\n};*/\nvar applyLocalForce = function(localForce, localPoint, body){\n\n    body.applyLocalForce(new CANNON.Vec3(localForce.x, localForce.y, localForce.z),\n                         new CANNON.Vec3(localPoint.x, localPoint.y, localPoint.z));\n\n};\n/*var applyLocalForce = function(localForce, localPoint, body){\n    var worldForce = new BABYLON.Vector3();\n    var worldPoint = new BABYLON.Vector3();\n \n    // Transform the force vector to world space\n    worldForce = vectorToWorldFrame(localForce, new BABYLON.Quaternion(body.quaternion.x, body.quaternion.y, body.quaternion.z,body.quaternion.w ));\n    worldPoint = pointToWorldFrame(localPoint, new BABYLON.Quaternion(body.quaternion.x, body.quaternion.y, body.quaternion.z,body.quaternion.w ),\n         new CANNON.Vec3(body.position.x,body.position.y,body.position.z));\n    body.applyForce(\n        new CANNON.Vec3( worldForce.x,worldForce.y,worldForce.z), \n        new CANNON.Vec3( worldPoint.x, worldPoint.y, worldPoint.z));\n};*/\nclass Airplane {\n    /**    \n     * Projects a point to a plane along a ray starting from the camera origin and directed towards the point. \n     * @param {BABYLON.Scene} scene      \n     * @param {BABYLON.Mesh} chassis\n     *  @param {{ rotor: BABYLON.Mesh,rudder: BABYLON.Mesh,leftAileron: BABYLON.Mesh,rightAileron: BABYLON.Mesh,leftElevator: BABYLON.Mesh,rightElevator: BABYLON.Mesh} }controls\n     *  \n     */\n    constructor(scene, chassis, controls){\n        this.scene = scene;\n        if(!chassis) console.error(\"chassis mesh error\");\n        if(!controls) console.error(\"controls data error\");\n        //this.animationGroup = null;\n        this._lift = 50;\n        this._roll = 0;\n        this._rollLimit = 2;\n        this._yaw = 0;\n        this._yawLimit = 2;\n        this._pitch = 0;\n        this._pitchLimit = 2;\n        this._velocity = 0;     // 3 axis\n        this._currentSpeed = 0; // 1 axis\n        this._enginePower = 0;\n        this._enginePowerLimit = 1;//1\n        this.enginePowerPrev = 0\n        this.speedModifier = 0.03;\n        this.collision = chassis;\n        this.rudder = controls.rudder;\n        this.rotor = controls.rotor;\n        this.leftAileron = controls.leftAileron;\n        this.rightAileron = controls.rightAileron;\n        this.leftElevator = controls.leftElevator;\n        this.rightElevator = controls.rightElevator;\n        this._relativeBody = null;\n        this._isTouchingGround = false;\n        this.addAnimations();\n        this.animationGroup.play(false);\n        this.animationGroup.speedRatio = 1;\n        this.controlsInitialize();\n        this.registerForces();\n    }\n\n    set lift(val){\n        this._lift = val;\n    }\n    get lift(){\n        return this._lift;\n    }\n    set roll(val){\n        if (val > this._rollLimit) val = this._rollLimit;\n        if (val < -this._rollLimit ) val = -this._rollLimit;\n        this._roll = val;\n    }\n    get roll(){\n        return this._roll;\n    }\n    set yaw(val){\n        if (val > this._yawLimit) val = this._yawLimit;\n        if (val < -this._yawLimit ) val = -this._yawLimit;\n        this._yaw = val;\n    }\n    get yaw(){\n        return this._yaw;\n    }\n    set pitch(val){\n        if (val > this._pitchLimit) val = this._pitchLimit;\n        if (val < -this._pitchLimit ) val = -this._pitchLimit;\n        this._pitch = val;\n    }\n    get pitch(){\n        return this._pitch;\n    }\n    set enginePower(val){\n        if (val > this._enginePowerLimit) val = this._enginePowerLimit;\n        if (val < 0 ) val = 0;\n        this._enginePower = val;\n    }\n    get enginePower(){\n        return this._enginePower;\n    }\n    get velocity(){ \n        var velocity = vmult(\n            this.collision.physicsImpostor.getLinearVelocity(),\n            BABYLON.Quaternion.Inverse(this.collision.rotationQuaternion));\n        return velocity;\n    }\n    get currentSpeed(){\n\t\t//const velocity = body.quaternion.inverse().vmult(body.velocity);\n\t\t//const currentSpeed = velocity.z;\n        return 0;\n    }\n    get rotation(){\n        return this.collision.rotationQuaternion.toEulerAngles();\n    }\n    set relativeBody(mesh){\n        this._relativeBody = mesh;\n    }\n    get relativeBody(){\n        return this._relativeBody;\n    }\n    set isTouchingGround(touching){\n        this._isTouchingGround= touching;\n    }\n    get isTouchingGround(){\n        return this._isTouchingGround;\n    }\n\n    rotorSpin(rotor){\n        rotor.rotation = new BABYLON.Vector3(0,  0, Math.PI/2,);\n        //rotor.rotation = new BABYLON.Vector3(0, Math.PI/2, 0);\n        const animWheel = new BABYLON.Animation(\"wheelAnimation\", \"rotation.z\", 15, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE);\n        this.animationGroup = new BABYLON.AnimationGroup(\"airplane\");\n        const wheelKeys = []; \n        var enginePower = 1;\n        //At the animation key 0, the value of rotation.y is 0\n        wheelKeys.push({\n            frame: 0,\n            value: 0\n        });\n        //At the animation key 30, (after 1 sec since animation fps = 30) the value of rotation.y is 2PI for a complete rotation\n        wheelKeys.push({\n            frame: 15,\n            value: enginePower*(-2 * Math.PI)\n        });\n        //set the keys\n        animWheel.setKeys(wheelKeys);    \n        //Link this animation to a wheel\n        rotor.animations = [];\n        rotor.animations.push(animWheel);\n        this.animationGroup.addTargetedAnimation(animWheel,rotor );\n      }\n    addAnimations(){\n        this.rotorSpin(this.rotor);\n    }\n    controlsInitialize(){\n        this.rudderZeroRotation = new BABYLON.Quaternion();\n        this.leftAileronZeroRotation = new BABYLON.Quaternion();\n        this.rightAileronZeroRotation = new BABYLON.Quaternion();\n        this.leftElevatorZeroRotation = new BABYLON.Quaternion();\n        this.rightElevatorZeroRotation = new BABYLON.Quaternion();\n\n        this.rudderZeroRotation.copyFrom(this.rudder.rotationQuaternion);\n        this.leftAileronZeroRotation.copyFrom(this.leftAileron.rotationQuaternion);\n        this.rightAileronZeroRotation.copyFrom(this.rightAileron.rotationQuaternion);\n        this.leftElevatorZeroRotation.copyFrom(this.leftElevator.rotationQuaternion);\n        this.rightElevatorZeroRotation.copyFrom(this.rightElevator.rotationQuaternion);\n        \n    }\n    meshRootPosition(x,y,z){       \n        this.collision.setAbsolutePosition(x,y,z); \n    }\n    rudderControl(rot){\n        this.rudder.rotationQuaternion.copyFrom(this.rudderZeroRotation);\n        this.rudder.rotate(BABYLON.Vector3.Up(), rot);\n    }\n\n    aileronControl(rot){\n        this.leftAileron.rotationQuaternion.copyFrom(this.leftAileronZeroRotation);\n        this.leftAileron.rotate(BABYLON.Vector3.Left(), rot);\n        this.rightAileron.rotationQuaternion.copyFrom(this.rightAileronZeroRotation);\n        this.rightAileron.rotate(BABYLON.Vector3.Left(), -rot);\n    }\n    elevatorControl(rot){\n        this.leftElevator.rotationQuaternion.copyFrom(this.leftElevatorZeroRotation);\n        this.leftElevator.rotate(BABYLON.Vector3.Left(), rot);\n        this.rightElevator.rotationQuaternion.copyFrom(this.rightElevatorZeroRotation);\n        this.rightElevator.rotate(BABYLON.Vector3.Left(), rot);\n    }\n    applyLiftForce(){\n        let lift = this.velocity.z * Math.abs(this.velocity.z) * 1.5;\n        applyLocalForce(new BABYLON.Vector3(0,lift, 0), new BABYLON.Vector3(0, 0, 0), this.collision);\n    }\n    applyDragForce(){\n        var velocity = this.velocity;\n        applyLocalForce(new BABYLON.Vector3(\n            velocity.x * Math.abs(velocity.x) * -20,    //20\n            velocity.y * Math.abs(velocity.y) * -100,   //-100\n            velocity.z * Math.abs(velocity.z) * -1      //-1\n            ), new BABYLON.Vector3(0, 0, -0.02), this.collision); //-0.02\n    }\n    applyThrustForce(){\n        applyLocalForce(new BABYLON.Vector3( 0, 0, 3000 * this.speedModifier * this.enginePower), new BABYLON.Vector3(0, 0, 1), this.collision);\n    }\n    applyRollForce(dir){\n        if (dir) {\n            applyLocalForce(new BABYLON.Vector3(0, dir*5 * -this.velocity.z, 0), new BABYLON.Vector3(1, 0, 0), this.collision);\n            applyLocalForce(new BABYLON.Vector3(0, dir*5 * this.velocity.z, 0), new BABYLON.Vector3(-1, 0, 0), this.collision);\n        }\n    }\n    applyYawForce(dir){\n        if (dir) applyLocalForce(new BABYLON.Vector3( dir*5 * this.velocity.z, 0 , 0), new BABYLON.Vector3(0, 0, -1), this.collision);\n    }\n    applyPitchForce(dir){\n        if (dir) applyLocalForce(new BABYLON.Vector3( 0, 5*dir*this.velocity.z , 0), new BABYLON.Vector3(0, 0, -1), this.collision);       \n    }\n    applyPitchYawForce(pitchForce, YawForce){\n        if (pitchForce || YawForce) applyLocalForce(new BABYLON.Vector3( YawForce*5 * this.velocity.z, 5*pitchForce*this.velocity.z , 0), new BABYLON.Vector3(0, 0, -1), this.collision); \n    }\n    propellerSpeedUpdate(){\n        if (this.enginePowerPrev !== this.enginePower){\n            if(this.enginePower) this.animationGroup.play(true); else this.animationGroup.play(false);\n            this.animationGroup.speedRatio = this.enginePower*4;\n        }\n        this.enginePowerPrev = this.enginePower;\n    }\n    resetControls(){\n        this.aileronControl(this.roll*Math.PI/8);\n        this.rudderControl(-this.yaw*Math.PI/8);\n        this.elevatorControl(-this.pitch*Math.PI/8);\n        this.pitch = 0;\n        this.yaw = 0;\n        this.roll = 0;\n    }\n    applyRelativeBodyForce(){\n        var frameTime = Date.now();\n        var prevFrameTime = frameTime;\n        var delta = frameTime - prevFrameTime;\n        var force = new BABYLON.Vector3(0,0,0);\n        if(this.relativeBody && this.isTouchingGround){\n            //console.log(\"relative force\");\n            /*frameTime = Date.now();\n            delta = frameTime - prevFrameTime;\n    \n            var relativeVelocity = this.relativeBody.getPhysicsImpostor().getLinearVelocity();\n            //var ms = this.relativeBody.getPhysicsImpostor().mass;\n            const coeff = 1*this.relativeBody.getPhysicsImpostor().mass/delta;\n            force = force.copyFrom(relativeVelocity);\n            force = force.multiplyByFloats(coeff,coeff,coeff);\n\n            var worldPoint = new BABYLON.Vector3();\n            worldPoint = pointToWorldFrame(new BABYLON.Vector3(0,0,0), this.collision.rotationQuaternion, this.collision.getAbsolutePosition());\n            this.collision.physicsImpostor.applyForce(force, worldPoint);*/\n        }\n    }\n    registerForces(){\n        var that = this;\n        //this.scene.registerBeforeRender(function () {\n        this.scene.onBeforeRenderObservable.add(() => {\n            that.applyRollForce(that.roll);\n            //that.applyYawForce(that.yaw);\n            //that.applyPitchForce(that.pitch);\n            that.applyPitchYawForce(that.pitch, that.yaw);\n            that.applyDragForce();\n            that.applyLiftForce(); \n            that.applyThrustForce();\n            that.propellerSpeedUpdate();\n            //that.applyRelativeBodyForce();\n            that.resetControls();\n        });\n    }\n\n    \n}\n/////////// CANON ///////////\nexport default class AirplaneCannon {\n    /**    \n     * Projects a point to a plane along a ray starting from the camera origin and directed towards the point. \n     * @param {BABYLON.Scene} scene      \n     * @param {BABYLON.Mesh} chassis\n     *  @param {{ rotor: BABYLON.Mesh,rudder: BABYLON.Mesh,leftAileron: BABYLON.Mesh,rightAileron: BABYLON.Mesh,leftElevator: BABYLON.Mesh,rightElevator: BABYLON.Mesh} }controls\n     *  \n     */\n    constructor(scene, chassis, controls){\n        this.scene = scene;\n        if(!chassis) console.error(\"chassis mesh error\");\n        if(!controls) console.error(\"controls data error\");\n        //this.animationGroup = null;\n        this._lift = 50;\n        this._roll = 0;\n        this._rollLimit = 2;\n        this._yaw = 0;\n        this._yawLimit = 2;\n        this._pitch = 0;\n        this._pitchLimit = 2;\n        this._velocity = 0;     // 3 axis\n        this._currentSpeed = 0; // 1 axis\n        this._enginePower = 0;\n        this._enginePowerLimit = 1;//1\n        this.enginePowerPrev = 0\n        this.speedModifier = 0.03;\n        this.collision = chassis;\n        this.rudder = controls.rudder;\n        this.rotor = controls.rotor;\n        this.leftAileron = controls.leftAileron;\n        this.rightAileron = controls.rightAileron;\n        this.leftElevator = controls.leftElevator;\n        this.rightElevator = controls.rightElevator;\n        this._relativeBody = null;\n        this._isTouchingGround = false;\n        this.addAnimations();\n        this.animationGroup.play(false);\n        this.animationGroup.speedRatio = 1;\n        this.controlsInitialize();\n        this.registerForces();\n        //console.log(\"cb=\", this.collision);\n    }\n\n    set lift(val){\n        this._lift = val;\n    }\n    get lift(){\n        return this._lift;\n    }\n    set roll(val){\n        if (val > this._rollLimit) val = this._rollLimit;\n        if (val < -this._rollLimit ) val = -this._rollLimit;\n        this._roll = val;\n    }\n    get roll(){\n        return this._roll;\n    }\n    set yaw(val){\n        if (val > this._yawLimit) val = this._yawLimit;\n        if (val < -this._yawLimit ) val = -this._yawLimit;\n        this._yaw = val;\n    }\n    get yaw(){\n        return this._yaw;\n    }\n    set pitch(val){\n        if (val > this._pitchLimit) val = this._pitchLimit;\n        if (val < -this._pitchLimit ) val = -this._pitchLimit;\n        this._pitch = val;\n    }\n    get pitch(){\n        return this._pitch;\n    }\n    set enginePower(val){\n        if (val > this._enginePowerLimit) val = this._enginePowerLimit;\n        if (val < 0 ) val = 0;\n        this._enginePower = val;\n    }\n    get enginePower(){\n        return this._enginePower;\n    }\n    get velocity(){ \n        var velocity = vmult(\n            //this.collision.physicsImpostor.getLinearVelocity(),\n            new BABYLON.Vector3(this.collision.velocity.x,\n                                this.collision.velocity.y,\n                                this.collision.velocity.z),\n            BABYLON.Quaternion.Inverse(new BABYLON.Quaternion(  this.collision.quaternion.x,\n                this.collision.quaternion.y,\n                this.collision.quaternion.z,\n                this.collision.quaternion.w,\n                )));\n        return velocity;\n    }\n    get currentSpeed(){\n\t\t//const velocity = body.quaternion.inverse().vmult(body.velocity);\n\t\t//const currentSpeed = velocity.z;\n        return 0;\n    }\n    get rotation(){\n        return new BABYLON.Quaternion(  this.collision.quaternion.x,\n                                        this.collision.quaternion.y,\n                                        this.collision.quaternion.z,\n                                        this.collision.quaternion.w,\n                                        ).toEulerAngles();\n    }\n    set relativeBody(mesh){\n        this._relativeBody = mesh;\n    }\n    get relativeBody(){\n        return this._relativeBody;\n    }\n    set isTouchingGround(touching){\n        this._isTouchingGround= touching;\n    }\n    get isTouchingGround(){\n        return this._isTouchingGround;\n    }\n\n    rotorSpin(rotor){\n        rotor.rotation = new BABYLON.Vector3(0,  0, Math.PI/2,);\n        //rotor.rotation = new BABYLON.Vector3(0, Math.PI/2, 0);\n        const animWheel = new BABYLON.Animation(\"wheelAnimation\", \"rotation.z\", 15, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE);\n        this.animationGroup = new BABYLON.AnimationGroup(\"airplane\");\n        const wheelKeys = []; \n        var enginePower = 1;\n        //At the animation key 0, the value of rotation.y is 0\n        wheelKeys.push({\n            frame: 0,\n            value: 0\n        });\n        //At the animation key 30, (after 1 sec since animation fps = 30) the value of rotation.y is 2PI for a complete rotation\n        wheelKeys.push({\n            frame: 15,\n            value: enginePower*(-2 * Math.PI)\n        });\n        //set the keys\n        animWheel.setKeys(wheelKeys);    \n        //Link this animation to a wheel\n        rotor.animations = [];\n        rotor.animations.push(animWheel);\n        this.animationGroup.addTargetedAnimation(animWheel,rotor );\n      }\n    addAnimations(){\n        this.rotorSpin(this.rotor);\n    }\n    controlsInitialize(){\n        this.rudderZeroRotation = new BABYLON.Quaternion();\n        this.leftAileronZeroRotation = new BABYLON.Quaternion();\n        this.rightAileronZeroRotation = new BABYLON.Quaternion();\n        this.leftElevatorZeroRotation = new BABYLON.Quaternion();\n        this.rightElevatorZeroRotation = new BABYLON.Quaternion();\n\n        this.rudderZeroRotation.copyFrom(this.rudder.rotationQuaternion);\n        this.leftAileronZeroRotation.copyFrom(this.leftAileron.rotationQuaternion);\n        this.rightAileronZeroRotation.copyFrom(this.rightAileron.rotationQuaternion);\n        this.leftElevatorZeroRotation.copyFrom(this.leftElevator.rotationQuaternion);\n        this.rightElevatorZeroRotation.copyFrom(this.rightElevator.rotationQuaternion);\n        \n    }\n    meshRootPosition(x,y,z){       \n        this.collision.position.set(x,y,z); \n    }\n    rudderControl(rot){\n        this.rudder.rotationQuaternion.copyFrom(this.rudderZeroRotation);\n        this.rudder.rotate(BABYLON.Vector3.Up(), rot);\n    }\n\n    aileronControl(rot){\n        this.leftAileron.rotationQuaternion.copyFrom(this.leftAileronZeroRotation);\n        this.leftAileron.rotate(BABYLON.Vector3.Left(), rot);\n        this.rightAileron.rotationQuaternion.copyFrom(this.rightAileronZeroRotation);\n        this.rightAileron.rotate(BABYLON.Vector3.Left(), -rot);\n    }\n    elevatorControl(rot){\n        this.leftElevator.rotationQuaternion.copyFrom(this.leftElevatorZeroRotation);\n        this.leftElevator.rotate(BABYLON.Vector3.Left(), rot);\n        this.rightElevator.rotationQuaternion.copyFrom(this.rightElevatorZeroRotation);\n        this.rightElevator.rotate(BABYLON.Vector3.Left(), rot);\n    }\n    applyLiftForce(){\n        let lift = this.velocity.z * Math.abs(this.velocity.z) * 1.5;\n        applyLocalForce(new BABYLON.Vector3(0,lift, 0), new BABYLON.Vector3(0, 0, 0), this.collision);\n    }\n    applyDragForce(){\n        var velocity = this.velocity;\n        applyLocalForce(new BABYLON.Vector3(\n            velocity.x * Math.abs(velocity.x) * -20,    //20\n            velocity.y * Math.abs(velocity.y) * -100,   //-100\n            velocity.z * Math.abs(velocity.z) * -1      //-1\n            ), new BABYLON.Vector3(0, 0, -0.02), this.collision); //-0.02\n    }\n    applyThrustForce(){\n        applyLocalForce(new BABYLON.Vector3( 0, 0, 3000 * this.speedModifier * this.enginePower), new BABYLON.Vector3(0, 0, 1), this.collision);\n    }\n    applyRollForce(dir){\n        if (dir) {\n            applyLocalForce(new BABYLON.Vector3(0, dir*5 * -this.velocity.z, 0), new BABYLON.Vector3(1, 0, 0), this.collision);\n            applyLocalForce(new BABYLON.Vector3(0, dir*5 * this.velocity.z, 0), new BABYLON.Vector3(-1, 0, 0), this.collision);\n        }\n    }\n    applyYawForce(dir){\n        if (dir) applyLocalForce(new BABYLON.Vector3( dir*5 * this.velocity.z, 0 , 0), new BABYLON.Vector3(0, 0, -1), this.collision);\n    }\n    applyPitchForce(dir){\n        if (dir) applyLocalForce(new BABYLON.Vector3( 0, 5*dir*this.velocity.z , 0), new BABYLON.Vector3(0, 0, -1), this.collision);       \n    }\n    applyPitchYawForce(pitchForce, YawForce){\n        if (pitchForce || YawForce) applyLocalForce(new BABYLON.Vector3( YawForce*5 * this.velocity.z, 5*pitchForce*this.velocity.z , 0), new BABYLON.Vector3(0, 0, -1), this.collision); \n    }\n    propellerSpeedUpdate(){\n        if (this.enginePowerPrev !== this.enginePower){\n            if(this.enginePower) this.animationGroup.play(true); else this.animationGroup.play(false);\n            this.animationGroup.speedRatio = this.enginePower*4;\n        }\n        this.enginePowerPrev = this.enginePower;\n    }\n    resetControls(){\n        this.aileronControl(this.roll*Math.PI/8);\n        this.rudderControl(-this.yaw*Math.PI/8);\n        this.elevatorControl(-this.pitch*Math.PI/8);\n        this.pitch = 0;\n        this.yaw = 0;\n        this.roll = 0;\n    }\n    registerForces(){\n        var that = this;\n        //this.scene.registerBeforeRender(function () {\n        this.scene.onBeforeRenderObservable.add(() => {\n            that.applyRollForce(that.roll);\n            that.applyPitchYawForce(that.pitch, that.yaw);\n            that.applyDragForce();\n            that.applyLiftForce(); \n            that.applyThrustForce();\n            that.propellerSpeedUpdate();\n            that.resetControls();\n        });\n    }\n\n    \n}\n","import * as BABYLON from 'babylonjs';\nimport * as CANNON from 'cannon';\n\nBABYLON.Mesh.prototype.getAbsoluteSize = function() {\n    if(!this.__size){\n        this.__size = BABYLON.Vector3.Zero();\n    }\n    let scaling = this.scaling;\n    //console.log(scaling);\n    let bounds = this.getBoundingInfo();\n    this.__size.x = Math.abs(bounds.minimum.x - bounds.maximum.x)*scaling.x;\n    this.__size.y = Math.abs(bounds.minimum.y - bounds.maximum.y)*scaling.y;\n    this.__size.z = Math.abs(bounds.minimum.z - bounds.maximum.z)*scaling.z;\n\n    return this.__size;\n};\n\n\n/**    \n     * Projects a point to a plane along a ray starting from the camera origin and directed towards the point. \n     * @param {BABYLON.Vector3} point      \n     * @param {BABYLON.Plane} plane\n     * @return {BABYLON.Vector3} The projection of the point p on the plane\n     */\n function projectOnPlane(point, plane) {        \n    let n = plane.normal;        \n    let d = plane.d;\n\n    let p0 = new BABYLON.Vector3().copyFrom(point);//camera.position;\n    \n    // ray direction\n    let V = new BABYLON.Vector3.Up();//point.subtract(p0).normalize();\n    let denom = BABYLON.Vector3.Dot(V, n);\n    \n    let t = -(BABYLON.Vector3.Dot(p0, n) + d)/denom;\n\n    // P = P0 + t*V\n    return p0.add(V.scale(t));\n}\n/**    \n     * Projects a point to a plane along a ray starting from the camera origin and directed towards the point. \n     * @param {BABYLON.Mesh} chassis      \n     * @param {BABYLON.Vector3[]} wheelPosition\n     * @return {BABYLON.Vector3[]} The projection of the point p on the plane\n     */\nfunction getWheelConnectionPoint(chassis, wheelPosition){\n    chassis.computeWorldMatrix(true); \n    //var norm = new BABYLON.Vector3(0,1,0);\n    //norm.rotateByQuaternionToRef(chassis.absoluteRotationQuaternion, norm);\n    //norm.normalize();\n    //var abstractPlane = BABYLON.Plane.FromPositionAndNormal(chassis.getAbsolutePosition(), norm);\n\n    var wheelsConnection = wheelPosition.map((pos,index)=>{\n        var con = new BABYLON.Vector3();\n        con.copyFrom(pos); //projectOnPlane(pos,abstractPlane);\n        con.subtractInPlace(chassis.getAbsolutePosition());\n        con.y = pos.y- chassis.getAbsolutePosition().y\n        return con;\n    });\n    return wheelsConnection;   \n}\n\nexport class CannonUtils {\n\n    static cannon2babylonVec3(cannonVector){\n        var babylonVector = new BABYLON.Vector3();\n        babylonVector.copyFromFloats(cannonVector.x, cannonVector.y, cannonVector.z);\n        return babylonVector;\n    }\n    static cannon2babylonQuat(cannonQuat){\n        const babylonQuat = new BABYLON.Quaternion(cannonQuat.x, cannonQuat.y, cannonQuat.z, cannonQuat.w );\n        //babylonQuat.copyFromFloats( cannonQuat.x, cannonQuat.y, cannonQuat.z, cannonQuat.w );\n        return babylonQuat;\n    }\n    static babylon2cannonVec3(babylonVector){\n        var cannonVector = new CANNON.Vec3(babylonVector.x, babylonVector.y, babylonVector.z);\n        return cannonVector; \n    }\n    static babylon2cannonQuat(babylonQuat){\n        var cannonQuat = new CANNON.Quaternion(babylonQuat.x, babylonQuat.y, babylonQuat.z, babylonQuat.w);\n        return cannonQuat;\n    }\n\n}","import * as BABYLON from 'babylonjs';\nimport * as CANNON from 'cannon';\nimport {CannonUtils} from '../utils/CannonUtils.js';\nimport {CarFromBoxesData, ThreeWheelCar} from './VehiclesData.js';\n\nexport default class Vehicle{\n    constructor(scene, carData){\n        this.scene = scene;\n        //this.physics = physics;\n        this.vehicle = null;\n        this.chassisBody = null;\n        //const carData = new ThreeWheelCar(scene);\n        this.carData = carData;\n        this.chassisMesh = carData.chassisMesh;\n        this.wheelMeshes = carData.wheelsMesh;\n        this.powerWheels = carData.powerWheelsIndex;\n        this.steeringwheels = carData.steeringWheelsIndex;\n        this.breakWheels = carData.brakeWheelsIndex;\n        this.carDataBody = carData.chassisBody;\n        this.carDataWheelBodies = carData.wheelBodies;\n        this.createVehicle();\n        \n    }\n    createVehicle(){\n        var world = this.scene.getPhysicsEngine().getPhysicsPlugin().world;\n        console.log(\"rotations\");\n        this.chassisBody = this.carDataBody;\n\n        var options = {\n            radius: 0.3,\n            directionLocal: new CANNON.Vec3(0, -1, 0),\n            suspensionStiffness: 150,\n            suspensionRestLength: 0.25,//04\n            frictionSlip: 5,\n            dampingRelaxation: 2.3,\n            dampingCompression: 4.5,\n            maxSuspensionForce: 200000,\n            rollInfluence:  0.01,\n            axleLocal: new CANNON.Vec3(-1, 0, 0),\n            chassisConnectionPointLocal: new CANNON.Vec3(1, 1, 0),\n            maxSuspensionTravel: 0.25,\n            customSlidingRotationalSpeed: -30,\n            useCustomSlidingRotationalSpeed: true,\n            };\n\n        // Create the vehicle\n        this.vehicle = new CANNON.RaycastVehicle({\n            chassisBody: this.chassisBody,\n\t\t\tindexUpAxis: 1,\n\t\t\tindexRightAxis: 0,\n\t\t\tindexForwardAxis: 2,\n        });\n\n        var that = this;\n    \n        /*this.wheelMeshes.forEach((wheelMesh, index)=>{\n        //this.carData.wheels.forEach((wheel, index)=>{\n            options.radius = 0.25;//0.5*wheelMesh.getAbsoluteSize().y;//y\n            var pos= new BABYLON.Vector3(\n                wheelMesh.getPositionExpressedInLocalSpace().x,\n                wheelMesh.getPositionExpressedInLocalSpace().y-that.chassisMesh.getAbsolutePosition().y,\n                wheelMesh.getPositionExpressedInLocalSpace().z\n                );\n            console.log(pos);\n            options.chassisConnectionPointLocal.copy(CannonUtils.babylon2cannonVec3( pos )); \n\n            that.vehicle.addWheel(options); \n        });*/\n        this.carData.wheels.forEach((wheel, index)=>{\n            options.radius = wheel.radius;\n            options.chassisConnectionPointLocal.copy(CannonUtils.babylon2cannonVec3( new BABYLON.Vector3(wheel.pos.x, wheel.pos.y, wheel.pos.z) )); \n            that.vehicle.addWheel(options); \n        });\n        this.vehicle.addToWorld(world);\n\n        this.scene.registerBeforeRender(function () {\n            for (var i = 0; i < that.vehicle.wheelInfos.length; i++) {\n                that.vehicle.updateWheelTransform(i);\n                var t = that.vehicle.wheelInfos[i].worldTransform; \n                \n                that.wheelMeshes[i].position.copyFrom( CannonUtils.cannon2babylonVec3(t.position) );\n                that.wheelMeshes[i].rotationQuaternion.copyFrom( CannonUtils.cannon2babylonQuat(t.quaternion) );\n            }\n        });\n\n    }\n\n\n    forward(force){\n        this.powerWheels.forEach(x=> this.vehicle.applyEngineForce(-force, x));\n    }\n    backward(force){\n        this.powerWheels.forEach(x=> this.vehicle.applyEngineForce(force, x));\n    }\n    right(force){\n        this.steeringwheels.forEach(x => this.vehicle.setSteeringValue(force, x));\n    }\n    left(force){\n        this.steeringwheels.forEach(x => this.vehicle.setSteeringValue(-force, x));\n    }\n    brake(force){\n        this.breakWheels.forEach(x => this.vehicle.setBrake(force, x));\n    }\n    unbrake(){\n        this.breakWheels.forEach(x => this.vehicle.setBrake(0, x));\n    }\n\n}","import * as BABYLON from 'babylonjs';\nimport {Clock} from '../utils/Clock';\n//const DIR = {UP:1, DOWN:2,LEFT:3, RIGHT:4,  TILT_LEFT:5, TILT_RIGHT:6, BRAKE:7, LEFT_RESET:8, RIGHT_RESET:9, POWER_UP:10, POWER_DOWN:11, LEFT_HOLD:12, RIGHT_HOLD:13, UNBRAKE:14};\nexport default  class vehicleParts{\n    constructor(){\n        this.bluePrint = null;\n        this.suspension = null;\n        this.avionics = null;\n        this.hud = null;\n        this.clock = new Clock();\n    }\n    static DIR = {UP:1, DOWN:2,LEFT:3, RIGHT:4,  TILT_LEFT:5, TILT_RIGHT:6, BRAKE:7, LEFT_RESET:8, RIGHT_RESET:9, POWER_UP:10, POWER_DOWN:11, LEFT_HOLD:12, RIGHT_HOLD:13, UNBRAKE:14};\n\n    set position(pos){\n        this.bluePrint.chassisMesh.setAbsolutePosition(pos);\n    }\n    get position(){\n        return this.bluePrint.chassisMesh.position;\n    }\n    get ready(){\n        return this.suspension!==null\n    }\n    \n    steer(dir){\n        switch(dir){\n            case vehicleParts.DIR.UP:\n                //console.log(\"up\");\n                this.avionics.pitch = -1;\n                break;\n            case vehicleParts.DIR.DOWN:\n                //console.log(\"up\");\n                this.avionics.pitch = 1;\n                break;\n            case vehicleParts.DIR.LEFT:\n                //console.log(\"left\");\n                this.avionics.yaw = -1;\n                this.suspension.left(0.5);\n                break;\n            case vehicleParts.DIR.RIGHT:\n                //console.log(\"right\");\n                this.avionics.yaw = 1;\n                this.suspension.right(0.5);\n                break;\n            case vehicleParts.DIR.LEFT_RESET:\n                //console.log(\"left reset\");\n                this.suspension.left(0);\n                break;\n            case vehicleParts.DIR.RIGHT_RESET:\n                //console.log(\"right reset\");\n                this.suspension.right(0);\n                break;\n            case vehicleParts.DIR.LEFT_HOLD:\n                //console.log(\"left hold\");\n                this.avionics.yaw = -1;\n                break;\n            case vehicleParts.DIR.RIGHT_HOLD:\n                //console.log(\"right hold\");\n                this.avionics.yaw = 1;\n                break;\n            case vehicleParts.DIR.TILT_LEFT:\n                //console.log(\"tilt left\");\n                this.avionics.roll = -1;\n                break;\n            case vehicleParts.DIR.TILT_RIGHT:\n                //console.log(\"tilt right\");\n                this.avionics.roll = 1;\n                break;\n            default:\n                console.log(\"vehicle invalid direction\");\n        }\n    }\n    power(val){\n        switch(val){\n            case vehicleParts.DIR.POWER_UP:\n                //console.log(\"power up\");\n                this.avionics.enginePower = this.avionics.enginePower + 0.005;\n                this.avionics.speedModifier = 0.12;\n                break;\n            case vehicleParts.DIR.POWER_DOWN:\n                //console.log(\"power down\");\n                this.avionics.enginePower = this.avionics.enginePower - 0.005;\n                break;\n            default:\n                console.log(\"vehicle invalid power\");\n        }\n    }\n    brake(val){\n        switch(val){\n            case vehicleParts.DIR.BRAKE:\n                this.suspension.brake(5);\n                break;\n            case vehicleParts.DIR.UNBRAKE:\n                this.suspension.unbrake();\n                break;\n            default:\n                console.log(\"vehicle invalid power\");\n        }\n    }\n\n    update(){\n        if(this.avionics!=null && this.hud!=null){ //console.error(\"airplane modlel mesh error\");\n            const elapsedTime = this.clock.getElapsedTime();\n            //console.log(elapsedTime);\n            this.hud.setRotation(new BABYLON.Vector3( 180 +BABYLON.Tools.ToDegrees(this.avionics.rotation.y),\n                                                -BABYLON.Tools.ToDegrees(this.avionics.rotation.x),\n                                                BABYLON.Tools.ToDegrees(this.avionics.rotation.z)));\n            this.hud.setSpeed(this.avionics.velocity.z);\n            this.hud.setPower(this.avionics.enginePower);\n            this.hud.setAltitude(this.avionics.collision.position.y);\n            this.hud.update(elapsedTime);\n        }//else {console.log(\"nohud\")}\n\n    }\n}","import * as BABYLON from 'babylonjs';\nimport * as GUI from 'babylonjs-gui';\n\nexport default function scene(engine) {  \n\n    // Instrumentation\n    var instrumentation = new BABYLON.EngineInstrumentation(engine);\n    //instrumentation.captureGPUFrameTime = true;\n    //instrumentation.captureShaderCompilationTime = true;\n    \n    // GUI\n    var advancedTexture = GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\n    var stackPanel = new GUI.StackPanel();\n    advancedTexture.addControl(stackPanel); \n    stackPanel.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;   \n    stackPanel.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;\n    stackPanel.isVertical = true;\n    \n    \n\n    var text1 = new GUI.TextBlock();\n    text1.text = \"\";\n    text1.color = \"white\";\n    text1.fontSize = 16;\n    text1.height = \"30px\";\n    stackPanel.addControl(text1);       \n\n    /*var text2 = new GUI.TextBlock();\n    text2.text = \"\";\n    text2.color = \"white\";\n    text2.fontSize = 16;\n    text2.height = \"30px\";\n    stackPanel.addControl(text2);       */\n\n    /*var text3 = new GUI.TextBlock();\n    text3.text = \"\";\n    text3.color = \"white\";\n    text3.fontSize = 16;\n    text3.height = \"30px\";\n    stackPanel.addControl(text3);       \n\n    var text4 = new GUI.TextBlock();\n    text4.text = \"\";\n    text4.color = \"white\";\n    text4.fontSize = 16;\n    text4.height = \"30px\";\n    stackPanel.addControl(text4);        \n\n    var text5 = new GUI.TextBlock();\n    text5.text = \"\";\n    text5.color = \"white\";\n    text5.fontSize = 16;\n    text5.height = \"30px\";\n    stackPanel.addControl(text5);      */ \n\n    /*scene.registerBeforeRender(function () {\n\n        text1.text = \"current frame time (GPU): \" + (instrumentation.gpuFrameTimeCounter.current * 0.000001).toFixed(2) + \"ms\";\n        text2.text = \"average frame time (GPU): \" + (instrumentation.gpuFrameTimeCounter.average * 0.000001).toFixed(2) + \"ms\";\n        text3.text = \"total shader compilation time: \" + (instrumentation.shaderCompilationTimeCounter.total).toFixed(2) + \"ms\";\n        text4.text = \"average shader compilation time: \" + (instrumentation.shaderCompilationTimeCounter.average).toFixed(2) + \"ms\";\n        text5.text = \"compiler shaders count: \" + instrumentation.shaderCompilationTimeCounter.count;\n    });*/\n\n\n    function update(){\n        text1.text = \"FPS:\"+ engine.getFps().toFixed();\n        //text2.text = \"DCs:\"+ instrumentation.drawCallsCounter.current.toString();\n        //text1.text = \"current frame time (GPU): \" + (instrumentation.gpuFrameTimeCounter.current * 0.000001).toFixed(2) + \"ms\";\n        //text2.text = \"average frame time (GPU): \" + (instrumentation.gpuFrameTimeCounter.average * 0.000001).toFixed(2) + \"ms\";\n        //text3.text = \"total shader compilation time: \" + (instrumentation.shaderCompilationTimeCounter.total).toFixed(2) + \"ms\";\n        //text4.text = \"average shader compilation time: \" + (instrumentation.shaderCompilationTimeCounter.average).toFixed(2) + \"ms\";\n        //text5.text = \"compiler shaders count: \" + instrumentation.shaderCompilationTimeCounter.count;\n    }\n    return {\n        update,\n    }\n}\n/*\n\t\t\t\t\tdivFps.innerHTML = engine.getFps().toFixed() + \" fps\";\n\t\t\t\t\tdivDCs.innerHTML = sceneInstru.drawCallsCounter.current.toString() + \" DCs\";\n*/","import * as BABYLON from 'babylonjs';\nimport * as CANNON from 'cannon';\nimport 'babylonjs-loaders';\n//import { SkyMaterial } from \"babylonjs-materials\";\nimport SkySim from './../scenery/SkySimulator.js';\nimport OceanSim from './../scenery/OceanSimulator.js';\nimport ShadowManager from './../scenery/sahdowManager';\nimport Battleship from './../props/BattleShip';\nimport Airship from './../props/Airship';\nimport BirdFlock from './../props/Birds';\nimport { AirplaneWW2} from './../props/VehiclesData.js';\nimport HudPanel from './../hud/Hud';\nimport Airplane from './../props/Airplane';\nimport Suspension from './../props/Vehicle';\nimport vehicleParts from './../props/VehicleComponents';\nimport Instrumentation from './../utils/instrumentation.js'\n//// base ////\nclass ComponentBase {\n\n    constructor(scene) {\n        this.scene = scene;\n        console.log(this.constructor.name)\n        this.componentes = [];\n    }\n}\n/// game objects ///\nexport class Scene extends ComponentBase {\n    constructor(engine) {\n        super(null);\n        this.object = new BABYLON.Scene(engine);\n    }\n\n    init() { }\n    update() { this.object.render(); }\n    dispose() { }\n}\nexport class Camera extends ComponentBase {\n    constructor(scene, canvas) {\n        super(scene);\n        \n        var followCamera = new BABYLON.FollowCamera(\"followcamera\", new BABYLON.Vector3(0,0,-100), scene.object);\n        followCamera.heightOffset = 1;\n        //followCamera.rotationOffset = 180;\n        followCamera.cameraAcceleration = 0.05   ;//0.06 \n        followCamera.maxCameraSpeed = 1800;//1800\n        followCamera.inertia = 20.0;//20\n        followCamera.radius = -5;\n        //followCamera.lockedTarget = mesh.object;\n        followCamera.attachControl(canvas, false);\n        \n        scene.object.activeCamera = followCamera;\n        this.object = followCamera;\n    }\n\n    init() {\n    }\n    update() { }\n    dispose() { }\n}\nexport class Light extends ComponentBase {\n    constructor(scene, type) {\n        super(scene);\n\n        this.type = type;\n\n        switch (type) {\n            case \"Hemispheric\":\n                this.object = new BABYLON.HemisphericLight(\"ambient\", new BABYLON.Vector3(-0.7, 0.3, -0.7), scene.object);\n                break;\n            case \"Point\":\n                this.object = new BABYLON.PointLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene.object);\n                break;\n            case \"Directional\":\n                this.object = new BABYLON.DirectionalLight(\"light\", new BABYLON.Vector3(0.7, -0.3, 0.7), scene.object);\n                break;\n            default:\n                this.object = null;\n                break;\n        }\n    }\n    init() {\n        switch (this.type) {\n            case \"Hemispheric\":\n                this.object.position = new BABYLON.Vector3(0, 55, 5);\n                this.object.intensity =0.8;\n                this.object.diffuse = new BABYLON.Color3(0.96, 0.97, 0.93);\n                this.object.groundColor = new BABYLON.Color3(0.1, 0.1, 0.1);\n                this.object.setEnabled(true);\n                break;\n            case \"Point\":\n                this.object.intensity = 0.7;\n                this.object.diffuse = BABYLON.Color3.FromHexString('#ff0000');\n                this.object.position.z = 10;\n                this.object.position.y = 10;\n                break;\n            case \"Directional\":\n                this.object.position = new BABYLON.Vector3(50,100,100);//new BABYLON.Vector3(0, 50, 0);\n                this.object.intensity = 2.3;\n                this.object.setEnabled(true);  \n                break;\n            default:\n                break;\n        }\n    }\n\n    update() { }\n    dispose() { }\n}\nexport class Physics extends ComponentBase {\n    constructor(scene) {\n        super(scene);\n        var gravityVector = new BABYLON.Vector3(0,-9.81, 0);\n        this.object = new BABYLON.CannonJSPlugin(false,undefined,CANNON);\n        scene.object.enablePhysics(gravityVector, this.object);\n        scene.object.physicsEnabled = false;\n    }\n\n    init() {\n        this.object.setTimeStep(1/30);\n     }\n    update() { }\n    dispose() { }\n}\nexport class Box extends ComponentBase {\n    constructor(scene) {\n        super(scene);\n        this.object = BABYLON.MeshBuilder.CreateBox(\"\", { size: 1 }, scene.object);\n        this.object.position.y = 80;\n        this.mesh = this.object;\n    }\n\n    init() { }\n    update() { }\n    dispose() { }\n}\nexport class Sky extends ComponentBase {\n    constructor(scene, camera) {\n        super(scene);\n        this.object = new SkySim(scene.object, null, null, camera.object, 800);\n    }\n\n    init() { }\n    update() { }\n    dispose() { }\n}\nexport class Ocean extends ComponentBase {\n    constructor(scene) {\n        super(scene);\n        this.object = new OceanSim(scene.object, 800);\n    }\n\n    init() { }\n    update() { }\n    dispose() { }\n}\nexport class Clouds extends ComponentBase {\n    constructor(scene,area) {\n        super(scene);\n        var spriteManagerClouds = new BABYLON.SpriteManager(\"cloudsManager\", \"http://www.babylonjs.com/Scenes/Clouds/cloud.png\", 1000, 256, scene.object);\n        for (var i = 0; i < 100; i++) {\n              var clouds = new BABYLON.Sprite(\"clouds\", spriteManagerClouds);\n              //clouds.color = new BABYLON.Color3(0.87, 0.93, 0.91);\n              clouds.position.x = Math.random() * area - area/2;\n              clouds.position.y = Math.random() * 150 + 150;\n              clouds.position.z = Math.random() * area - area/2; \n              clouds.size = Math.random() * 60 +50;\n              if (Math.round(Math.random() * 5) === 0) {\n                  clouds.angle = Math.PI * 90 / 180;            \n              }\n          if (Math.round(Math.random() * 2) === 0) {\n            clouds.invertU = -1;\n          }\n          if (Math.round(Math.random() * 4) === 0) {\n            clouds.invertV = -1;\n          }\n        }\n        this.object = spriteManagerClouds;\n    }\n\n    init() { }\n    update() { }\n    dispose() { }\n}\nexport class Keyboard extends ComponentBase {\n    constructor(scene) {\n        super(scene);\n        this.inputMap = {};\n        const keys = [\"w\", \"s\", \"a\", \"d\", \"q\", \"e\", \"p\", \"o\", \"m\", \"n\", \"1\", \"2\", \"k\", \"b\", \"9\",\"0\", \"l\"];\n        keys.forEach(key=>this.inputMap[key] = {type:false,keyState:\"up\"});\n        //this.object = null;\n    }\n    keyAction(key, onKeyFunc ){//= () => {}\n        if(this.inputMap[key].type) {\n            onKeyFunc();\n        }\n    }\n    keyActionTrig(key, onKeyDownFunc = () => {},onKeyUpFunc = () => {}, onKeyHoldFunc = () => {} ){\n        if(this.inputMap[key].type) {\n            if(this.inputMap[key].keyState == \"up\") {\n                this.inputMap[key].keyState = \"down\"; \n                onKeyDownFunc();\n            }\n            else {\n                this.inputMap[key].keyState = \"hold\";\n                onKeyHoldFunc();\n            }\n        }else{\n            if(this.inputMap[key].keyState != \"up\") {\n                this.inputMap[key].keyState = \"up\";\n                onKeyUpFunc();\n            }\n            \n        }\n    }\n    init() {\n        // Keyboard events\n        var that = this;\n        this.scene.object.actionManager = new BABYLON.ActionManager(this.scene.object);\n        this.scene.object.actionManager.registerAction(new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnKeyDownTrigger, function (evt) {\n            if(that.inputMap[evt.sourceEvent.key]) that.inputMap[evt.sourceEvent.key].type=evt.sourceEvent.type === \"keydown\";// evt.sourceEvent.type == \"keydown\";//{key: evt.sourceEvent.type == \"keydown\", trigger:true};// +(evt.sourceEvent.type == \"keydown\")+(inputMap[evt.sourceEvent.key]==1);//\n        }));\n        this.scene.object.actionManager.registerAction(new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnKeyUpTrigger, function (evt) {\n            if(that.inputMap[evt.sourceEvent.key]) that.inputMap[evt.sourceEvent.key].type= false;//if(inputMap[evt.sourceEvent.key]) inputMap[evt.sourceEvent.key] = {type:false,keyState:\"up\"};//+(evt.sourceEvent.type == \"keydown\");//-(inputMap[evt.sourceEvent.key]==1);//evt.sourceEvent.type == \"keydown\";//{key: evt.sourceEvent.type == \"keydown\", trigger:true};\n        }));\n     }\n    update() { \n        //this.keyActionTrig(\"o\", ()=> this.scene.object.debugLayer.show());\n    }\n    dispose() { }\n}\n\n/*export class Assets extends ComponentBase {\n    constructor(scene) {\n        super(scene);\n        this.object = new BABYLON.AssetsManager(scene.object);\n    }\n    init() {\n        this.object.load();\n     }\n    update() { }\n    dispose() { }\n}*/\n\nvar loadPromise = async(root, file, scene)=>{\n    return new Promise((res,rej)=>{\n        BABYLON.SceneLoader.LoadAssetContainer(root, file, scene, function (container) {\n            res(container)\n        });\n    })\n}\nexport class Terrain extends ComponentBase {\n    constructor(scene) {\n        super(scene);\n        return (async () => {\n            this.assets = await loadPromise(process.env.PUBLIC_URL+\"/assets//\", \"achil_2.glb\", scene.object);\n            this.assets.meshes[1].scaling = this.assets.meshes[1].scaling.multiplyByFloats(8,8,8); \n            this.assets.meshes[1].position.y = -1.2;\n            //optimization\n            /*this.assets.meshes[1].material.freeze();\n            this.assets.meshes[1].freezeWorldMatrix();\n            this.assets.meshes[1].doNotSyncBoundingInfo = true;*/\n            this.assets.meshes[1].receiveShadows = true;\n            this.shadowMesh = this.mesh = this.assets.meshes[1];\n            //console.log(\"terrainAsync constructor\", this.assets.meshes[1].scaling);\n            return this;\n          })();\n    }\n    init() {\n        this.assets.addAllToScene();\n     }\n    update() { }\n    dispose() { }\n}\nexport class Shadows extends ComponentBase {\n    constructor(scene, sun) {\n        super(scene);\n        this.object = new ShadowManager(sun.object);\n    }\n    init() {\n        //this.object.load();\n     }\n    update() { }\n    dispose() { }\n}\n\n/*async function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\nexport class Test extends ComponentBase {\n    constructor(scene) {\n        super(scene);\n        return (async () => {\n\n            // Call async functions here\n            await sleep(500);\n            \n            this.value = 4;\n            console.log(\"testAsync constructor\");\n            // Constructors return `this` implicitly, but this is an IIFE, so\n            // return `this` explicitly (else we'd return an empty object).\n            return this;\n          })();\n    }\n    testAsync(){\n        return new Promise((resolve,reject)=>{\n            setTimeout(function(){\n                console.log(\"testAsync\");\n                resolve();\n            }, 2000);\n            \n        });\n    }\n    async loadAsync(){\n        await this.testAsync();\n        console.log(\"testFinished\");\n    }\n    init() {\n        //this.loadAsync();\n        \n     }\n    update() { }\n    dispose() { }\n}*/\nexport class Airships extends ComponentBase {\n    constructor(scene) {\n        super(scene);\n        this.object = null;\n        return (async () => {\n            this.assets = await loadPromise(process.env.PUBLIC_URL+\"/assets//\", \"titan_parts_joined_uvmapped.glb\", scene.object);\n            return this;\n          })();\n    }\n    init() {\n        this.object = new Airship(this.scene.object, this.assets.meshes[0],{debug:false}); \n        this.assets.addAllToScene();\n\n     }\n    update() { \n        this.object.update();\n    }\n    dispose() { }\n}\nexport class Ship extends ComponentBase {\n    constructor(scene) {\n        super(scene);\n        this.object = null;\n        return (async () => {\n            this.assets = await loadPromise(process.env.PUBLIC_URL+\"/assets//\", \"nimitz_single_mesh.glb\", scene.object);\n            return this;\n          })();\n    }\n    init() {\n        this.object = new Battleship(this.scene.object, this.assets.meshes[0]);\n        this.assets.addAllToScene();\n\n     }\n    update() { \n        this.object.update();\n    }\n    dispose() { }\n}\n\nexport class Birds extends ComponentBase {\n    constructor(scene) {\n        super(scene);\n        this.object = null;\n        this.mesh = null;\n        return (async () => {\n            this.assets = await loadPromise(process.env.PUBLIC_URL+\"/assets//\", \"flying-gull.glb\", scene.object);\n            return this;\n          })();\n    }\n    init() {\n        const gullModel = this.assets.meshes[1];\n        //console.log(gullModel);\n        gullModel.scaling = new BABYLON.Vector3(0.02,0.02,0.02);\n        //gullModel.scaling = new BABYLON.Vector3(0.012,0.012,0.012);\n        gullModel.rotationQuaternion = new BABYLON.Vector3(0,-Math.PI/4,0).toQuaternion();\n        gullModel.bakeCurrentTransformIntoVertices();\n        this.assets.addAllToScene();\n        //console.log(\"gull\",gullModel);\n        var birds = [];\n        //const vehicleMeshPrefab = createVehicle(scene, { size: 1 });\n        for (let i = 0; i < 19; i++){\n            //const gull = gullModel.clone('gull_'+i.toString());\n            const gull = gullModel.createInstance('gull_'+i.toString());\n            //gull.setEnabled(true);\n            birds.push(gull);\n        }\n        birds.push(gullModel);\n        //camera.lockedTarget =  birds[0]; \n        this.object = new BirdFlock(this.scene.object, birds);\n        this.mesh = birds[0];\n     }\n    update() { \n        this.object.update();\n    }\n    dispose() { }\n}\nexport class Aircraft extends ComponentBase {\n    constructor(scene,canvas) {\n        super(scene);\n        this.canvas = canvas;\n        this.object = null;\n        this.mesh = null;\n        return (async () => {\n            this.assets = await loadPromise(process.env.PUBLIC_URL+\"/assets//\", \"airplane-ww2-collision-scaled.glb\", scene.object);\n            return this;\n          })();\n    }\n    init() {\n        this.object = new vehicleParts();\n        //console.log(\"1\");\n        this.object.bluePrint = new AirplaneWW2(this.scene.object, this.assets.meshes, new BABYLON.Vector3(275, 6.5, 364),new BABYLON.Vector3(0,-Math.PI/2,0));\n        //console.log(\"2\");\n        this.object.suspension = new Suspension(this.scene.object, this.object.bluePrint);\n        //console.log(\"3\");\n        this.object.avionics = new Airplane(this.scene.object, this.object.bluePrint.chassisBody, this.object.bluePrint.controls);\n        //console.log(\"4\");\n        this.object.hud = new HudPanel(this.scene.object, this.canvas);\n        //console.log(\"5\");\n        this.object.hud.linkWithMesh(this.object.bluePrint.chassisMesh); \n        //cameraEnt.object.lockedTarget =  this.object.bluePrint.chassisMesh; \n        this.object.position = new BABYLON.Vector3(-10,5.7,-5);\n        //groundShadow.addMesh(this.object.bluePrint.visualMeshes[0]);\n        this.mesh = this.object.bluePrint.chassisMesh;//visualMeshes[0]\n        this.shadowMesh = this.object.bluePrint.visualMeshes[0];\n\n        //this.object = new Battleship(this.scene.object, this.assets.meshes[0]);\n        this.assets.addAllToScene();\n\n     }\n    update() { \n        this.object.update();\n    }\n    dispose() { }\n}\nexport class DebugUi extends ComponentBase {\n    constructor(scene, engine) {\n        super(scene);\n        this.object = new Instrumentation(engine);\n    }\n    init() {}\n    update() { \n        this.object.update();\n    }\n    dispose() { }\n}\n///// INTERACTIONS ////\nexport class ShadowCasters extends ComponentBase {\n    constructor(scene, shadows, casters) {\n        super(scene);\n        this.shadows = shadows.object;\n        this.casters = casters;\n        //this.object = new ShadowManager(sun.object);\n    }\n    init() {\n        //console.log(this.casters[0]);\n        this.casters.forEach(c=>{this.shadows.addMesh(c.shadowMesh);\n        //console.log(c.mesh);\n        });\n     }\n    update() { }\n    dispose() { }\n}\nexport class KeyboardGameStateInteraction extends ComponentBase {\n    constructor(scene, keyboard, actors) {\n        super(scene);\n        this.keyboard = keyboard;\n        this.actors = actors;\n    }\n    init() { }\n    update() { \n        this.keyboard.keyActionTrig(\"o\", ()=> this.scene.object.debugLayer.show());\n        this.keyboard.keyActionTrig(\"p\", ()=> {\n            this.scene.object.physicsEnabled = !this.scene.object.physicsEnabled;\n            this.actors.forEach( (a) =>{ a.object.pause = this.scene.object.physicsEnabled; });\n        });  \n    }\n    dispose() { }\n}\nexport class KeyboardCameraInteraction extends ComponentBase {\n    constructor(scene, keyboard, camera, actors) {\n        super(scene);\n        this.keyboard = keyboard;\n        this.camera = camera.object;\n        this.actors = actors;\n        this.index = 0;\n    }\n    init() { \n        this.camera.lockedTarget = this.actors[this.index++].mesh;\n    }\n    update() { \n        this.keyboard.keyActionTrig(\"l\", ()=> {\n            this.camera.lockedTarget = this.actors[this.index++].mesh;\n            if(this.index >= this.actors.length) this.index = 0;\n        });  \n    }\n    dispose() { }\n}\nexport class KeyboardSkyInteraction extends ComponentBase {\n    constructor(scene, keyboard, sky, sun, ambient) {\n        super(scene);\n        this.ref = sky;\n        this.keyboard = keyboard;\n        this.sun = sun;\n        this.ambient = ambient;\n    }\n    setLightDirection(){\n        var direction =  this.ref.object.getLightDirection();\n        //var sunIntensity = this.ref.object.convertRange(Math.abs(this.ref.object.getSkyMesh().material.inclination),[0,0.5],[0.8,0.2]);\n        this.ambient.object.direction.copyFromFloats(direction.x, direction.y, direction.z);\n        this.sun.object.direction.copyFromFloats(-direction.x, -direction.y, -direction.z);\n        this.ambient.object.intensity = this.ref.object.convertRange(Math.abs(this.ref.object.getSkyMesh().material.inclination),[0,0.5],[0.8,0.2]);\n        this.sun.object.intensity = this.ref.object.convertRange(Math.abs(this.ref.object.getSkyMesh().material.inclination),[0,0.5],[2.3,1.4]);\n    }\n    init() {\n        this.ref.object.transitionSunInclination(15*0.025);\n        this.setLightDirection();\n     }\n    update() { \n        this.keyboard.keyActionTrig(\"1\", ()=> {\n            this.ref.object.transitionSunInclination(0.025);\n            this.setLightDirection();\n        });\n        this.keyboard.keyActionTrig(\"2\", ()=> {\n            this.ref.object.transitionSunInclination(-0.025);\n            this.setLightDirection();\n        });\n        \n    }\n    dispose() { }\n}\nexport class KeyboardAirplaneInteraction extends ComponentBase {\n    constructor(scene, keyboard, airplane) {\n        super(scene);\n        this.ref = airplane;\n        this.keyboard = keyboard;\n    }\n    init() { }\n    update() { \n        this.keyboard.keyAction(\"q\", ()=>this.ref.object.steer(vehicleParts.DIR.TILT_LEFT));\n        this.keyboard.keyAction(\"e\", ()=>this.ref.object.steer(vehicleParts.DIR.TILT_RIGHT));\n        this.keyboard.keyAction(\"w\", ()=>this.ref.object.steer(vehicleParts.DIR.DOWN));\n        this.keyboard.keyAction(\"s\", ()=>this.ref.object.steer(vehicleParts.DIR.UP));\n        this.keyboard.keyActionTrig(\"d\", ()=>this.ref.object.steer(vehicleParts.DIR.LEFT),\n                                         ()=>this.ref.object.steer(vehicleParts.DIR.LEFT_RESET),\n                                         ()=>this.ref.object.steer(vehicleParts.DIR.LEFT_HOLD));\n        this.keyboard.keyActionTrig(\"a\", ()=>this.ref.object.steer(vehicleParts.DIR.RIGHT),\n                                         ()=>this.ref.object.steer(vehicleParts.DIR.RIGHT_RESET),\n                                         ()=>this.ref.object.steer(vehicleParts.DIR.RIGHT_HOLD));   \n        this.keyboard.keyAction(\"m\", ()=>this.ref.object.power(vehicleParts.DIR.POWER_UP));    \n        this.keyboard.keyAction(\"n\", ()=>this.ref.object.power(vehicleParts.DIR.POWER_DOWN));     \n        this.keyboard.keyActionTrig(\"b\", ()=> this.ref.object.brake(vehicleParts.DIR.BRAKE),\n                                         ()=> this.ref.object.brake(vehicleParts.DIR.UNBRAKE),\n                                         ()=> this.ref.object.brake(vehicleParts.DIR.BRAKE));     \n    }\n    dispose() { }\n}\nexport class AirplaneBirdsInteraction extends ComponentBase {\n    constructor(scene, airplane,  birds) {\n        super(scene);\n        this.airplane = airplane;\n        this.birds = birds;\n    }\n    init() { }\n    update() { \n        this.birds.object.enemyPosition  = this.airplane.object.position;\n    }\n    dispose() { }\n}","//import * as BABYLON from \"@babylonjs/core\";\nimport * as BABYLON from 'babylonjs';\nimport 'babylonjs-loaders';\nimport {Clock} from './utils/Clock';\nimport {Scene, Camera, Light, Physics, Box, Sky, Clouds, Keyboard, \n        KeyboardSkyInteraction, Ocean, Terrain, Shadows, \n        ShadowCasters, Ship, KeyboardGameStateInteraction, Airships,\n        Birds, Aircraft, KeyboardCameraInteraction, KeyboardAirplaneInteraction,\n        AirplaneBirdsInteraction, DebugUi\n} from './ecs/ecs';\n\nexport default function canvas(canvas)  {\n    const FRAMERATE = 1/40;\n    const fpcClock = new Clock();\n    let components = [];\n    const engine = new BABYLON.Engine(canvas, true, {preserveDrawingBuffer: true, stencil: true});\n    engine.loadingUIText = \"Loading world and airplane...\";\n    engine.loadingUIBackgroundColor = \"Purple\";\n    //engine.stopRenderLoop();\n    //const debugUI = new Inspector(engine);\n    (async () => {\n    console.log(\"start\");\n    //ecs\n    let sceneEnt = new Scene(engine);\n    let physicsEnt = new Physics(sceneEnt);\n    let light_sun = new Light(sceneEnt, \"Directional\");\n    let light_ambient = new Light(sceneEnt, \"Hemispheric\");\n    let cameraEnt = new Camera(sceneEnt, canvas);\n    let sky = new Sky(sceneEnt, cameraEnt);\n    let shadows = new Shadows(sceneEnt, light_sun);\n    let box = new Box(sceneEnt);\n    let clouds = new Clouds(sceneEnt, 800);\n    let ocean = new Ocean(sceneEnt);\n    let keyboard = new Keyboard(sceneEnt);\n    let terrain = await new Terrain(sceneEnt);\n    let nimitz = await new Ship(sceneEnt);\n    let zeppelin = await new Airships(sceneEnt);\n    let birdflock = await new Birds(sceneEnt);\n    let airplane = await new Aircraft(sceneEnt,canvas);  \n    let debugUI = new DebugUi(sceneEnt, engine);\n    //console.log(\"airplane\",airplane.object.bluePrint.chassisMesh);\n    let keyboardCameraActions = new KeyboardCameraInteraction(sceneEnt, keyboard, cameraEnt, [airplane, birdflock,box]);\n    let shadowCasters = new ShadowCasters(sceneEnt, shadows, [terrain, airplane]);\n    let keyboardSkyActions = new KeyboardSkyInteraction(sceneEnt, keyboard, sky, light_sun, light_ambient);\n    let keyboardStateActions = new KeyboardGameStateInteraction(sceneEnt, keyboard, [nimitz, zeppelin, birdflock]);\n    \n    let keyboardAirplaneActions = new KeyboardAirplaneInteraction(sceneEnt, keyboard, airplane);\n    let airplaneBirdsInteractions = new AirplaneBirdsInteraction(sceneEnt, airplane, birdflock);\n    // create array of all game components\n    components.push(sceneEnt);\n    components.push(physicsEnt);\n    components.push(cameraEnt);\n    components.push(light_sun);\n    components.push(light_ambient);\n    components.push(shadows);\n    components.push(box);\n    components.push(ocean);\n    components.push(sky);\n    components.push(clouds);\n    components.push(keyboard);\n    components.push(terrain);\n    components.push(nimitz);\n    components.push(zeppelin);\n    components.push(birdflock);\n    components.push(airplane);\n    \n    components.push(debugUI);\n\n    components.push(shadowCasters);\n    components.push(keyboardSkyActions);\n    components.push(keyboardStateActions);\n    components.push(keyboardCameraActions);\n    components.push(keyboardAirplaneActions);\n    components.push(airplaneBirdsInteractions);\n\n    components.forEach((component) => { component.init(); });\n    console.log(\"finished\");\n    \n    })();\n\n/*\n    scene.onDispose = function () {\n        components.forEach((component) => { component.dispose(); })\n    }\n\n*/\n\n    function onWindowResize() {\n        engine.resize();\n    }\n    function animate(){\n        engine.runRenderLoop(function () {    \n            if(fpcClock.timeIntervalCheck(FRAMERATE)){\n                components.forEach((component) => { component.update(); })\n            }\n        });\n    }\n    return {\n        onWindowResize,\n        //onMouseMove,\n        animate\n    }\n}\n","import SceneManager from './SceneManager';\n\nexport default container => {\n    let canvasHalfWidth;\n    let canvasHalfHeight;\n    const canvas = createCanvas(document, container);\n    canvas.style.width = '100%';\n    canvas.style.height= '100%';\n    canvas.width  = canvas.offsetWidth;\n    canvas.height = canvas.offsetHeight;\n    const sceneManager = new SceneManager(canvas);\n    \n    bindEventListeners();\n    resizeCanvas();\n    sceneManager.animate();\n     \n    function createCanvas(document, container) {\n        const canvas = document.createElement(\"canvas\");    \n        container.appendChild(canvas);   \n        return canvas;\n    }\n\n    function bindEventListeners() {\n        window.onresize = resizeCanvas;\n        resizeCanvas();\t\n    }\n\n    function resizeCanvas() {        \n        canvas.style.width = '100%';\n        canvas.style.height= '100%';\n        canvas.width  = canvas.offsetWidth;\n        canvas.height = canvas.offsetHeight;\n\n        canvasHalfWidth = Math.round(canvas.offsetWidth/2);\n        canvasHalfHeight = Math.round(canvas.offsetHeight/2);\n\n        sceneManager.onWindowResize();\n    }\n\n}\n","import React, { Component } from 'react';\n\nimport threeEntryPoint from \"./babylonjs/babylonEntryPoint\"\nimport \"./viewer.css\"\n\nexport default class Viewer extends Component {\n    \n    componentDidMount() {\n        threeEntryPoint(this.threeRootElement);\n    }\n\n    render () {\n        return (\n            <div className=\"viewer-viewer\" ref={element => this.threeRootElement = element} />\n        );\n    }\n}","import './App.css';\nimport Viewer from './Components/Viewer/Viewer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Viewer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}